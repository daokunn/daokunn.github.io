<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/11/12/BeautifulSoup4%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/12/BeautifulSoup4%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="BeautifulSoup4-的使用"><a href="#BeautifulSoup4-的使用" class="headerlink" title="BeautifulSoup4 的使用"></a>BeautifulSoup4 的使用</h2><p>待测试的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dot = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;dotcpp&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;b&gt;c语言网&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;编程网站</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;blog&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;oj&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(dot,<span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 采用Python中自带的html.parser</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())   <span class="comment"># 换行,美观</span></span><br><span class="line"><span class="built_in">print</span>(soup.title)  <span class="comment"># 获取title标签的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.name) <span class="comment"># 获取title标签的名字</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.string) <span class="comment"># 获取title标签的文本内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.head) <span class="comment"># 获取head标签的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.div)<span class="comment"># 获取第一个div标签中的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)  <span class="comment"># 获取第一个a标签中的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&quot;a&quot;</span>)) <span class="comment"># 获取所有的a标签，并遍历打印a标签中的href的值</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="built_in">id</span> = <span class="string">&quot;dot&quot;</span>)) <span class="comment"># 获取id=&quot;dot&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span></span><br><span class="line">   dotcpp</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="code">    c语言网</span></span><br><span class="line"><span class="code">   &lt;/b&gt;</span></span><br><span class="line"><span class="code">  &lt;/p&gt;</span></span><br><span class="line"><span class="code">  &lt;p&gt;</span></span><br><span class="line"><span class="code">   编程网站</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;</span></span><br><span class="line"><span class="code">    home</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">   ,</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;</span></span><br><span class="line"><span class="code">    blog</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;</span></span><br><span class="line"><span class="code">    oj</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">  &lt;/p&gt;</span></span><br><span class="line"><span class="code"> &lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code">&lt;title&gt;dotcpp&lt;/title&gt;</span></span><br><span class="line"><span class="code">title</span></span><br><span class="line"><span class="code">dotcpp</span></span><br><span class="line"><span class="code">&lt;head&gt;&lt;title&gt;dotcpp&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="code">None</span></span><br><span class="line"><span class="code">&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;</span></span><br><span class="line"><span class="code">[&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;, &lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;blog&lt;/a&gt;, &lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;oj&lt;/a&gt;]</span></span><br><span class="line"><span class="code">None</span></span><br></pre></td></tr></table></figure><p>注意解析html网页的解析方式，我们采用了Python中自带的html.parser，其实还可以选择 lxml HTML、lxml XML 和 html5lib 等解析器，他们分别有着优劣点。我们在使用BeautifulSoup的时候一定要注意的就是网页解析，正确的解析方式十分重要。</p><h2 id="BeautifulSoup4-的四个对象"><a href="#BeautifulSoup4-的四个对象" class="headerlink" title="BeautifulSoup4 的四个对象"></a>BeautifulSoup4 的四个对象</h2><ol><li><strong>Tag</strong></li></ol><p>​对应HTML中的标签。如上:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.title) <span class="comment"># 获取title标签的名称</span></span><br><span class="line"><span class="built_in">print</span>(soup.a) <span class="comment"># 获取所有的a标签中的所有内容</span></span><br></pre></td></tr></table></figure><p>​Tag 有两个属性，分别是 name 和 attrs，name 也就是标签的名字，attrs 对应 class、id 等信息。</p><ol start="2"><li><h3 id="NavigableSting"><a href="#NavigableSting" class="headerlink" title="NavigableSting"></a><strong>NavigableSting</strong></h3></li></ol><p>​对应的是标签内部的文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(suop.title.string) <span class="comment"># 获取标签的所有内容</span></span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a><strong>BeautifulSoup</strong></h3></li></ol><p>​对应的是文档中的内容，它类似于一个特殊的标签，我们可以获取到它的类型、名称和属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a><strong>Comment</strong></h3></li></ol><p>​是一个特殊的NavigableSting对象，它输出的内容没有注释符号，如果不加以处理会影响我们对文档的解析，因为这种方式会忽略掉文档的注释，</p><p>​    因此注释中的内容会以代码格式被解析出来，进而影响我们的后续操作，所有我们 一般会采用.string来输出内容。</p><h2 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h2><p>在解析文档文件的过程中，如果需要遍历文档，我们需要使用到一些特殊的方法。</p><ol><li><h3 id="contents"><a href="#contents" class="headerlink" title=".contents"></a><strong>.contents</strong></h3><p>​获取Tag的所有子节点，以列表的形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con =  soup.head.contents</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> con:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><h3 id="children"><a href="#children" class="headerlink" title=".children"></a><strong>.children</strong></h3></li></ol><p>​获取Tag的所有子节点，存储在一个生成器中，可以直接通过遍历的方式来访问，和上面例子一致。</p><ol start="3"><li><h3 id="descendants"><a href="#descendants" class="headerlink" title=".descendants"></a><strong>.descendants</strong></h3></li></ol><p>​ 获取Tag的所有子孙节点。</p><ol start="4"><li><h3 id="strings"><a href="#strings" class="headerlink" title=".strings"></a><strong>.strings</strong></h3></li></ol><p>​获取子孙节点中的所有内容，可以通过遍历的方式来访问。</p><ol start="5"><li><strong>.parent</strong></li></ol><p>​    获取到Tag标签的父节点。</p><ol start="6"><li><strong>.parents</strong></li></ol><p>​    递归得到所有父辈节点，存放在一个生成器中，可以通过遍历的方式来访问。</p><ol start="7"><li><strong>.previous_siblings</strong></li></ol><p>​    获取Tag上面的所有兄弟节点，返回生成器。</p><ol start="8"><li><strong>.next_siblings</strong></li></ol><p>​    获取Tag下面的所有兄弟节点，返回生成器。</p><p>​    9. <strong>.has_attr</strong></p><p>​    用于判断Tag是否包含属性。</p><h2 id="搜索文档数"><a href="#搜索文档数" class="headerlink" title="搜索文档数"></a>搜索文档数</h2><p>​我们在使用的过程中如果要匹配到搜索内容的全部信息，这时候就需要搜索整个文档树，我们需要采用到<strong>find_all方法</strong>，这个过滤器能贯穿整个搜索的AIP，它可以使用在tag的name中。</p><p>语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( name , attrs , recursive , text , **kwargs )</span><br></pre></td></tr></table></figure><p> name参数即tag的名字，attrs为类或id，recursive为递归性，text为文本参数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬取笔趣阁小说</title>
      <link href="/2022/11/11/Python%E7%88%AC%E5%8F%96%E7%AC%94%E8%B6%A3%E9%98%81%E5%B0%8F%E8%AF%B4/"/>
      <url>/2022/11/11/Python%E7%88%AC%E5%8F%96%E7%AC%94%E8%B6%A3%E9%98%81%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>[TOC]</p><h1 id="了解爬虫"><a href="#了解爬虫" class="headerlink" title="了解爬虫"></a>了解爬虫</h1><h2 id="网络爬虫的分类"><a href="#网络爬虫的分类" class="headerlink" title="网络爬虫的分类"></a>网络爬虫的分类</h2><ul><li>通用网络爬虫(搜索引擎使用,遵守robopts协议)，robots协议是君子协议，只防君子，不防小人。</li><li>聚焦网络爬虫:又称主题网络爬虫，根据预定义的主题来进行相关页面的爬取，与通用网络爬虫想必，它的爬取范围更为精准(自己写的爬虫程序)</li><li>增量式网络爬虫: 对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫。</li><li>深层网络爬虫: Web 页面按存在方式可以分为表层网页和深层网页，深层网页是指大多内容不能通过静态获取，需要用户提交关键词才能获取到隐藏在搜索表单后面的内容。</li></ul><h2 id="爬取数据的步骤"><a href="#爬取数据的步骤" class="headerlink" title="爬取数据的步骤:"></a>爬取数据的步骤:</h2><ol><li><code>发送请求</code>:确定需要爬取的URL地址</li><li><code>获取响应内容</code>:由请求模块向URL地址发出请求,并得到网站的响应</li><li><code>解析内容</code>:利用解析模块从响应内容中提取所需数据</li><li><code>保存数据</code></li></ol><h1 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[<span class="string">:port</span>] / path / [<span class="string">;parameters</span>][<span class="symbol">?query</span>]#fragment</span><br></pre></td></tr></table></figure><p>​<strong>URL</strong>由三部分组成，第一部分是<strong>协议</strong>，有http、https、ftp等，第二部分存放资源的服务器的<strong>域名或IP地址</strong>，第三部分为资源的<strong>具体地址</strong>。</p><p>​我们在进行网络请求的时候通常采用三种方式：urllib、urllib3 和 requests，下面我们就来介绍一下 urllib 和 requests。</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><ol><li>请求模块是<code>urllib.request</code>，是Python标准库模块。</li></ol><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><p>程序的导入方式:</p><ul><li><code>import urllib.request</code></li><li><code>from urllib import request</code></li></ul><h4 id="模块内的方法"><a href="#模块内的方法" class="headerlink" title="模块内的方法"></a>模块内的方法</h4><ul><li><code>urllib.request.urlopen(URL,timeout)</code></li></ul><p>​作用：向网站发起请求并且获取响应对象。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>URL</td><td>需要爬取的URL地址</td></tr><tr><td>timeout</td><td>设置等待超时时间，指定时间未响应抛出异常</td></tr></tbody></table><ul><li><p>响应对象(res)的方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>res.read()</td><td>获取响应内容(字节串)</td></tr><tr><td>res.read().decode()</td><td>获取响应内容(字符串)</td></tr><tr><td>res.geturl()</td><td>返回实际数据的URL地址</td></tr><tr><td>res.getcode()</td><td>获取HTTP响应代码</td></tr></tbody></table></li></ul><p>字节串</p><blockquote><p>什么是字节串<br>        python 中的bytes 类型用来表示一个字节串。他是python3.x新加的类型（对比python2.x）。</p><p>​bytes 只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。bytes 类型的数据非常适合在互联网上传输，可以用于网络通信编程；bytes 也可以用来存储图片、音频、视频等二进制格式的文件。</p><p>字节串（bytes）和字符串（string）的对比：</p><p>​字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。<br>​字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。<br>​字节串和字符串都是不可变序列，不能随意增加和删除数据。</p></blockquote><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取对象</span></span><br><span class="line">res = request.urlopen(url=<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取网页源代码(默认是字节串，需要转换成字符串)</span></span><br><span class="line">html = res.read().decode()</span><br><span class="line"><span class="comment"># html = response.read().decode(&#x27;utf-8&#x27;)#以utf-8格式读取网页的内容</span></span><br><span class="line"><span class="comment"># 获取实际地址</span></span><br><span class="line">url = res.geturl()</span><br><span class="line"><span class="comment"># 返回HTTP响应代码</span></span><br><span class="line">code = res.getcode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出信息</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#print(html)</span></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/C:/Users/道坤/AppData/Roaming/Typora/typora-user-images/image-20221111152246842.png" alt="image-20221111152246842"></p><ol start="2"><li><p>requests 模块</p><pre><code>     requests是一种**第三方模块**，主要用于发送请求，它在使用的时候比urllib模块要简洁方便很多，我们可以在命令操作符里通过pip install requests来安装，也可以在Pycharm中直接进行安装。</code></pre><p>requests 模块也可以使用 get, post, put, delete, hand 等来发送请求。</p><p>我们以 get 方法为例;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.douban.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code) <span class="comment"># 输出状态码</span></span><br><span class="line"><span class="built_in">print</span>(r.encoding) <span class="comment"># 输出编码格式</span></span><br><span class="line"><span class="built_in">print</span>(r.headers) <span class="comment"># 输出头部文件</span></span><br><span class="line"><span class="built_in">print</span>(r.cookies) <span class="comment"># 输出cookie信息</span></span><br><span class="line"><span class="built_in">print</span>(r.content) <span class="comment"># 输出字节流形式网页源码</span></span><br></pre></td></tr></table></figure><p>注意: 在开启代理（或者说科学上网后），会报错。请把 https 改成 http ;或者关闭掉代理。</p></li></ol><h2 id="伪装成用户"><a href="#伪装成用户" class="headerlink" title="伪装成用户"></a>伪装成用户</h2><p>网站是如何判断是正常人类访问还是爬虫访问？</p><p>通过<code>请求头(headers)中的User-Agent</code>来判断。</p><p>所以我们应该修改<code>User-Agent</code>,具体如下:</p><p>使用url.request.Request()方法：</p><ol><li><p>创建请求对象</p></li><li><p>包装请求，重构User-Agent</p><p>常用参数:   URL：请求的URL地址</p></li></ol><p>​headers:添加请求头，类型为字典headers &#x3D; {‘User-Agent’: ‘ ‘}</p><p>字典的值该填什么呢？</p><p>打开浏览器 —&gt; F12 (Ctrl+Shift+I) —&gt; network (网络) —&gt; 刷新 —&gt; 点击一个 —&gt; 下划找到 User-Agent 。把值填入字典即可。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221112220239175.png" alt="image-20221112220239175"></p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造请求对象</span></span><br><span class="line">req = request.Request(url = url,headers=headers)</span><br><span class="line"><span class="comment"># 获取响应对象</span></span><br><span class="line">res = request.urlopen(req)</span><br><span class="line"><span class="comment"># 获取响应内容</span></span><br><span class="line">html = res.read().decode()</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># 1.定义url和headers</span></span><br><span class="line">url=<span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 2.包装请求</span></span><br><span class="line">req=request.Request(url=url,headers=headers)</span><br><span class="line"><span class="comment"># 3.发请求</span></span><br><span class="line">res=request.urlopen(req)</span><br><span class="line"><span class="comment"># 4.获取响应内容</span></span><br><span class="line">html=res.read().decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h4 id="网络超时处理"><a href="#网络超时处理" class="headerlink" title="网络超时处理"></a>网络超时处理</h4><p>​我们在发送网络请求的时候避免不了超时现象的发生，如果我们不设置一个超时时间，那么系统会因为它长时间未响应而无法打开网页。</p><p>​    超时又分为<strong>连接超时</strong>和<strong>读取超时</strong>。</p><p>​    连接超时就是在程序默认的等待时间内没有得到服务器的响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.google.com.hk&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url, timeout = <span class="number">5</span>).text <span class="comment"># 连接限定时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;获得响应&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接超时&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2022-11-12 22:08:55.395394</span><br><span class="line">连接超时</span><br><span class="line">HTTPConnectionPool(host=&#x27;www.google.com.hk&#x27;, port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(<span class="language-xml"><span class="tag">&lt;<span class="name">urllib3.connection.HTTPConnection</span> <span class="attr">object</span> <span class="attr">at</span> <span class="attr">0x0000016A5EEA3520</span>&gt;</span></span>, &#x27;Connection to www.google.com.hk timed out. (connect timeout=5)&#x27;))</span><br><span class="line">2022-11-12 22:09:00.539448</span><br></pre></td></tr></table></figure><p>读取限定时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url, timeout=(<span class="number">5</span>,<span class="number">10</span>)).text</span><br></pre></td></tr></table></figure><p>在这里15即为读取限制时间，如果超过即为读取超时。</p><h4 id="URL的一些处理"><a href="#URL的一些处理" class="headerlink" title="URL的一些处理"></a>URL的一些处理</h4><ol><li>给URL地址中查询参数进行编码</li></ol><p>​导入方式: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure><p>url不能识别中文，需要编码进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;<span class="string">&#x27;word&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;pn&#x27;</span>:<span class="string">&#x27;50&#x27;</span>&#125;</span><br><span class="line">params = urllib.parse.urlencode(params)</span><br><span class="line"><span class="built_in">print</span>(params)</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221111201007783.png" alt="image-20221111201007783"></p><ol start="2"><li><p>拼接URL地址的三种方式</p><ul><li><p>字符串相加:<code>url = &#39;http://www.baidu.com/s?&#39; + 编码后的查询参数</code></p></li><li><p>字符串格式化(占位符<code>%s</code>):<code>url = &#39;http://www.baidu.com/s?%s&#39; %编码后的查询参数</code></p></li><li><p>字符串的<code>format()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(编码后的参数查询)</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>练习: 百度搜索”小璇”，并且保存到本地</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment"># 1.拼接url地址</span></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;请输入百度搜索关键字：&#x27;</span>)</span><br><span class="line">params=parse.urlencode(&#123;<span class="string">&#x27;wd&#x27;</span>:word&#125;)</span><br><span class="line">url=<span class="string">&#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(params) <span class="comment"># 这个url我们需要提前观察它的结构</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 2.发请求获取响应内容</span></span><br><span class="line">req=request.Request(url=url,headers=headers)</span><br><span class="line">res=request.urlopen(req)</span><br><span class="line">html=res.read().decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="comment"># 3.保存到本地文件</span></span><br><span class="line">filename=word+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line"><span class="keyword">with</span> ope(filename,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure><h1 id="百度贴吧爬虫案例"><a href="#百度贴吧爬虫案例" class="headerlink" title="百度贴吧爬虫案例"></a>百度贴吧爬虫案例</h1><p>步骤</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221111210856009.png" alt="image-20221111210856009"></p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduTiebaSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ur1 = <span class="string">&#x27;http://tieba.baidu.com/f?kw=&#123;&#125;&amp;pn=&#123;&#125;&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">self, url</span>):</span><br><span class="line">        req = request.Request(url=url, headers=self.headers)</span><br><span class="line">        res = request.urlopen(req)</span><br><span class="line">        html = res.read().decode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析提取数据的函数&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_html</span>(<span class="params">self, filename, html</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入贴吧名：&#x27;</span>)</span><br><span class="line">        start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入终止页：&#x27;</span>))</span><br><span class="line">        params = parse.quote(name)</span><br><span class="line">        <span class="comment"># 1.拼接url地址</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            pn = (page - <span class="number">1</span>) * <span class="number">50</span>  <span class="comment"># 根据所选贴吧url规律计算得出</span></span><br><span class="line">            url = self.ur1.<span class="built_in">format</span>(params, pn)</span><br><span class="line">            html = self.get_html(url)</span><br><span class="line">            filename = <span class="string">&#x27;&#123;&#125;_第&#123;&#125;页.html&#x27;</span>.<span class="built_in">format</span>(name, page)</span><br><span class="line">            self.save_html(filename, html)</span><br><span class="line">            <span class="comment"># 终端打印提示</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第%d页抓取成功&#x27;</span> % page)</span><br><span class="line">            <span class="comment"># 控制数据抓取的频率</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">test = BaiduTiebaSpider()</span><br><span class="line">test.run()</span><br></pre></td></tr></table></figure><h1 id="爬取笔趣阁小说案例"><a href="#爬取笔趣阁小说案例" class="headerlink" title="爬取笔趣阁小说案例"></a>爬取笔趣阁小说案例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载链接的前缀，‘944’是《剑来》的地址，想下载其他书可以查看原网页换地址</span></span><br><span class="line">first_url = <span class="string">&#x27;https://www.bqg99.com/book/944/&#x27;</span></span><br><span class="line"></span><br><span class="line">basic_url = &#123;</span><br><span class="line">    <span class="string">&#x27;whole&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">custom_header = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载好的小说</span></span><br><span class="line">output = <span class="string">&#x27;D:/studyProject/myNote/novel.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新网页链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_link</span>(<span class="params">url_dict</span>):</span><br><span class="line">    url_dict[<span class="string">&#x27;whole&#x27;</span>] = first_url + <span class="built_in">str</span>(url_dict[<span class="string">&#x27;index&#x27;</span>]) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    url_dict[<span class="string">&#x27;index&#x27;</span>] = url_dict[<span class="string">&#x27;index&#x27;</span>] + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(url_dict[<span class="string">&#x27;whole&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> url_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过GET方法获取网页文本内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_text</span>(<span class="params">url_dict, request_header</span>):</span><br><span class="line">    data = requests.get(url=url_dict[<span class="string">&#x27;whole&#x27;</span>], headers=request_header, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;status = %d&#x27;</span> % data.status_code)</span><br><span class="line">    <span class="keyword">if</span> data.status_code == <span class="number">302</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = BeautifulSoup(data.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        article = data.find(name=<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        chapter_topic = article.h1.text</span><br><span class="line">        content_soup = article.find(name=<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;chaptercontent&#x27;</span>, class_=<span class="string">&#x27;Readarea ReadAjax_content&#x27;</span>)</span><br><span class="line">        content_soup.p.decompose()  <span class="comment"># 去掉多余的“上一章”、“下一章”的导航链接</span></span><br><span class="line">        charter_words = content_soup.stripped_strings</span><br><span class="line">        chapter = &#123;</span><br><span class="line">            <span class="string">&#x27;topic&#x27;</span>: chapter_topic,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: charter_words</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    novel = <span class="built_in">open</span>(file=output, mode=<span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    link = update_link(basic_url)</span><br><span class="line">    text = fetch_text(url_dict=link, request_header=custom_header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        novel.write(text[<span class="string">&#x27;topic&#x27;</span>])</span><br><span class="line">        novel.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text[<span class="string">&#x27;content&#x27;</span>]:</span><br><span class="line">            line = line</span><br><span class="line">            novel.write(line)</span><br><span class="line">            novel.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        novel.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 暂停1秒，防止服务器拒绝，不过这个网站好像没有反爬机制</span></span><br><span class="line"></span><br><span class="line">        link = update_link(link)</span><br><span class="line">        text = fetch_text(url_dict=link, request_header=custom_header)</span><br><span class="line"></span><br><span class="line">    novel.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>参考文章:</p><p>[1]: <a href="https://blog.csdn.net/m0_46213598/article/details/119704825">https://blog.csdn.net/m0_46213598/article/details/119704825</a>“python爬虫快速入门”<br>[2]: <a href="https://www.dotcpp.com/course/318">https://www.dotcpp.com/course/318</a>“Python爬虫技术基础”<br>[3]: <a href="https://www.52pojie.cn/thread-1710198-1-1.html">https://www.52pojie.cn/thread-1710198-1-1.html</a>“笔趣阁小说爬虫下载”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列实现停车场</title>
      <link href="/2022/11/07/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%81%9C%E8%BD%A6%E5%9C%BA/"/>
      <url>/2022/11/07/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%81%9C%E8%BD%A6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>设停车场是一个可停放n辆汽车的狭长死胡同，南边封口，汽车只能从北边进出（这样的停车场世间少有）。汽车在停车场内按车辆到达时间的先后顺序，最先到达的第一辆车停放在车场的最南端，依次向北排开。若车场内已停满n辆汽车，则后来的汽车只能在门外的候车场上等候，一旦有车开走，则排在候车场上的第一辆车即可开入。当停车场内某辆车要离开时，在它之后进入的车辆必须先退出车场为它让路（假定停车场内设有供车辆进出的便道，所有的司机也必须在车内随时待命），待该辆车开出大门外，其他车辆再按原次序进入车场。每辆停放在车场的车在它离开停车场时，要按停留的时间长短交纳费用。试为停车场编制按上述要求进行管理的模拟程序。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221107175154319-16678147186851.png" alt="image-20221107175154319"></p><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><p><code>time</code>函数</p><p>   time_t now;</p><p>   time(&amp;now);&#x2F;&#x2F; 等同于now &#x3D; time(NULL)</p><p>   printf(“now time is %d\n”, now);</p><table><thead><tr><th align="center">返回值</th><th>返回1970-1-1, 00:00:00以来经过的秒数。(失败：-1)</th></tr></thead><tbody><tr><td align="center">原型</td><td>time_t time(time_t *calptr)</td></tr><tr><td align="center">头文件</td><td>&lt;time.h&gt;</td></tr></tbody></table><p>举例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> now;</span><br><span class="line">    time(&amp;now);<span class="comment">// 等同于now = time(NULL)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;now time is %d\n&quot;</span>, now);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109095159376.png" alt="image-20221109095159376"></p><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p>使用<code>localtime</code>函数，将时间数值变换成本地时间，考虑到本地时区和夏令时标志。</p><table><thead><tr><th>原型</th><th>struct tm *localtime(const time_t * calptr);</th></tr></thead><tbody><tr><td>返回值</td><td>struct tm *结构体 （失败返回NULL）</td></tr><tr><td>头文件</td><td>&lt;time.h&gt;</td></tr></tbody></table><p>struct tm *结构体 ，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line"><span class="type">int</span> tm_sec;       <span class="comment">/* 秒 – 取值区间为[0,59] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_min;       <span class="comment">/* 分 - 取值区间为[0,59] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_hour;      <span class="comment">/* 时 - 取值区间为[0,23] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_mday;     <span class="comment">/* 一个月中的日期 - 取值区间为[1,31] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_mon;     <span class="comment">/* 月份（从一月开始，0代表一月） - 取值区间为[0,11] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_year;     <span class="comment">/* 年份，其值等于实际年份减去1900 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_wday;    <span class="comment">/* 星期 – 取值区间为[0,6]，其中0代表星期天，1代表星期一 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_yday;    <span class="comment">/* 从每年1月1日开始的天数– 取值区间[0,365]，其中0代表1月1日 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_isdst;    <span class="comment">/* 夏令时标识符，夏令时tm_isdst为正；不实行夏令时tm_isdst为0 */</span>    </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//此结构体空间由内核自动分配, 而且不要去释放它.</span></span><br><span class="line">   <span class="comment">//失败: NULL</span></span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> now;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm_now</span> ;</span></span><br><span class="line">    time(&amp;now) ;</span><br><span class="line">    tm_now = localtime(&amp;now) ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在的时间: %d-%d-%d %d:%d:%d\n&quot;</span>,</span><br><span class="line">tm_now-&gt;tm_year+<span class="number">1900</span>, tm_now-&gt;tm_mon+<span class="number">1</span>, tm_now-&gt;tm_mday, tm_now-&gt;tm_hour, tm_now-&gt;tm_min, tm_now-&gt;tm_sec) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109100018423.png" alt="image-20221109100018423"></p><h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><p>程序如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STOP  5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PAVE  4  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_History 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义车的结构体，包含了进入，离开停车场的时间属性 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> TimeIn;</span><br><span class="line"><span class="type">int</span> TimeOut;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> leave_time;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ct[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> Lincense[<span class="number">10</span>];</span><br><span class="line">&#125;Car; </span><br><span class="line"></span><br><span class="line"><span class="comment">//停车 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Stop[MAX_STOP];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;Stopping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Stop[MAX_History];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">&#125;History;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//等待队列的创建 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Pave[MAX_PAVE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line">&#125;Pavement; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Let[MAX_STOP];</span><br><span class="line"><span class="type">int</span> top; </span><br><span class="line">&#125;Buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Wait[MAX_PAVE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line">&#125;Waiting; </span><br><span class="line"></span><br><span class="line">Stopping s;</span><br><span class="line">Pavement p;</span><br><span class="line">Buffer   b;</span><br><span class="line">Car      c;</span><br><span class="line">Waiting  w;</span><br><span class="line">History  h;</span><br><span class="line"><span class="type">char</span>     C[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Come</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Pave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Buff</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Leave_Pavement</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlay</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlayPave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Welcome</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SmallWelcome</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave_menu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lucky_draw</span><span class="params">(<span class="type">int</span> a)</span>;  <span class="comment">/*进入抽奖环节 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">draw_result</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mod_price</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">history</span><span class="params">()</span>;  <span class="comment">//停车历史记录 </span></span><br><span class="line"></span><br><span class="line">History* <span class="title function_">history_push</span><span class="params">(Stopping s,<span class="type">time_t</span> t1)</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> Price = <span class="number">6</span>;</span><br><span class="line"><span class="comment">/*停车场默认是6元/分钟，程序相减单位为60，以秒计费，所以需要改动    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Come</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将停车的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i = s.top;</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，此汽车已存在！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k = MAX_PAVE;</span><br><span class="line"><span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[k].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，此汽车已存在！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.top &gt;= MAX_STOP - <span class="number">1</span>)&#123;</span><br><span class="line">Stop_To_Pave();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">t2 = ctime(&amp;t1); </span><br><span class="line">s.Stop[++s.top].TimeIn = t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[s.top].ct, t2);</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[s.top].Lincense, C);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停入停车位的%d车位，当前时间：%s\n&quot;</span>, C, s.top+<span class="number">1</span>, t2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要搜索的车牌号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i, j, k, flag = <span class="number">0</span>;        </span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="keyword">if</span>(s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i = s.top; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此汽车在停车场内，信息如下：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停车位序\t当前所需支付金额\t进入时间\t\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个\t\t%0.f元\t\t\t%s&quot;</span>, s.Stop[i].Lincense, i+<span class="number">1</span>, (Price/<span class="number">60</span>) * (t - s.Stop[i].TimeIn), s.Stop[i].ct);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; p.count &gt; <span class="number">0</span>)&#123; </span><br><span class="line">i = p.front, k = <span class="number">1</span>, j = p.rear;</span><br><span class="line"><span class="keyword">while</span>(i != j )&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此汽车在停便道上\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停车位序\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个&quot;</span>,p.Pave[i].Lincense, k);</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场内外不存在该汽车信息！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将离开的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i, j, flag = <span class="number">1</span>, flag2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i = s.top; i &gt;=<span class="number">0</span>; i-- )&#123;</span><br><span class="line">flag = flag * <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == flag)&#123;</span><br><span class="line">Stop_To_Buff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag !=<span class="number">0</span> <span class="comment">/*&amp;&amp; flag2 != 0*/</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场内没有该汽车的信息！\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Leave_Pavement</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i, j, flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将离开的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="keyword">if</span>(p.count  &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道上不存在汽车!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p.count &gt; <span class="number">0</span>)&#123; </span><br><span class="line">i = p.front; </span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[i].Lincense, C))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时从便道进入临时便道\n&quot;</span>, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(w.Wait[w.rear].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.rear = (w.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count++;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n牌照为%s的汽车从便道上开走，不收取任何费用！\n\n&quot;</span>, p.Pave[i].Lincense); </span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count--;</span><br><span class="line"><span class="keyword">while</span>(p.count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时从便道进入临时便道\n&quot;</span>, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(w.Wait[w.rear].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.rear = (w.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count++;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(w.count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n牌照为%s的汽车返回便道\n&quot;</span>,w.Wait[w.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(p.Pave[p.rear].Lincense, w.Wait[w.front].Lincense);</span><br><span class="line">w.front = (w.front + <span class="number">1</span>) % MAX_PAVE; </span><br><span class="line">p.rear = (p.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count--;</span><br><span class="line">p.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//离开计费 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Buff</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[s.top].Lincense, C))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(b.Let[b.top++].Lincense, s.Stop[s.top].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时退出停车场\n&quot;</span>, s.Stop[s.top--].Lincense);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车从停车场开走\n&quot;</span>, s.Stop[s.top].Lincense); </span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line">s.Stop[s.top].TimeOut = t;</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">t2 = ctime(&amp;t1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;离开时间%s\n需付费%.0f元\n&quot;</span>, t2,(Price/<span class="number">60</span>) * (t - s.Stop[s.top].TimeIn));</span><br><span class="line">history_push(s,t1) ; <span class="comment">//加入进历史记录 </span></span><br><span class="line"></span><br><span class="line">s.top--;</span><br><span class="line"><span class="keyword">while</span>(b.top &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[++s.top].Lincense, b.Let[--b.top].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停回停车位%d车位\n&quot;</span>, b.Let[b.top].Lincense, s.top+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(s.top &lt; MAX_STOP<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == p.count)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[++s.top].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车从便道中进入停车位的%d车位\n&quot;</span>, p.Pave[p.front].Lincense, s.top+<span class="number">1</span>);</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">s.Stop[s.top].TimeIn = t;</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离开的车辆压入栈，作为历史记录 </span></span><br><span class="line">History* <span class="title function_">history_push</span><span class="params">(Stopping s,<span class="type">time_t</span> t1)</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h.Stop[++h.top].TimeIn = s.Stop[s.top].TimeIn;</span><br><span class="line">h.Stop[h.top].leave_time = time(&amp;t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(h.Stop[h.top].ct, s.Stop[s.top].ct);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(h.Stop[h.top].Lincense,  s.Stop[s.top].Lincense);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">history</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = h.top;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;暂时没有停车记录哦！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放时间\t已支付金额\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t\t%d分%d秒\t\t%.0f元\t\t\t第%d个\n&quot;</span>, h.Stop[i].Lincense, </span><br><span class="line">(h.Stop[i].leave_time-h.Stop[i].TimeIn)/<span class="number">60</span>,(h.Stop[i].leave_time-h.Stop[i].TimeIn) % <span class="number">60</span>, (Price/<span class="number">60</span>) * (h.Stop[i].leave_time - h.Stop[i].TimeIn), i+<span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Pave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p.count &gt; <span class="number">0</span> &amp;&amp; (p.front == (p.rear + <span class="number">1</span>) % MAX_PAVE))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道已满，请下次再来！\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(p.Pave[p.rear].Lincense, C);</span><br><span class="line">p.rear = (p.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停入便道上\n&quot;</span>, C);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlay</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i = s.top;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场目前为空\n&quot;</span>);</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放时间\t当前所需支付金额\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t\t%d分%d秒\t\t%.0f元\t\t\t第%d个\n&quot;</span>, s.Stop[i].Lincense, </span><br><span class="line">(t - s.Stop[i].TimeIn)/<span class="number">60</span>,(t - s.Stop[i].TimeIn) % <span class="number">60</span>, (Price/<span class="number">60</span>) * (t - s.Stop[i].TimeIn), i+<span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlayPave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i = p.front;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == p.count)  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道目前为空\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != p.rear &amp;&amp; k &lt;= p.count)&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个\n&quot;</span>, p.Pave[i].Lincense, k++);</span><br><span class="line">i = (i + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave_menu</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">SmallWelcome();</span><br><span class="line"><span class="type">int</span> i, cho;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == i)  Car_Leave();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> == i)  Leave_Pavement();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span> == i) draw_result(); </span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> == i)  <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n返回请输入0\n&quot;</span>);</span><br><span class="line">top:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cho);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == cho)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的输入有误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> top;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SmallWelcome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*******************目前停车场状况***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t停车场共有%d个车位,当前停车场共有%d辆车,等候区共有%d/%d辆车\n&quot;</span>,  </span><br><span class="line">    MAX_STOP, s.top+<span class="number">1</span>, (p.rear + MAX_PAVE - p.front) % MAX_PAVE, MAX_PAVE<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t********************************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t---------Welcome to Ep&#x27;s Car Parking next time----------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   1.从停车场内驶出汽车               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   2.从便道上驶出汽车                 *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   3.进入抽奖                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   4.退出子管理系统                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*请注意：从停车场内驶离的汽车按照%.0f元/分钟计费        *\n&quot;</span>,Price);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*望周知：从便道上驶离的汽车不收取费用                  *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*------------------------------------------------------*\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t--------Press key(1/2/3) to continue the program--------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HideCursor</span><span class="params">()</span>&#123;</span><br><span class="line"> CONSOLE_CURSOR_INFO cursor_info = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"> SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp;cursor_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lucky_draw</span><span class="params">(<span class="type">int</span> a)</span>  <span class="comment">/*进入抽奖环节  抽奖函数*/</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> e;</span><br><span class="line">  <span class="keyword">if</span>( a!=<span class="number">1</span> )</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;你选择了不抽奖&quot;</span>); </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));<span class="comment">//利用时间作为种子 </span></span><br><span class="line">    e=<span class="number">100</span>+rand()%<span class="number">1000</span>;<span class="comment">//随机抽奖 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中奖号码为666或888，你的号码为%d\n&quot;</span>,e);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">666</span>||a==<span class="number">888</span>)</span><br><span class="line">        &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;恭喜你获得了免费停车一年特权&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>; </span><br><span class="line">   &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;很遗憾您没有中奖&quot;</span>); </span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">draw_result</span><span class="params">()</span>  <span class="comment">//抽奖结果 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> select;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认是否进行抽奖，如果抽奖请按1，如果不请随意\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;select);</span><br><span class="line">lucky_draw(select); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mod_price</span><span class="params">()</span>&#123;   <span class="comment">//修改停车价格 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改停车场计费(默认6元一分钟):\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;在此输入:&quot;</span>); </span><br><span class="line"><span class="type">int</span> temp ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">Price = temp;</span><br><span class="line"><span class="keyword">return</span> Price;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Welcome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> * <span class="title">timeinfo</span>;</span></span><br><span class="line">    time ( &amp;rawtime );</span><br><span class="line">    timeinfo = localtime ( &amp;rawtime );</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t\t\t%s&quot;</span>, asctime(timeinfo) );</span><br><span class="line">    HideCursor();</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*******************目前停车场状况***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t停车场共有%d个车位,当前停车场共有%d辆车,等候区共有%d/%d辆车\n&quot;</span>,  </span><br><span class="line">    MAX_STOP, s.top+<span class="number">1</span>, (p.rear + MAX_PAVE - p.front) % MAX_PAVE, MAX_PAVE<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t********************************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t--------------Welcome to Ep&#x27;s Car Parking---------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   1.停车场停车信息显示               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   2.便道上停车信息显示               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   3.汽车到达停车场操作               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   4.汽车离去停车场操作               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   5.查找汽车功能                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   6.停车历史记录                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   7.系统设置                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   8.退出管理系统                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*     收费标准：本停车场按照%.0f元/分钟计费，望周知       *\n&quot;</span>,Price);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*------------------------------------------------------*\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t---------Press key(1/2/3/4/5/6/7) to run program----------\n\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">s.top = <span class="number">-1</span>;</span><br><span class="line">h.top = <span class="number">-1</span>;</span><br><span class="line">b.top = <span class="number">0</span>;</span><br><span class="line">p.rear = <span class="number">0</span>;</span><br><span class="line">p.count = <span class="number">0</span>;</span><br><span class="line">p.front = <span class="number">0</span>;</span><br><span class="line">w.count = <span class="number">0</span>;</span><br><span class="line">w.front = <span class="number">0</span>;</span><br><span class="line">w.rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;color 0B&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">Welcome();</span><br><span class="line"><span class="type">int</span> i, cho;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == i)  DisPlay();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> == i)  DisPlayPave();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span> == i)  Car_Come();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> == i)  Car_Leave_menu();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">5</span> == i)  Search();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">6</span> == i)  history(); </span><br><span class="line"><span class="keyword">if</span>(<span class="number">7</span> == i)mod_price();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">8</span> == i)  &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n欢迎您再次使用本系统呦 ε=ε=ε=(~￣▽￣)~\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n返回请输入0\n&quot;</span>);</span><br><span class="line">begin:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cho);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == cho)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的输入有误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> begin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序截屏如下：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109100736119.png" alt="image-20221109100736119"></p>]]></content>
      
      
      <categories>
          
          <category> C语言项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙管理工具:iptables</title>
      <link href="/2022/10/09/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-iptables/"/>
      <url>/2022/10/09/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-iptables/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><code>iptables</code> 是早起Linux系统中默认的防火墙管理服务。尽管新型的<code>firewalld</code> 投入使用很多年，大量的企业生产环境还是出于各种原因继续使用<code>iptables</code> 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:树</title>
      <link href="/2022/10/09/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
      <url>/2022/10/09/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h2><h2 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h2><p>树的实现主要有两种方式:<code>列表之列表</code>和<code>节点之引用</code></p><p>文章使用<code>节点之引用</code>实现。</p><ul><li><input disabled type="checkbox"> <code>BinaryTree()</code> 创建一个二叉树</li><li><input disabled type="checkbox"> <code>getLeft()</code>返回当前节点的左子节点所对应的树</li><li><input disabled type="checkbox"> <code>getRight()</code> 返回当前节点的右子节点所对应的树</li><li><input disabled type="checkbox"> <code>setVal(val) </code> 在当前节点中存储val</li><li><input disabled type="checkbox"> <code>insertLeft(val)</code>新建一颗二叉树，并将其作为当前节点的左子节点</li><li><input disabled type="checkbox"> <code>insertRight(val)</code> 新建一颗二叉树，并将其作为当前节点的右子节点</li></ul><ol><li><p>首先定义一个简单的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val</span>):</span><br><span class="line">        self.key = val</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p><code>节点之引用</code> 的要点是，属性<code>left</code>和<code>right</code> 会指向BinaryTree类的其他实例。也就是说，向树中插入新的左子树，我们会创建另一个<code>BinaryTree</code>实例，并将根节点的<code>self.left</code> 指向新树。</p><p>下面是插入左子节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入左子节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertLeft</span>(<span class="params">self,newNode</span>):</span><br><span class="line">    <span class="keyword">if</span> self.left == <span class="literal">None</span>:</span><br><span class="line">        self.left = BinaryTree(newNode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = BinaryTree(newNode)</span><br><span class="line">        t.left = self.left</span><br><span class="line">        self.left = t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​在插入左子树时，必须考虑两种情况，一种是原本没有左子节点。此时，只需在树种添加一个节点即可。第二种情况是已经存在左子节点。此时，插入一个节点，并将已有的左子节点降一层。</p><p>插入右子节点同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入右子节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertRight</span>(<span class="params">self,newNode</span>):</span><br><span class="line">    <span class="keyword">if</span> self.right == <span class="literal">None</span>:</span><br><span class="line">        self.right = BinaryTree(newNode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = BinaryTree(newNode)</span><br><span class="line">        t.right = self.right</span><br><span class="line">        self.right = t</span><br></pre></td></tr></table></figure></li><li><p>节点访问函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问当前节点的左子树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLeft</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.left</span><br><span class="line"><span class="comment"># 访问当前节点的右子树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRight</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.right</span><br><span class="line"><span class="comment"># 设置当前的节点的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setVal</span>(<span class="params">self,val</span>):</span><br><span class="line">    self.val = val</span><br><span class="line"><span class="comment"># 获取当前节点的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getVal</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="keyword">return</span> self.val</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python标准库的常用模块</title>
      <link href="/2022/10/08/Python%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/10/08/Python%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="操作系统接口模块"><a href="#操作系统接口模块" class="headerlink" title="操作系统接口模块"></a>操作系统接口模块</h2><h3 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h3><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>​<strong>UTC</strong>(Coordinated Universal Time，协调世界时)，又称格林尼治天文时间、世界标准时间。与 UTC 对应的是各个时区的 local time(本地时间)，东 N 区的时间比 UTC 早 N 个小时，因此，UTC + N 为东 N 区的本地时间，而西 N 区时间比 UTC 晚 N 个小时，因此，UTC  N 为西 N 区的本地时间。中 国在东 8 区，因此比 UTC 早 8 小时，可以用 UTC+8 表示。</p><p>​<strong>epoch time</strong>(纪元时间)，表示一个特定的开始时间，不同平台上该时间点的值不太相同，在 Unix 系统中，epoch time 为 1970-01-01 00:00:00 UTC(1970 年 1 月 1 日 0 时 0 分 0 秒)。 </p><p>​<strong>timestamp</strong>(时间戳)，也称 Unix 时间或 POSIX 时间，它表示从 epoch time(如 1970-01-01 00:00:00  UTC)开始到现在所经过的毫秒数，其值为 float 类型。但是，有些编程语言的相关方法返回的是秒 数(Python 就是这样)。时间戳是个差值，其值与时区无关。</p><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a><strong>time</strong>模块</h3><p><code>import time</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = time.time() <span class="comment"># 返回时间戳的值</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(time.ctime(t)) <span class="comment"># 把时间戳转换成字符串</span></span><br></pre></td></tr></table></figure><h3 id="日期模块"><a href="#日期模块" class="headerlink" title="日期模块"></a>日期模块</h3><p>​<code>datetime 模块</code>提供可用于处理日期和时间信息的函数和类，如对日期和时间解析、格式化和算 术运算。 </p><ul><li><p><code>datetime.date</code>：用于与时间无关的日期。</p></li><li><p><code>datetime.time</code>：用于独立于日期的时间。 </p></li><li><p><code>datetime.datetime</code>：用于具有日期和时间的对象。</p></li><li><p><code>datetime.timedelta</code>：表示日期或日期时间之间的差异，如果用一个日期时间减另一个日期时间， 结果将是 timedelta。</p></li><li><p><code>datetime.timezone</code>：表示时区调整为 UTC 的偏移量。该类是 datetime.tzinfo 的子类，不应直接使用。 可以查询这些对象的特定成分(如年、月、日，时、分、秒)，并对它们执行算术运算，如果需 要显示它们，则可从中提取可以打印的字符串版本。</p></li></ul><p><strong>datetime.time类</strong></p><p>datetime.time表示具有小时，分钟，秒，微秒和时区信息等属性的时间类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">t = datetime.time(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(t.hour,t.minute,t.second,t.microsecond,t.tzinfo)</span><br></pre></td></tr></table></figure><p>​datetime.date表示具有年月日属性的类。使用today()类方法可以返回当前日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(today.year,today.month,today.day)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:链表</title>
      <link href="/2022/10/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/10/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="链表是什么"><a href="#链表是什么" class="headerlink" title="链表是什么"></a>链表是什么</h2><h2 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h2><p>必须明确指定链表的第一项的位置。当我们知道第一个位置，就可以知道第二个位置….外部的引用通常被称为链表的头。最后一个位置 要知道没有下一个项。</p><h3 id="链表的节点-Node"><a href="#链表的节点-Node" class="headerlink" title="链表的节点(Node)"></a>链表的节点(<code>Node</code>)</h3><p>链表实现的基本的构造块是节点。每一个节点至少保存两个信息。首先，节点必须要有列表项本身，也就是数据字段；此外，每个节点必须保存下一个节点的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,initdata</span>):</span><br><span class="line">        self.data = initdata</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getNext</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setData</span>(<span class="params">self,newdata</span>):</span><br><span class="line">        self.data = newdata</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setNext</span>(<span class="params">self,newnext</span>):</span><br><span class="line">        self.<span class="built_in">next</span> = newnext</span><br></pre></td></tr></table></figure><h3 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a>链表的构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head == <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么添加项到我们的链表呢？因为链表是无序的，所以新项相对于已经在链表中其他项不重要。新项可以在任意位置。考虑到这点，将新项放在最简单的位置是有意义的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment"># 先构建节点</span></span><br><span class="line">    temp = Node(item)</span><br><span class="line">    temp.setNext(self.head)</span><br><span class="line">    self.head = temp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础数据结构:队列</title>
      <link href="/2022/09/29/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2022/09/29/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><p>​队列是有序集合，添加操作在”尾部”，移除操作在”头部”。新元素在尾部进入，然后一直向前移动到头部，直到称为下一个被移除的元素。</p><p>​这种操作叫做<code>FIFO(first-in first out)</code>。</p><p>​操作系统使用一些队列来控制计算机进程。调度机制往往基于一个队列算法，其目标是能尽可能的执行程序，同时服务尽可能多的用户。如打字的时候，有时候字符出现速度比敲键盘速度更慢，这是因为计算机正在做其他工作，敲键盘的操作被放在一个类似于队列的缓冲区，这样的话，便于对应的字符按正确的顺序显示。</p><h2 id="队列抽象数据类型（操作）"><a href="#队列抽象数据类型（操作）" class="headerlink" title="队列抽象数据类型（操作）"></a>队列抽象数据类型（操作）</h2><ul><li><input disabled type="checkbox"> <code>Queue()</code>: 创建一个空队列。它不需要参数，且返回一个空队列。</li><li><input disabled type="checkbox"> <code>enqueue(item):</code>   在队尾添加一个元素，需要参数，无返回值。</li><li><input disabled type="checkbox"> <code>dequeue():</code> 在对头移除元素，不需要参数，有返回值（被删除的元素），并修改队列内容。</li><li><input disabled type="checkbox"> <code>isEmpty():</code> 检查队列是否为空。无参数，返回布尔值。</li><li><input disabled type="checkbox"> <code>size():</code> 返回队列中元素的数目，无参数，有返回值。</li></ul><h2 id="用Python实现队列"><a href="#用Python实现队列" class="headerlink" title="用Python实现队列"></a>用Python实现队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.insert(<span class="number">0</span>,item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printQueue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (self.items)</span><br><span class="line">q = Queue()</span><br><span class="line"><span class="built_in">print</span>(q.isEmpty())</span><br><span class="line">q.enqueue(<span class="number">3</span>)</span><br><span class="line">q.enqueue(<span class="string">&#x27;23&#x27;</span>)</span><br><span class="line">q.enqueue(<span class="string">&quot;世界这么大&quot;</span>)</span><br><span class="line">q.enqueue(<span class="string">&quot;我想去去看看！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(q.size())</span><br><span class="line">q.printQueue()</span><br></pre></td></tr></table></figure><h2 id="模拟，传土豆"><a href="#模拟，传土豆" class="headerlink" title="模拟，传土豆"></a>模拟，传土豆</h2><p>​传土豆: 孩子们围成一圈，并且依次传递土豆。在某一个时刻，大家停止传递，此时手里面有土豆的孩子就得退出游戏。重复上诉过程，直至剩下一个孩子。（等价于约瑟夫问题）</p><p>​我们用队列来模拟一个环。假设捏着土豆的孩子在队头。在模拟传土豆的过程中，程序把这个队头孩子的名字移除，然后立刻插入队尾。随后，这个孩子会一直等待，直至再次到达队头。在出列和入列n次后，此时队头的孩子出局。新一轮游戏开始，如此反复，直至剩下最后一人（队列大小为1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.basic <span class="keyword">import</span>  Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Potato</span>(<span class="params">nameList,num</span>):</span><br><span class="line">    simqueue = Queue()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">        simqueue.enqueue(name)</span><br><span class="line">    <span class="keyword">while</span> simqueue.size() &gt; <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line"></span><br><span class="line">            simqueue.enqueue(simqueue.dequeue())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;踢掉：&quot;</span>,simqueue.dequeue())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simqueue.dequeue()</span><br><span class="line">a = (Potato([<span class="string">&quot;1&quot;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:栈</title>
      <link href="/2022/08/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2022/08/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><p>根据《Python数据结构和算法分析》和其他网络资料整理而成。</p><hr><h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>栈是有序集合，添加操作和移除操作发生在同一端。</p><p>栈里面的元素离底端越近，代表在栈中的时间越长，因此栈的底端具有非常重要的意义。新添加的元素将被最先删除。这种排序原则是<strong>LIFO(last-in first out),后进先出</strong></p><p>例如书本的堆叠</p><h2 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h2><p>栈的抽象数据类型由下面的结构和操作定义。</p><ul><li><input disabled type="checkbox"> <code>Stack()</code>  创建一个空栈。不需要参数，返回一个空栈。</li><li><input disabled type="checkbox"> <code>push(item)</code> 将一个元素添加到栈的顶端。需要一个参数item,且无返回值</li><li><input disabled type="checkbox"> <code>pop()</code> 将顶端的元素删除。不需要参数，但是有返回值。</li><li><input disabled type="checkbox"> <code>peek()</code> 返回栈顶端的元素。不要参数，也不修改栈的内容。</li><li><input disabled type="checkbox"> <code>isEmpty()</code>检查栈是否为空。不需要参数，返回一个布尔值。</li><li><input disabled type="checkbox"> <code>size()</code>返回栈中元素的数目。不需要参数，返回一个整数。</li></ul><h2 id="用python实现栈"><a href="#用python实现栈" class="headerlink" title="用python实现栈"></a>用python实现栈</h2><p>明确定义栈的抽象数据类型后，我们用Python来实现。抽象数据类型的实现被称为数据结构。</p><p>因为栈是元素的集合，所以可以使用Python提供的列表实现。</p><p>实现方式一</p><p>用列表的头部作为栈的底端，利用pop()和append()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><p>实现方式二</p><p>利用列表的尾部作为栈的底端，所以pop()和append()这组不再使用。应当使用pop(0)和insert(0,item)访问下标为0，也就是第一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.insert(<span class="number">0</span>,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        self.items.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><p>上述两种实现都可行，但是二者在性能方面肯定是有差异。append和pop()方法的时间复杂度都是O(1),这意味着不论栈中有多少元素，第一种实现中的push和pop都会在恒定的时间内完成。第二种实现的性能受限于栈中的个数，因为insert(0)和pop(0)的时间复杂度是O(n),元素越多时间越慢。</p><h2 id="匹配符号"><a href="#匹配符号" class="headerlink" title="匹配符号"></a>匹配符号</h2><h3 id="匹配括号"><a href="#匹配括号" class="headerlink" title="匹配括号"></a>匹配括号</h3><p>匹配括号是每一个左括号都有与之对应的一个右括号，并且括号对有正确的嵌套关系。下面是正确匹配的括号串。</p><p>(()()())</p><p>(((())))</p><p>下面是不匹配的括号串</p><p>((()</p><p>((())</p><p>我们编写一个算法，它从左到右读取一个括号串，然后判断其中的括号是否匹配。为了解决这个问题，需要注意到一个很重要的现象。。当从左到右处理括号时，最右边的无匹配左括号 必须与接下来遇到的第一个右括号相匹配。并且，在第一个位置的左括号可能要 等到处理至最后一个位置的右括号时才能完成匹配。相匹配的右括号与左括号出现的顺序相反。 这一规律暗示着能够运用栈来解决括号匹配问题</p><p>一旦认识到用栈来保存括号是合理的，算法编写起来就会十分容易。由一个空栈开始，从左 往右依次处理括号。如果遇到左括号，便通过 push 操作将其加入栈中，以此表示稍后需要有一 个与之匹配的右括号。反之，如果遇到右括号，就调用 pop 操作。只要栈中的所有左括号都能 遇到与之匹配的右括号，那么整个括号串就是匹配的；如果栈中有任何一个左括号找不到与之匹 配的右括号，则括号串就是不匹配的。在处理完匹配的括号串之后，栈应该是空的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 括号匹配</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parChecker</span>(<span class="params">symbolString</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    balanced = <span class="literal">True</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(symbolString) <span class="keyword">and</span> balanced:</span><br><span class="line">        symbol = symbolString[index]</span><br><span class="line">        <span class="keyword">if</span> symbol == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">            s.push(symbol)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.isEmpty():</span><br><span class="line">                balanced = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s.pop()</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="匹配符号-1"><a href="#匹配符号-1" class="headerlink" title="匹配符号"></a>匹配符号</h3><p>对于<code>匹配括号</code>的升级，例如:</p><p>[[(‘’)]]</p><p>[{)’]</p><p>各类左右符号的组合，在以上的代码增加<code>[],&#123;&#125;</code>的处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 符号匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parChecker</span>(<span class="params">symbolString</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    s = Stack()</span><br><span class="line">    balanced = <span class="literal">True</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(symbolString) <span class="keyword">and</span> balanced:</span><br><span class="line">        symbol = symbolString[index]</span><br><span class="line">        <span class="keyword">if</span> symbol <span class="keyword">in</span> <span class="string">&quot;&#123;[(&quot;</span>:</span><br><span class="line">            s.push(symbol)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.isEmpty():</span><br><span class="line">                balanced = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                top = s.pop()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> matches(top,symbol):</span><br><span class="line">                    balanced = <span class="literal">False</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matches</span>(<span class="params">left,right</span>):</span><br><span class="line"></span><br><span class="line">    lefts = <span class="string">&quot;([&#123;&quot;</span></span><br><span class="line">    rights = <span class="string">&quot;)]&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> lefts.index(left) == rights.index(right)</span><br></pre></td></tr></table></figure><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制—-gt-二进制"><a href="#十进制—-gt-二进制" class="headerlink" title="十进制—&gt;二进制"></a>十进制—&gt;二进制</h3><p>十进制转换的二进制的方法是不断除以二，直至商为0。然后把各余数倒序连起来，例如：</p><p>100&#x2F;2 &#x3D; 50…0</p><p>50&#x2F;2 &#x3D;25…0</p><p>25&#x2F;2 &#x3D; 12…1</p><p>12&#x2F;2 &#x3D; 6…0</p><p>6&#x2F;2 &#x3D; 3…0</p><p>3&#x2F;2 &#x3D; 1…1</p><p>1&#x2F;2 &#x3D; 0…1</p><p>所以最终结果为1100100</p><p>最终程序如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items)-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_to_2</span>(<span class="params">num</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    binStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        s.push(num % <span class="number">2</span>)</span><br><span class="line">        num = num // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        binStr = binStr + <span class="built_in">str</span>(s.pop())</span><br><span class="line">    <span class="keyword">return</span> binStr</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字:&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(divide_to_2(num))</span><br></pre></td></tr></table></figure><h3 id="十进制—-gt-任意进制"><a href="#十进制—-gt-任意进制" class="headerlink" title="十进制— &gt; 任意进制"></a>十进制— &gt; 任意进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide_to_base</span>(<span class="params">num,base</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    baseStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        s.push(num % base)</span><br><span class="line">        num = num // base</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        baseStr = baseStr + <span class="built_in">str</span>(s.pop())</span><br><span class="line">    <span class="keyword">return</span> baseStr</span><br><span class="line"></span><br><span class="line">num,base = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;输入数字和目的进制:&#x27;</span>).split())</span><br><span class="line"><span class="built_in">print</span>(divide_to_base(num,base))</span><br></pre></td></tr></table></figure><h3 id="Python的进制转换"><a href="#Python的进制转换" class="headerlink" title="Python的进制转换"></a>Python的进制转换</h3><p>考虑到语法特性，<code>Python</code> 对于进制转换的函数，已经做好的封装。</p><h4 id="十进制—-gt-其他进制"><a href="#十进制—-gt-其他进制" class="headerlink" title="十进制—&gt;其他进制"></a>十进制—&gt;其他进制</h4><ol><li><p>十进制—&gt;二进制：<code>bin(999)</code></p></li><li><p>十进制—&gt;八进制：<code>oct(999)</code></p></li><li><p>十进制—&gt;二进制：<code>hex(999)</code></p></li></ol><h4 id="其他进制—-gt-十进制"><a href="#其他进制—-gt-十进制" class="headerlink" title="其他进制—&gt;十进制"></a>其他进制—&gt;十进制</h4><ol><li>二进制—&gt;十进制：<code>int(&quot;10&quot;,2)</code></li><li>八进制转十进制:     <code>int(&quot;0o13&quot;,8)</code>     (前缀可以不写)</li><li>十六进制—&gt;十进制: <code>int(&quot;0xaa&quot;,16)</code>   (前缀可不写)</li></ol><h2 id="前序、中序和后序表达式"><a href="#前序、中序和后序表达式" class="headerlink" title="前序、中序和后序表达式"></a>前序、中序和后序表达式</h2><table><thead><tr><th align="center">中序表达式</th><th align="center">前序表达式</th><th align="center">后序表达式</th></tr></thead><tbody><tr><td align="center">A + B</td><td align="center">+  A  B</td><td align="center">A B +</td></tr></tbody></table><p>下面是中缀表达式转换成其他表达式的方法:</p><p><img src="https://img-blog.csdnimg.cn/9355af190b1d417baed4d58711aa1c88.jpeg"></p><h2 id="判断回文字符串"><a href="#判断回文字符串" class="headerlink" title="判断回文字符串"></a>判断回文字符串</h2><p>回文字符串是什么?</p><p>例如<code>xyx</code>,<code>hgfkfgh</code>这类从左往右读等于从右往左读的字符串。</p><p>对于回文字符串的判断，我们有以下步骤：</p><ol><li>获取字符串的长度</li><li>字符串如果是回文串，那中间是对称的，求中间节点<code>mid</code></li><li>把<code>mid</code>节点之前的字符全部压入栈</li><li><code>mid</code>之前的字符依次出栈，与<code>mid</code>之后的字符一一匹配</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC+GDB+makefile工具的使用</title>
      <link href="/2022/07/10/GCC-GDB-makefile%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/10/GCC-GDB-makefile%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>在Linux环境下，我们的C语言程序一般由<code>GCC</code>工具编译，<code>GDB</code>调试，<code>makefile</code>用来解决gcc 一堆繁琐的步奏。</p><hr><h1 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h1><p>以c文件<code>main.c</code>,<code>sub.c</code>和<code>add.c</code>和头文件<code>my_fun.h</code>为例，代码为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//main.c</span></span><br><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;add.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;sub.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> 5 &#123;</span><br><span class="line"> <span class="number">6</span>   <span class="type">int</span> num1,num2;   <span class="comment">//定义两个数字</span></span><br><span class="line"> <span class="number">7</span>   <span class="type">int</span> sum,diff;   <span class="comment">//和   差</span></span><br><span class="line"> <span class="number">8</span>   <span class="built_in">printf</span>(<span class="string">&quot;你好，请输入两个数:\n&quot;</span>);</span><br><span class="line"> <span class="number">9</span>   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line"><span class="number">10</span>   sum = add(num1,num2);</span><br><span class="line"><span class="number">11</span>   diff = sub(num1,num2);</span><br><span class="line"><span class="number">12</span>   <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>,num1,num2,sum);    </span><br><span class="line"><span class="number">13</span>   <span class="built_in">printf</span>(<span class="string">&quot;%d-%d=%d\n&quot;</span>,num1,num2,diff);</span><br><span class="line"><span class="number">14</span>   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">15</span> &#125;                                                                               </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.c</span></span><br><span class="line"><span class="comment">//add函数的定义</span></span><br><span class="line"><span class="number">1</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(num1,num2)</span></span><br><span class="line">2 &#123;</span><br><span class="line"><span class="number">3</span>   <span class="keyword">return</span> num1+num2;</span><br><span class="line"><span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub.c</span></span><br><span class="line"><span class="comment">//sub函数的定义</span></span><br><span class="line">  <span class="number">1</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(num1,num2)</span></span><br><span class="line">  2 &#123;</span><br><span class="line">  <span class="number">3</span>   <span class="keyword">return</span> num1-num2;                                                                                     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my_fun.h</span></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>;</span><br></pre></td></tr></table></figure><p>四大步奏：</p><ol><li><p>预处理</p><ul><li><p>预处理指令执行  <code>gcc -E *.c</code></p><p>头文件的引入  #include</p></li><li><p>宏展开</p></li></ul></li></ol><p>  举例： <code>gcc -E *.c</code> 或者<code>gcc -E main.c</code><br>     图片截取部分<br>     <img src="https://img-blog.csdnimg.cn/503c7350423041e6a48682c470be45a7.png" alt="在这里插入图片描述"></p><ol start="2"><li><p>预编译</p></li><li><p>编译</p><p>生成目标文件:  <code>gcc -c *.c [ -o 指定名称  ]</code><br>举例：<code>gcc -c *c</code><br><img src="https://img-blog.csdnimg.cn/b7cd35a049fe4982b4585529bb37d380.png" alt="在这里插入图片描述"></p></li><li><p>链接</p><p><code>gcc main.o add.o sub.o  [ -o 指定名称]</code></p><p><code>gcc *.o  [-o 指定名称]</code></p></li></ol><p> 举例：<code>gcc main.o sub.o add.o</code></p><p>   <img src="https://img-blog.csdnimg.cn/d3c58492788047a4bcb16ba90cbfd7ee.png" alt="在这里插入图片描述"></p><p>执行<code>./a.out</code></p><p>上述步骤也可以一步到位:<br><code>gcc *.c</code><br><img src="https://img-blog.csdnimg.cn/d4f35ce02c9245838f7b1968d0bb01b4.png" alt="在这里插入图片描述"></p><hr><h1 id="GDB调试工具"><a href="#GDB调试工具" class="headerlink" title="GDB调试工具"></a>GDB调试工具</h1><p>GDB是一个由GNU开源组织发布的、UNIX&#x2F;LINUX操作系统系统下、基于命令行的、功能强大的程序调试工具。<br>GDB的命令有很多，本文只列举一小部分命令，大致完成基本的程序调试工作。</p><p><code>gcc *.c -g</code></p><ol><li><p>进入GDB模式</p><ol><li><code>gdb 文件名</code><br>例如：gbd a.out<br><img src="https://img-blog.csdnimg.cn/e2564257423c4910bf74b32fd36e6d13.png" alt="在这里插入图片描述"></li><li>先输入<code>gdb</code><br>再输入<code>file 文件名</code><br>举例：<br><img src="https://img-blog.csdnimg.cn/bc42c375fb4a42c091251d1fe597f332.png" alt="在这里插入图片描述"></li></ol></li><li><p>运行程序<code>run</code><br>支持缩写<code>r</code><img src="https://img-blog.csdnimg.cn/79b49f014d2c49168a42258f03a471a7.png" alt="在这里插入图片描述"></p></li><li><p>设置断点<code>break</code> 或<code>b</code><br>举例:break main  &#x2F;&#x2F;main函数设置断点<br>    <code>b 文件名:行号n</code>  &#x2F;&#x2F;在第n行设置断点<br>继续执行： <code>continue</code> 或<code>c</code><br><img src="https://img-blog.csdnimg.cn/90b5894a937b4ba490f20431d0724deb.png" alt="在这里插入图片描述"></p></li><li><p>单步调试<code>next</code></p></li><li><p>退出gdb:<code>quit</code>或<code>q</code></p></li></ol><hr><h1 id="makefile的使用"><a href="#makefile的使用" class="headerlink" title="makefile的使用"></a>makefile的使用</h1><p>在上面的过程中，使用gcc 一堆繁琐的步奏是不是很让人抓狂？正是如此，我们需要找更为简便的方式。而使用makefile就是为了解决这一问题。</p><p>makefile的格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标:生成目标的依赖</span><br><span class="line">生成目标的命令 <span class="comment">//注意缩进</span></span><br></pre></td></tr></table></figure><p>demo如下:</p><ol><li>创建makefile文件(vim makefile)</li><li>写入</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afu:main.o sub.o add.o   <span class="comment">//生成afu文件</span></span><br><span class="line">        gcc main.o sub.o add.o -o afu  <span class="comment">//注意用tab缩进</span></span><br><span class="line">main.o:main.c</span><br><span class="line">        gcc -c main.c</span><br><span class="line">sub.o:sub.c</span><br><span class="line">        gcc -c sub.c</span><br><span class="line">add.o:sub.c</span><br><span class="line">        gcc -c add.c</span><br><span class="line">clean:</span><br><span class="line">        rm -rf main.o sub.o add.o  <span class="comment">//清除这些.o文件</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3cb4f825d14348d787be94b075ef43f3.png" alt="在这里插入图片描述"></p><ol start="3"><li>运行<br><code>make</code></li></ol><p><img src="https://img-blog.csdnimg.cn/9c6c92ae401f424082bcc3706b1beed5.png" alt="在这里插入图片描述"></p><p>上述就是makefile的基本使用了，但是感觉这样好像比gcc还要复杂，能不能在优化一下？</p><p>$@  表示目标文件<br>$^  表示所有的依赖文件<br>$&lt;  表示第一个依赖文件<br>$?  表示比目标还要新的依赖文件列表<br>%:依次对应</p><p>所以，根据以上的内容，我们优化:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> afu:main.o sub.o add.o</span><br><span class="line"><span class="number">2</span>   gcc *.o -o $@</span><br><span class="line"><span class="number">3</span> %.o:%.c</span><br><span class="line"><span class="number">4</span>   gcc -c $&lt; -o $@</span><br><span class="line"><span class="number">5</span> clean:</span><br><span class="line"><span class="number">6</span>   rm -rf *.o</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f3cb74420bff415d8b8417d95b1ddfd3.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4ddb30cbcf7f416094facef4da704abe.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的熟练掌握vim编辑器吗？</title>
      <link href="/2022/07/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%90%97%EF%BC%9F/"/>
      <url>/2022/07/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><p>vim编辑器是一个功能强大的多模式编辑器，是Linux&#x2F;UNIX 上最常用的文本编辑器， 它的作用是建立、编辑、显示文本文件。Vim 没有菜单，只有命令。</p><p>本文根据<a href="https://blog.csdn.net/m0_61933976/article/details/124653524">@每天都要敲代码</a>和[Linux就该这样学》](<a href="https://www.linuxprobe.com/">《Linux就该这么学》 - 必读的Linux系统与红帽RHCE认证免费自学书籍 (linuxprobe.com)</a>)整理。</p><h1 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h1><ul><li>命令模式</li><li>输入模式</li><li>末行模式</li></ul><p>互相的切换</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220707082254961.png" alt="image-20220707082254961"></p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><ul><li><p>插入命令</p><ul><li><code>a</code> :在光标所在字符后插入(add)</li><li><code>A</code> :在光标所在行尾插入</li><li><code>i</code>   :在光标所在字符前插入</li><li><code>I </code>  :在光标所在行行首插入</li><li><code>o</code>  :在光标下插入新行</li><li><code>O</code>  :在光标上插入新行</li></ul></li><li><p>删除命令</p><ul><li><code>x</code> :删除光标所在字符，每次删一个字符</li><li><code>5x </code>:删除光标后5个字符</li><li><code>dd</code> : 删除当前行</li><li><code>5dd</code>:   删除剪切从光标开始的5行 </li><li><code>dG</code> :删除光标所在行到文件的末尾</li><li><code>:1,5d</code> :删除第1到第5行</li><li><code>u</code> :撤销</li></ul></li><li><p>复制命令</p><ul><li><code>5yy</code> :复制从光标开始的5行</li><li><code>p</code> :粘贴</li></ul></li></ul><h1 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h1><ul><li><p>保存和退出命令</p><ul><li><code>:w </code>:保存</li><li><code>:q</code> :退出</li><li><code>:q!</code> :强制退出</li><li><code>:wq!</code> :强制并退出</li></ul></li><li><p>定位命令</p><ul><li><code>:set nu </code>:显示行号</li><li><code>:set nonu</code> :取消行号</li><li><code>gg </code>:最后一行</li><li><code>GG( ]] 也行)</code>:最后一行</li><li><code>5G </code>:到第5行</li><li><code>:5</code>   :到第5行</li><li><code>$</code>   :移到行尾</li><li><code>0 </code> :移到行首（这个是数字0）</li></ul></li><li><p>搜索和替换命令</p><ul><li><code>:s/1/2</code>  :当前光标所在行的第一个1换成2</li><li><code>:s/1/2/g</code> :当前光标行的所有1换成2</li><li><code>:%s/1/2/g </code>:全文的1换成2</li><li><code>?字符串</code> ：从下往上搜索</li><li><code>/字符串</code>  : 从上往下搜索</li><li><code>r : </code>取代光标所在处的一个字符；后面在输入相当于在光标处后面直接插入；</li><li><code>R  </code>从光标所在处开始替换字符，直到整个行被替换完，后面在输入相当于在光标处后面直接插入，按 ESC 结束；</li><li><code>n</code>:显示搜索命令定位到下一个字符串(next)</li><li><code>N</code>：显示搜索命令到上一个字符串</li></ul><hr></li></ul><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol><li><p>导入命令执行结果到文件里<code>:r!命令</code></p></li><li><p>连续行注释</p><ol><li><code>:1,5s/^/#/g</code></li></ol><p> 把 n1 起始行和 n2 终止行里面的内容进行注释 (#)；^(尖角号) 代表移到首行字符并进入插入模式；# 是把注释符 #插入进去；g 代表不询问；</p><ol start="2"><li><p><code>:n1,n2s/^#//g</code></p><p>表示把首行的注释符 #取消掉；相当于把首行的 #替换成空；</p></li></ol></li><li><p>定义快捷键<code> :map 快捷键 触发命令</code></p></li><li><p>替换快捷键 <code>:ab</code></p><p>定义一个快捷键来代替我们的邮箱:</p><p><code>:ab mymail 1399447550@qq.com</code></p><p>以后输入mymail回车即可</p><p>注意：当前定义的快捷键是临时的，想要永久生效，需要写在 <code>用户.vimrc</code></p><p>root 用户： 写入 &#x2F; root&#x2F;.vimrc 当中</p><p>普通用户：写入&#x2F;home&#x2F;用户名&#x2F;.vimrc</p></li></ol><h1 id="vim的配置"><a href="#vim的配置" class="headerlink" title="vim的配置"></a>vim的配置</h1><p>   所有的基本配置，本质是将我们的配置项写入. vimrc 当中；对于普通用户，我们直接 vim .vimrc 把配置文件写进去就行。</p><p>   下载地址 ：<code>curl -sLf https://gitee.com/HGtz2222/VimForCpp/raw/master/install.sh -o ./install.sh &amp;&amp; bash ./install.sh</code> </p><p>   让配置生效： <code>source ~/.bashrc</code> </p><p>   卸载配置直接执行：<code>bash ~/.VimForCpp/uninstall.sh</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python核心编程：多线程</title>
      <link href="/2022/07/06/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/07/06/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><p>进程的概念：进程(Process)是资源分配的最小单位，<code>它是操作系统进行资源分配和调度运行的基本单位</code>，是动态的。例如正在运行的QQ，浏览器等。</p><p>一个程序运行后至少有一个进程。</p><p>那么，多进程有什么用呢？先看到一下程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务A&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fun_A()</span><br><span class="line">fun_B()</span><br></pre></td></tr></table></figure><p>运行这个程序，会按照代码的执行顺序，fun_A函数执行完毕以后才会执行fun_B函数。如果我们让fun_A和fun_B同时运行，那么这个效率显然会大大提升。而这也就是多进程。</p><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><ol><li><p>导入进程包</p><p> <strong>import multiprocessing</strong></p></li><li><p>通过进程类创建进程对象</p><p> <strong>进程对象 &#x3D; multiprocessing.Process(target &#x3D; 任务名)</strong></p><ul><li>taget : 这里一般是指函数名，方法名</li><li>name:进程名，一般不用设置</li><li>group:进程组，目前只能使用None</li></ul></li><li><p>启动进程执行任务</p><p> <strong>进程对象.start()</strong></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing  <span class="comment"># 第一步，导入进程包</span></span><br><span class="line"><span class="comment"># 唱歌函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 设置延迟</span></span><br><span class="line"><span class="comment"># 跳舞函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用进程类创建进程对象</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance)</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="带参数的进程创建"><a href="#带参数的进程创建" class="headerlink" title="带参数的进程创建"></a>带参数的进程创建</h2><p>传参有两种方式：</p><ul><li><p>args: 以元组的方式传入，顺序一一对应，只有一个参数注意逗号(参数1，)</p></li><li><p>kwargs: 以字典的方式传入，顺序随意，但是key要和函数的参数名字一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用进程类创建进程对象</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance)</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取进程的编号"><a href="#获取进程的编号" class="headerlink" title="获取进程的编号"></a>获取进程的编号</h2><p>但程序越来越多时，不好区分进程的之间的关系，为了方便管理，我们需要获取进程编号。</p><p>有两种方式：</p><ul><li><p>获取当前进程编号</p><p>  <code>os.getpid()</code></p></li><li><p>获取当前父进程的编号</p><p>   <code>os.getppid()</code></p></li></ul><p>通俗的说，谁启动就是父进程，这里”main”是主进程，启动了两个子进程，sing_process和dance_process。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing  <span class="comment"># 第一步，导入进程包</span></span><br><span class="line"><span class="comment"># 唱歌函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是唱歌进程：&#x27;</span>,os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;唱歌的父进程：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 设置延迟</span></span><br><span class="line"><span class="comment"># 跳舞函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是跳舞进程：&#x27;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;跳舞的父进程：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程：&#x27;</span>, os.getpid())</span><br><span class="line">    sing_process = multiprocessing.Process(target=sing,args=(<span class="number">2</span>,))</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance,kwargs=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br></pre></td></tr></table></figure><p>进程注意点：</p><ol><li>主进程会等待所有子进程执行结束再结束</li><li>设置守护子进程 <code>子进程对象.daemon = True </code>,主进程退出后子进程直接销毁。</li></ol><h2 id="案列：文件夹高并发copy器"><a href="#案列：文件夹高并发copy器" class="headerlink" title="案列：文件夹高并发copy器"></a>案列：文件夹高并发copy器</h2><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><p>线程：<strong>线程是程序执行的最小单位</strong>。同一进程下的线程可以共享进程所拥有的全部资源。（进程是包工头，负责领取资源；线程是工人，负责干活）</p><h2 id="线程创建对象"><a href="#线程创建对象" class="headerlink" title="线程创建对象"></a>线程创建对象</h2><ol><li><p>导入线程模块</p><p>  <strong>import threading</strong></p></li><li><p>通过线程类创建线程对象</p><p> <strong>threading.Thread(target&#x3D;任务名)</strong></p></li><li><p>启动线程执行任务</p><p> <strong>线程对象.start()</strong></p></li></ol><p>传参和进程是一样的，一并演示。</p><p>demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sing_thread = threading.Thread(target=sing,args=(<span class="number">5</span>,))</span><br><span class="line">    dance_thread = threading.Thread(target=dance,kwargs=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br></pre></td></tr></table></figure><h2 id="主线程和子线程的结束顺序"><a href="#主线程和子线程的结束顺序" class="headerlink" title="主线程和子线程的结束顺序"></a>主线程和子线程的结束顺序</h2><p>主线程会等待所有的子线程结束在结束</p><p>demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  <span class="comment"># 主线程其实没有结束，还在等待着子线程</span></span><br></pre></td></tr></table></figure><p>设置守护主线程</p><ul><li><p>创建时设置，如<code>sub_thread = threading.Thread(target=work),daemon=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work,daemon=<span class="literal">True</span>)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  <span class="comment"># 因为子线程守护主线程，所以主线程和子线程这时候都乖乖结束</span></span><br></pre></td></tr></table></figure></li><li><p>使用&#96;线程对象.setDeamon(True)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work)</span><br><span class="line">    sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  </span><br></pre></td></tr></table></figure></li></ul><h2 id="线程的执行顺序"><a href="#线程的执行顺序" class="headerlink" title="线程的执行顺序"></a>线程的执行顺序</h2><p>线程之间的执行的顺序是无序的</p><p>获取当前的线程信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过current_thread方法获取线程对象</span></span><br><span class="line">current_thread = thread.current_thread()</span><br><span class="line"><span class="comment"># 通过current_thread对象可以知道线程的相关信息，例如创建顺序</span></span><br><span class="line"><span class="built_in">print</span>(current_thread)</span><br></pre></td></tr></table></figure><h1 id="进程和线程的对比"><a href="#进程和线程的对比" class="headerlink" title="进程和线程的对比"></a>进程和线程的对比</h1><ol><li><p>关系对比</p><ol><li>线程是依附在进程里面的，没有进程就没有线程</li><li>一个进程默认提供一条线程，进程可以创建多个线程</li></ol></li><li><p>区别</p><ol><li>创建进程的资源开销要比创建线程的资源开销大</li><li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li><li>线程不能独立运行</li></ol></li><li><p>优缺点对比</p><ol><li>进程优缺点<ul><li>优点：可以用多核</li><li>缺点：资源开销大</li></ul></li><li>线程优缺点<ul><li>优点：资源开销小</li><li>不能使用多核</li></ul></li></ol></li></ol><h1 id="案例：高并发cpoy器"><a href="#案例：高并发cpoy器" class="headerlink" title="案例：高并发cpoy器"></a>案例：高并发cpoy器</h1><h2 id="多进程高并发cpoy器"><a href="#多进程高并发cpoy器" class="headerlink" title="多进程高并发cpoy器"></a>多进程高并发cpoy器</h2><ol><li><p>定义源文件夹所在的路径，目标文件夹所在的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">dest_dir = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建目标文件夹</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(dest_dir)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;目录已存在！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过os.listdir获取源目录的文件列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_list = os.listdir(source_dir)</span><br><span class="line"><span class="comment"># print(file_list)</span></span><br></pre></td></tr></table></figure></li><li><p>遍历每个文件，定义一个函数，专门实现文件拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">     copy_work(file_name,source_dir,dest_dir)</span><br></pre></td></tr></table></figure></li><li><p>对4进行优化，采用进程多任务，完成高并发拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">    copy_work(file_name,source_dir,dest_dir)</span><br><span class="line">    sub_process = multiprocessing.Process(target=copy_wrok,args=(file_name,source_dir,dest_dir))</span><br><span class="line">    sub_process.start()</span><br></pre></td></tr></table></figure></li></ol><p>最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_work</span>(<span class="params">file_name,source_dir,dest_dir</span>):</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    source_path = source_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    dest_path = dest_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开源文件和目标文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(source_path,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> source_file:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(dest_path,<span class="string">&quot;wb&quot;</span> ) <span class="keyword">as</span> dest_file:</span><br><span class="line">          <span class="comment"># 循环读取源文件到目标路径</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = source_file.read()</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    dest_file.write(data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 定义源文件夹和目标文件夹</span></span><br><span class="line">    source_dir = <span class="string">&quot;D:/test1&quot;</span></span><br><span class="line">    dest_dir = <span class="string">&quot;D:/test2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(dest_dir)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;目录已存在！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取源文件夹的文件列表</span></span><br><span class="line">    file_list = os.listdir(source_dir)</span><br><span class="line">    <span class="built_in">print</span>(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件列表实现拷贝</span></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">        copy_work(file_name, source_dir, dest_dir)</span><br><span class="line">        sub_process = multiprocessing.Process(target=copy_work, args=(file_name, source_dir, dest_dir))</span><br><span class="line">        sub_process.start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：文件和数据存储</title>
      <link href="/2022/07/04/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2022/07/04/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Python文件和流"><a href="#Python文件和流" class="headerlink" title="Python文件和流"></a>Python文件和流</h1><h2 id="读文件和写文件"><a href="#读文件和写文件" class="headerlink" title="读文件和写文件"></a>读文件和写文件</h2><h3 id="使用open-函数"><a href="#使用open-函数" class="headerlink" title="使用open()函数"></a>使用open()函数</h3><p>打开文件:  <code>r  w    r+   w+</code></p><ol><li>r : 读文件</li><li>w : 写文件</li><li>r+ : 文件可读写,但是如果文件不存在，会抛出异常；存在的话，则是追加。通过seek函数可以改变当前的位置。</li><li>w+ : 如果文件不存在，会创建一个新文件，文件存在的话，会覆盖原文件，也就是清空原来文件，写入新内容。</li><li>a+ : 如果文件不存在，创建；存在的话，追加内容。</li></ol><p>操作文件的函数：</p><ol><li>write(string):向文件写入内容，会返回写入文件的字节数。</li><li>read([n]) :读取文件的内容，n是一个整数，表示从文件指针指定的位置开始读取的n个字节。如果不指定n,则从当前位置往后读取所有的字节。</li><li>seek(n):重新设置文件指针，也就是改变文件当前位置。如果使用write函数需要使用seek(0)重置指针。</li><li>close() : 关闭文件。</li></ol><p>以<code>r</code>写模式打开test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;阿福&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;真帅&quot;</span>))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>以<code>w</code>读模式打开test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">2</span>))   <span class="comment">#注意文件位置到了&quot;福&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">1</span>))   <span class="comment">#这里是&quot;真&quot;</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>以<code>r+</code>打开一个不存在的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;afu.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>以<code>w+</code>打开一个不存在的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.write(<span class="string">&#x27;阿福之前的内容不见了！&#x27;</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="管道输出"><a href="#管道输出" class="headerlink" title="管道输出"></a>管道输出</h2><p>什么是管道？即前一个命令的输出会作为下一个命令的输入。用<code>|</code></p><p>Linux和mac有管道，windows没有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入读取全部数据</span></span><br><span class="line">text = sys.stdin.read()</span><br><span class="line"></span><br><span class="line">files = text.split(os.linesep)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    result = re.match(<span class="string">&#x27;.*readme.*&#x27;</span>,file)  <span class="comment">#用到了正则表达式</span></span><br><span class="line">    <span class="keyword">if</span> result != <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br></pre></td></tr></table></figure><h2 id="读行和写行"><a href="#读行和写行" class="headerlink" title="读行和写行"></a>读行和写行</h2><h3 id="读行readline"><a href="#读行readline" class="headerlink" title="读行readline()"></a>读行readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = f.readline()</span><br><span class="line">    res = res.rstrip()  <span class="comment">#去除一些空格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="写行"><a href="#写行" class="headerlink" title="写行"></a>写行</h3><p>利用<code>f.write(&#39;内容&#39;+ os.linesep)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;小璇今天很开心&#x27;</span>+os.linesep)</span><br></pre></td></tr></table></figure><h2 id="使用FileInput对象读取文件"><a href="#使用FileInput对象读取文件" class="headerlink" title="使用FileInput对象读取文件"></a>使用FileInput对象读取文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line">file_obj = fileinput.<span class="built_in">input</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file_obj.readline().rstrip())  <span class="comment">#读一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_obj:  <span class="comment"># 读多行</span></span><br><span class="line">    line = line.rstrip()  </span><br><span class="line">    <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_obj.lineno(),<span class="string">&#x27;:&#x27;</span>,line)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_obj.filename())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="将字典转换为XML字符串"><a href="#将字典转换为XML字符串" class="headerlink" title="将字典转换为XML字符串"></a>将字典转换为XML字符串</h3><ol><li>导入模块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dicttoxml</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parseString</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">20</span>,<span class="string">&#x27;names&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;阿福&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;旅游&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;小璇&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;电影&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;道坤&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">21</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;摆烂&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>将字典转换成XML格式（bytes形式）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bxml = dicttoxml.dicttoxml(d,custom_root=<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="comment">#print(bxml)</span></span><br><span class="line">xml = bxml.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#有中文，所以把编码改成utf-8</span></span><br><span class="line"><span class="built_in">print</span>(xml)</span><br></pre></td></tr></table></figure><p>如果你出现了以下错误，那么不要害怕</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220701184005936.png" alt="image-20220701184005936"></p><p>估计你的python也是3.10，把python的版本换成3.9就可以解决。</p><p>折腾了我一下午，真是….</p><ol start="4"><li><p>解析xml字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom = parseString(xml) <span class="comment">#xml现在太乱了，所以解析xml字符串</span></span><br><span class="line"></span><br><span class="line">prettyxml = dom.toprettyxml(indent = <span class="string">&#x27;&#x27;</span>)  <span class="comment">#设置缩进，美观</span></span><br><span class="line"><span class="built_in">print</span>(prettyxml)</span><br></pre></td></tr></table></figure></li><li><p>写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">&quot;files&quot;</span>,exist_ok = <span class="literal">True</span>)  <span class="comment">#创建一个files文件夹，如果存在file文件夹就忽略</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;files/persons.xml&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(prettyxml)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取与检索XML文件"><a href="#读取与检索XML文件" class="headerlink" title="读取与检索XML文件"></a>读取与检索XML文件</h3><p>首先，导入相关的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElemenTree <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure><p>接着找到文件位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc  = parse(<span class="string">&#x27;files/afu.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">doc = parse(<span class="string">&#x27;files/afu.xml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> doc.iterfind(<span class="string">&#x27;files/afu.xml&#x27;</span>):</span><br><span class="line">    <span class="comment"># 读取所有id节点的值</span></span><br><span class="line">    id_val = item.findtext(<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取name节点的值</span></span><br><span class="line">    name = item.findtext(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取price节点的值</span></span><br><span class="line">    price = item.findtext(<span class="string">&#x27;price&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="XML字符串转换成字典"><a href="#XML字符串转换成字典" class="headerlink" title="XML字符串转换成字典"></a>XML字符串转换成字典</h3><p>先导入库<code>import xmltodict</code></p><p>打开文件并解析</p><p>美观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件并解析</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;files/persons.xml&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">xml = f.read()</span><br><span class="line">d = xmltodict.parse(xml)  <span class="comment"># 解析xml文件</span></span><br><span class="line"><span class="comment">#print(d)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 美观一下</span></span><br><span class="line"><span class="keyword">import</span>  pprint</span><br><span class="line">nice = pprint.PrettyPrinter(indent=<span class="number">4</span>) <span class="comment"># 设置一下缩进</span></span><br><span class="line">nice.pprint(d)</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON转换成字典"><a href="#JSON转换成字典" class="headerlink" title="JSON转换成字典"></a>JSON转换成字典</h3><ol><li>使用<code>eval</code>函数将json字符串转换成为字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line"><span class="comment">#json文件的缩进很严格，请注意操练时的缩进问题</span></span><br><span class="line">target = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;语文&quot;:111,</span></span><br><span class="line"><span class="string">    &quot;数学&quot;:110,</span></span><br><span class="line"><span class="string">    &quot;英语&quot;:109</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用eval函数将json字符串转换为字典</span></span><br><span class="line">data = <span class="built_in">eval</span>(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用<code>json.loads()</code></p><p>注意python文件不要命名成json.py !</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">target = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;语文&quot;:111,</span></span><br><span class="line"><span class="string">    &quot;数学&quot;:110,</span></span><br><span class="line"><span class="string">    &quot;英语&quot;:109</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.loads()将json字符串转换为字典</span></span><br><span class="line">data = json.loads(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li></ol><h3 id="字典转换成JSON"><a href="#字典转换成JSON" class="headerlink" title="字典转换成JSON"></a>字典转换成JSON</h3><p>使用<code>json.dumps()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&#x27;小璇&#x27;</span>:<span class="string">&#x27;江西抚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;道坤&#x27;</span>:<span class="string">&#x27;江西九江&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小熙&#x27;</span>:<span class="string">&#x27;江西抚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小岚&#x27;</span>:<span class="string">&#x27;江西赣州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小彭&#x27;</span>:<span class="string">&#x27;江西上饶&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = json.dumps(person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="JSON转换成类实例（对象）"><a href="#JSON转换成类实例（对象）" class="headerlink" title="JSON转换成类实例（对象）"></a>JSON转换成类实例（对象）</h3><p>方法：利用<code>loads函数</code>的object_hook关键字参数指定一个类或者一个回调函数。</p><p>先创建一个json文件（我的文件名是person.json）</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220702010414108.png" alt="image-20220702010414108"></p><ol><li>指定一个类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">read_data = f.read()</span><br><span class="line">to_person1 = json.loads(read_data,object_hook=Person) <span class="comment"># 使用json.loads()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(to_person1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,to_person1.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,to_person1.age)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_person</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="keyword">return</span> Person(d)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">read_data = f.read()</span><br><span class="line">to_person2 = json.loads(read_data,object_hook=json_person) <span class="comment"># object_hook参数改成回调函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(to_person2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,to_person2.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,to_person2.age)</span><br></pre></td></tr></table></figure><h3 id="将类实例转换成JSON字符串"><a href="#将类实例转换成JSON字符串" class="headerlink" title="将类实例转换成JSON字符串"></a>将类实例转换成JSON字符串</h3><p>解决方案：利用dumps(将字典转换成字符串)</p><p><code>default</code>关键字参数指定一个回调函数，这个回调函数会接收一个类实例</p><p>回调函数需要返回一个字典，最后，dumps函数会将字典转换成JSON字符串</p><p>过程为: object –&gt; dict –&gt; JSON</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数       </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Person_to_dict</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:obj.name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:obj.age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&#x27;阿福&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">json_P1 = json.dumps(P1,default=Person_to_dict,ensure_ascii=<span class="literal">False</span>) <span class="comment"># 不使用ascii码</span></span><br><span class="line"><span class="built_in">print</span>(json_P1)</span><br></pre></td></tr></table></figure><h3 id="类实例列表与JSON字符串的转换"><a href="#类实例列表与JSON字符串的转换" class="headerlink" title="类实例列表与JSON字符串的转换"></a>类实例列表与JSON字符串的转换</h3><p>创建一个json文件</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220704083340552.png" alt="image-20220704083340552"></p><ol><li>json文件转换成类实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding= <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">persons_to_list = json.loads(jsonStr,object_hook=Person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(persons_to_list))</span><br><span class="line"><span class="keyword">for</span> P <span class="keyword">in</span> persons_to_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name = &#x27;</span>,P.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age = &#x27;</span>,P.age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sex = &#x27;</span>, P.sex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;addr = &#x27;</span>, P.addr)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>类实例转换成json文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding= <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">persons_to_list = json.loads(jsonStr,object_hook=Person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(persons_to_list))</span><br><span class="line"><span class="keyword">for</span> P <span class="keyword">in</span> persons_to_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name = &#x27;</span>,P.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age = &#x27;</span>,P.age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sex = &#x27;</span>, P.sex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;addr = &#x27;</span>, P.addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_json</span>(<span class="params">P</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: P.name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:P.age,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>:P.sex,</span><br><span class="line">        <span class="string">&#x27;addr&#x27;</span>:P.addr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">jsonStr = json.dumps(persons_to_list,default=person_json,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(jsonStr)</span><br></pre></td></tr></table></figure></li></ol><h3 id="JSON转换成XML字符串"><a href="#JSON转换成XML字符串" class="headerlink" title="JSON转换成XML字符串"></a>JSON转换成XML字符串</h3><p>过程: <code>json --&gt; dict --&gt; xml</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> dicttoxml</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;../person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">d = json.loads(jsonStr)  <span class="comment"># 先转换成字典</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">xmlStr = dicttoxml.dicttoxml(d).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(xmlStr)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>我的json文件</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220704115559353.png" alt="image-20220704115559353"></p><p><strong>注意：</strong>json文件不要和对应的.py文件同在一个文件夹，不然会出问题，同时也建议本篇的博客都使用python3.9操作。</p><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>未完待续</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>未完待续</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>未完待续</p><h2 id="非关系型数据库（NoSQL）-MongoDB"><a href="#非关系型数据库（NoSQL）-MongoDB" class="headerlink" title="非关系型数据库（NoSQL）(MongoDB)"></a>非关系型数据库（NoSQL）(MongoDB)</h2><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：面向高级对象编程</title>
      <link href="/2022/06/30/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/30/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文章由<code>阿里云大学</code>和<code>廖雪峰的python</code>整理。</p><h1 id="使用-slots-（浅学）"><a href="#使用-slots-（浅学）" class="headerlink" title="使用__slots__（浅学）"></a>使用<code>__slots__</code>（浅学）</h1><p>一般来说，我们创建<code>class dog</code>就可以绑定属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">example</span>:</span><br><span class="line">    __slots__ = (<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>)  <span class="comment">#那么该类只能使用“A”,“B”两种属性</span></span><br><span class="line"> </span><br><span class="line">test1 = example()</span><br><span class="line">test1.A = <span class="number">2</span> <span class="comment"># A属性可以使用</span></span><br><span class="line">test1.C = <span class="number">2</span> <span class="comment"># C属性不可以使用，此语句也会报错</span></span><br></pre></td></tr></table></figure><h1 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h1><p>装饰器是什么东西？</p><p>装饰器就是让程序员使用属性一样去使用方法</p><h2 id="property装饰get方法"><a href="#property装饰get方法" class="headerlink" title="@property装饰get方法"></a>@property装饰get方法</h2><p>property装饰器，用来将一个get方法，转换成对象的属性。</p><p>使用property装饰的方法，必须属性名是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般方法的平常使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用property</span></span><br><span class="line"><span class="comment">#可以像使用属性一样去使用方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#get方法（获取值）</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name)  <span class="comment">#区别在这，不使用P1.name()</span></span><br></pre></td></tr></table></figure><h2 id="属性名-setter装饰set方法"><a href="#属性名-setter装饰set方法" class="headerlink" title="@属性名.setter装饰set方法"></a><code>@属性名.setter</code>装饰set方法</h2><p>属性名要和property装饰的相对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 @属性名.setter</span></span><br><span class="line"><span class="comment">#注意属性名，这里我们要对应上面property装饰的name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># setter方法（设置值）</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name)  </span><br><span class="line">P1.name = <span class="string">&quot;小璇&quot;</span>  <span class="comment"># 在这里可以像属性一样赋值</span></span><br><span class="line"><span class="built_in">print</span>(P1.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：面向对象编程</title>
      <link href="/2022/06/29/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/29/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Python进阶编程：面向对象编程"><a href="#Python进阶编程：面向对象编程" class="headerlink" title="Python进阶编程：面向对象编程"></a>Python进阶编程：面向对象编程</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>根据<code>B站大学</code>和<code>廖雪峰的python</code>整理而来</p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p>面向过程：思考的重点在于步骤。</p><p>面向对象：把问题分解成各个对象，描述对象在整个事情的行为。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><ul><li><p>人狗大战</p><ul><li><p>先创建很多狗，每个狗有各自的名字，品种，攻击力等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向过程的思考</span></span><br><span class="line">dog1 = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小红&quot;</span>,  <span class="comment"># 创建dog1</span></span><br><span class="line">    <span class="string">&quot;d_type&quot;</span>: <span class="string">&quot;京巴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attack_val&quot;</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite1</span>(<span class="params">person</span>):  <span class="comment"># dog1咬人</span></span><br><span class="line">    person.life_val -= <span class="number">40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog2 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,  <span class="comment"># 创建dog2</span></span><br><span class="line">        <span class="string">&quot;d_type&quot;</span>: <span class="string">&quot;牧羊犬&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attack_val&quot;</span>: <span class="number">50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite2</span>(<span class="params">person</span>):  <span class="comment"># dog2咬人</span></span><br><span class="line">    person.life_val -= <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1)</span><br><span class="line"><span class="built_in">print</span>(dog2)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#以此类推创建dog3,doe4......</span></span><br><span class="line"><span class="comment">#可以看到每当创建一个dog3就要重复很多代码，很是麻烦，有没有更好的办法的呢？</span></span><br><span class="line"><span class="comment">#很负责任的跟大家说—— 没有</span></span><br><span class="line"><span class="comment">#是不可能的！！</span></span><br><span class="line"><span class="comment">#下面就是另一种编程思想</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向对象的思考</span></span><br><span class="line"><span class="comment">#写一个函数，包含了每个狗的共同点</span></span><br><span class="line">attack_vals = &#123;</span><br><span class="line">    <span class="string">&quot;京巴&quot;</span>:<span class="number">40</span>,</span><br><span class="line">    <span class="string">&quot;牧羊犬&quot;</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="string">&quot;藏獒&quot;</span>:<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dog</span>(<span class="params">name, d_type</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;d_type&quot;</span>: d_type,</span><br><span class="line">        <span class="string">&quot;life_val&quot;</span>: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d_type <span class="keyword">in</span> attack_vals:  <span class="comment"># 根据品种添加攻击力</span></span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = attack_vals[d_type]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog1 = dog(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;京巴&quot;</span>)  <span class="comment"># 实体1</span></span><br><span class="line">dog2 = dog(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;牧羊犬&quot;</span>)  <span class="comment"># 实体2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1)</span><br><span class="line"><span class="built_in">print</span>(dog2)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>创建很多人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#人也按照共同点创造</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: age,</span><br><span class="line">        <span class="string">&quot;life_val&quot;</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = <span class="number">50</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P1 = person(<span class="string">&quot;阿福&quot;</span>, <span class="number">21</span>)</span><br><span class="line">P2 = person(<span class="string">&quot;小璇&quot;</span>, <span class="number">17</span>)</span><br><span class="line">P3 = person(<span class="string">&quot;小岚&quot;</span>, <span class="number">21</span>)</span><br><span class="line">P4 = person(<span class="string">&quot;小乐&quot;</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(P1)</span><br><span class="line"><span class="built_in">print</span>(P2)</span><br><span class="line"><span class="built_in">print</span>(P3)</span><br><span class="line"><span class="built_in">print</span>(P4)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>人可以打狗，狗可以打人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#狗咬人</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite</span>(<span class="params">dog_obj,person_obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的攻击力：<span class="subst">&#123;dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的血量：<span class="subst">&#123;person_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span> &quot;</span>)</span><br><span class="line">    person_obj[<span class="string">&#x27;life_val&#x27;</span>] -= dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>咬了<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,人掉了<span class="subst">&#123;dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>血量，还剩下<span class="subst">&#123;person_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">bite(dog1,P1)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打狗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight_dog</span>(<span class="params">person_obj,dog_obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的攻击力：<span class="subst">&#123;person_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的血量：<span class="subst">&#123;dog_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span> &quot;</span>)</span><br><span class="line">    dog_obj[<span class="string">&#x27;life_val&#x27;</span>] -= person_obj[<span class="string">&#x27;attack_val&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>打了<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,狗子没有了<span class="subst">&#123;person_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>血量，还剩下<span class="subst">&#123;dog_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">fight_dog(P1,dog1)</span><br></pre></td></tr></table></figure></li><li><p><strong>思考</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上文的打狗函数是bite(dog_obj,person_obj),我们在实际传参的时候写成bite(person_obj,dog_obj)可以吗？</span><br><span class="line">从现实的角度来说，肯定是不可以的。因为bite()函数的狗咬人，理应传入狗的伤害值和人的生命值。</span><br><span class="line">但是从程序的角度来说，这样运行也没什么问题，因为计算机不知道你是人是狗。</span><br><span class="line">那么怎么让计算机知道你是人是狗呢？这就是这篇文章探讨的主要内容了！</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类的语法"><a href="#类的语法" class="headerlink" title="类的语法"></a>类的语法</h3><p>语法格式： class 类的名称():</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">    d_type = <span class="string">&quot;藏獒&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">dog1 = dog() <span class="comment">#类的一个实例化</span></span><br><span class="line"><span class="built_in">print</span>(dog1.d_type) <span class="comment">#调用类的属性，属性一个静态的</span></span><br><span class="line">dog1.say_hi() <span class="comment">#该实列调用方法，方法是一个动作</span></span><br></pre></td></tr></table></figure><p>类的初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>):  <span class="comment">#初始化方法，构造方法，实例化时会自动执行，完成一些初始化操作</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.d_type = d_type</span><br><span class="line">        self.life_val = <span class="number">100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">dog1 = dog(<span class="string">&quot;小红&quot;</span>,<span class="string">&quot;藏獒&quot;</span>) <span class="comment">#类的一个实例化</span></span><br><span class="line"><span class="built_in">print</span>(dog1.d_type) <span class="comment">#调用类的属性，属性一个静态的</span></span><br><span class="line">dog1.say_hi() <span class="comment">#该实列调用方法，方法是一个动作</span></span><br></pre></td></tr></table></figure><h3 id="类属性的应用场景"><a href="#类属性的应用场景" class="headerlink" title="类属性的应用场景"></a>类属性的应用场景</h3><p>类属性：类变量，也就是公共属性，所有实列共享</p><p>实例属性：实例变量，成员变量，每个实例独享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类属性和实例调用类属性，若数值也是一样，内存空间是一样的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog1.life_val))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog2.life_val))</span><br></pre></td></tr></table></figure><p><strong>dog.life_val</strong>变量是一样，都是100，所以可以单独设置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">life_val = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>): </span><br><span class="line">        self.name = name</span><br><span class="line">        self.d_type = d_type</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>实列属性对自己不满意也可以改属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dog.life_val = 100</span></span><br><span class="line">dog2.life_val = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog2.life_val))</span><br></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ol><li>依赖关系</li><li>关联关系</li><li>组合关系</li><li>聚合关系</li><li>继承关系，类的三大特性之一</li></ol><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><h3 id="访问保护"><a href="#访问保护" class="headerlink" title="访问保护"></a>访问保护</h3><p>在类的应用场景我们说到实例属性对自己不满意也可以改属性。</p><p>如果要让内部属性不被外部访问，可以在属性前面加上一些东西，如<code>__</code></p><p>需要注意：变量名<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>): </span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__d_type = d_type</span><br><span class="line">        self.life_val = <span class="number">100</span></span><br><span class="line">    <span class="comment">#这样的话dog2.val = 200就不能成功。因为无法访问</span></span><br></pre></td></tr></table></figure><p>如果说我们有时候真的需要修改life_val怎么办？可以给dog<code>增加一个set_life_val</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">    <span class="comment"># life_val = 100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__d_type = d_type</span><br><span class="line">        self.__life_val = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_life_val</span>(<span class="params">self,life</span>):</span><br><span class="line">        self.__life_val = life</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>除了修改，我们还需要访问life_val。但是现在显然是不能访问的，解决方案如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_life_val</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__life_val</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当我们新定义一个class,可以从现有的class继承，新的这个class也就是子类。</p><p>比如我们定义一个二哈继承狗类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">erha</span>(<span class="title class_ inherited__">dog</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样的话,二哈拥有父类dog的全部功能。</p><h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><h3 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用type()</h3><p>使用type()可以判断类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">12345</span>)</span><br><span class="line"><span class="built_in">type</span>(dog1)</span><br></pre></td></tr></table></figure><h3 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance()"></a>使用isinstance()</h3><p>对于class的继承关系。使用<code>type()</code>不方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(erha1,erha)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>因为<code>erha</code>是从<code>dog</code>继承下来的，所以erha1也是属于<code>dog</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(erha1,dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用dir()</h3><p>获取一个对象的所有属性和方法,它返回一个包含字符串的list。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>(<span class="number">123</span>)</span><br><span class="line">[<span class="string">&#x27;__abs__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>,....... <span class="string">&#x27;from_bytes&#x27;</span>, <span class="string">&#x27;imag&#x27;</span>, <span class="string">&#x27;numerator&#x27;</span>, <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;to_bytes&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+picGo图床+github设置</title>
      <link href="/2022/06/28/Typora-picGo%E5%9B%BE%E5%BA%8A-github%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/06/28/Typora-picGo%E5%9B%BE%E5%BA%8A-github%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>利用picGo工具，可以把图片上传到github的仓库中。优点是稳定性很强，同时也是免费的。缺点是github的仓库需要公开，也就是隐私性不强。各位小伙伴若是在我仓库中看到什么不得了的图片，请联系我。</p><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ol><li>Typora</li><li>github账号</li><li>picGo客户端<ul><li>github下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">picGo</a></li></ul></li></ol><h1 id="github仓库设置"><a href="#github仓库设置" class="headerlink" title="github仓库设置"></a>github仓库设置</h1><ol><li><p>新建一个仓库</p><ol><li><p>来到仓库界面</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628185621077.png" alt="image-20220628185621077"></p></li></ol></li><li><p>点击右边的<strong>new</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628185752594.png" alt="image-20220628185752594"></p></li><li><p>填入仓库名字</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190023543.png" alt="image-20220628190023543"></p></li><li><p>点击下方的<strong>create repository</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190138509.png" alt="image-20220628190138509"></p></li><li><p>来到<strong>Setting</strong> –&gt; <strong>在左侧列表中选择最下面的<code>&lt;&gt;Developer settings</code></strong> –&gt;生成<strong>Token</strong></p><ol><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190525124-16564144777011.png"></li></ol></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190901496.png" alt="image-20220628190901496"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191021020.png" alt="image-20220628191021020"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191216425.png" alt="image-20220628191216425"></p></li><li><p>出现的<strong>Token只出现一次</strong>，记得保存</p></li></ol><h1 id="picGo工具的设置"><a href="#picGo工具的设置" class="headerlink" title="picGo工具的设置"></a>picGo工具的设置</h1><ol><li>打开软件，选择<strong>图床设置</strong>–&gt; <strong>GitHub</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191511807.png" alt="image-20220628191511807"></p><ol start="2"><li><p>填写信息</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628192030339.png" alt="image-20220628192030339"></p></li></ol><p>自定义域名可以使用CDN加速：</p><p><code>https://cdn.jsdelivr.net/gh/github的用户名/创建的仓库名</code></p><h1 id="Typora的设置"><a href="#Typora的设置" class="headerlink" title="Typora的设置"></a>Typora的设置</h1><ol><li><p>打开Typora,点击文件 –&gt; 偏好设置，设置如图</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628192440917.png" alt="image-20220628192440917"></p></li></ol><p>注意： PicGo路径是安装路径。</p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + github搭建个人博客</title>
      <link href="/2022/06/27/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/06/27/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a><strong>工具准备</strong></h1><h2 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a><strong>下载nodejs</strong></h2><p>下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144314795.png" alt="image-20220627144314795"></p><h2 id="检验Node-js是否成功安装"><a href="#检验Node-js是否成功安装" class="headerlink" title="检验Node.js是否成功安装"></a><strong>检验Node.js是否成功安装</strong></h2><p>打开cmd,输入Node -v，出现版本即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144349612.png" alt="image-20220627144349612"></p><p>可能出现的问题：</p><ul><li><p>如果npm -v会出现<strong>npm WARN config global –global, –local are deprecated. Use –location&#x3D;global instead</strong>.</p><ul><li><p>解决办法是：在管理员cmd中，输入<strong>npm-windows-upgrade –npm-version latest</strong></p><p>出现以下内容即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144410113.png" alt="image-20220627144410113"></p></li><li><p>若出现npm fund 这不是报错！</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144440538.png" alt="image-20220627144440538"></p></li></ul></li></ul><h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a><strong>下载git</strong></h2><p>下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><h2 id="检验git是否安装成功"><a href="#检验git是否安装成功" class="headerlink" title="检验git是否安装成功"></a><strong>检验git是否安装成功</strong></h2><p>在cmd输入<strong>git –version</strong>，出现下图即为成功（版本号可以不一致）</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627132957164-16563122957961-16563123012263.png" alt="image-20220627132957164"></p><h1 id="Hexo下载"><a href="#Hexo下载" class="headerlink" title="Hexo下载"></a>Hexo下载</h1><h2 id="创建一个文件夹名为“myHexo“，右键“git-bash-here“"><a href="#创建一个文件夹名为“myHexo“，右键“git-bash-here“" class="headerlink" title="创建一个文件夹名为“myHexo“，右键“git bash here“"></a><strong>创建一个文件夹名为“myHexo“，右键“git bash here“</strong></h2><h2 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a><strong>下载hexo</strong></h2><p>npm可能下载过慢，可以使用国内淘宝下载源cnpm</p><ol><li><p>方法一 ：输入npm: <strong>npm install -g hexo-cli</strong></p></li><li><p>方法二：下载cnpm：<strong>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong> </p><p>​                 安装hexo:  <strong>cnpm install -g hexo-cli</strong></p></li></ol><h2 id="检验是否安装Hexo"><a href="#检验是否安装Hexo" class="headerlink" title="检验是否安装Hexo"></a>检验是否安装Hexo</h2><p>用hexo -v命令查看是否安装成功hexo，若成功则出现：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135923731.png" alt="image-20220627133432543"></p><h1 id="网站的初始化"><a href="#网站的初始化" class="headerlink" title="网站的初始化"></a>网站的初始化</h1><h2 id="输入hexo-init"><a href="#输入hexo-init" class="headerlink" title="输入hexo init"></a><strong>输入hexo init</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133630230-16563123192579-165631232071811.png" alt="image-20220627133630230"></p><h2 id="npm的安装"><a href="#npm的安装" class="headerlink" title="npm的安装"></a>npm的安装</h2><p>输入<code>npm install </code></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133712319-165631232618713-165631232758415.png" alt="image-20220627133712319"></p><h2 id="网页的生成"><a href="#网页的生成" class="headerlink" title="网页的生成"></a><strong>网页的生成</strong></h2><p>输入 <code>hexo g</code></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133750031-165631233313717.png" alt="image-20220627133750031"></p><h2 id="本地访问"><a href="#本地访问" class="headerlink" title="本地访问"></a><strong>本地访问</strong></h2><p>输入<code>hexo s</code> 或者<code>hexo server</code>,,然后在浏览器输入<a href="http://localhost:4000查看是否在本地可以访问">http://localhost:4000查看是否在本地可以访问</a></p><p>ctrl + C 为停止</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133837345-165631233658619.png" alt="image-20220627133837345"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133849439-165631234008921.png" alt="image-20220627133849439"></p><h1 id="本地和github关联"><a href="#本地和github关联" class="headerlink" title="本地和github关联"></a><strong>本地和github关联</strong></h1><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a><strong>生成SSH密钥</strong></h2><ol><li><p>来到git bash里（当前位置为之前创建的文件夹，我这里是myHexo）</p></li><li><p>生成ssh密钥 ： ssh-keygen -t rsa -C “你的github邮件地址”</p></li><li><p>按四次4次回车，结果如下：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627134704222-165631234512223.png" alt="image-20220627134704222"></li></ul></li><li><p>注意找到id_rsa.pub这个文件路径并复制里面的内容（如上图红色圈）</p><ul><li><p>可以改后缀，使用记事本打开</p></li><li><p>或者使用cd 命令，再用cat命令</p></li><li><p>复制这串内容（原模原样复制）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627134913469-165631234769325.png" alt="image-20220627134913469"></p></li></ul></li></ol><p>​</p><h2 id="Github的仓库关联"><a href="#Github的仓库关联" class="headerlink" title="Github的仓库关联"></a><strong>Github的仓库关联</strong></h2><h3 id="点击右上角的github头像"><a href="#点击右上角的github头像" class="headerlink" title="点击右上角的github头像"></a>点击右上角的github头像</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135026269-165631234997027.png" alt="image-20220627135026269"></p><h3 id="选中settings"><a href="#选中settings" class="headerlink" title="选中settings"></a>选中settings</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135057567-165631237153029.png" alt="image-20220627135057567"></p><h3 id="点击左侧的ssh-and-GPG-keys"><a href="#点击左侧的ssh-and-GPG-keys" class="headerlink" title="点击左侧的ssh and GPG keys"></a>点击左侧的ssh and GPG keys</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135155776-165631237506031.png" alt="image-20220627135155776"></p><h3 id="SSH-keys选择New-SSH-keys"><a href="#SSH-keys选择New-SSH-keys" class="headerlink" title="SSH keys选择New SSH keys"></a>SSH keys选择New SSH keys</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135224600-165631237729033.png" alt="image-20220627135224600"></p><h3 id="填写内容"><a href="#填写内容" class="headerlink" title="填写内容"></a>填写内容</h3><ul><li>Title 随意填写</li><li>Key:粘贴刚才的密钥</li><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135312825-165631237969335.png" alt="image-20220627135312825"></li></ul><h3 id="点击Add-SSH-key保存"><a href="#点击Add-SSH-key保存" class="headerlink" title="点击Add SSH key保存"></a>点击Add SSH key保存</h3><h2 id="测试本地与github是否关联成功"><a href="#测试本地与github是否关联成功" class="headerlink" title="测试本地与github是否关联成功"></a><strong>测试本地与github是否关联成功</strong></h2><p>输入 ：<code>ssh -T git@github.com</code></p><p>出现 successfully就是成功，but这些不管它。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135837403-165631238220137.png" alt="image-20220627135837403"></p><h1 id="博客的远程推送"><a href="#博客的远程推送" class="headerlink" title="博客的远程推送"></a><strong>博客的远程推送</strong></h1><h2 id="config-yml-的配置"><a href="#config-yml-的配置" class="headerlink" title="_config.yml****的配置"></a><strong>_config.yml****的配置</strong></h2><p>来到myHexo文件夹，找到_config.yml</p><p>使用记事本或者在git bash中用vim打开找到最后一行,输入一下格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Deploy:</span><br><span class="line">Type:空格 git</span><br><span class="line"><span class="title function_">Respository</span><span class="params">(或者repo)</span>: 空格 （来到github的创建的仓库，点击code,复制地址）</span><br><span class="line">Branch: 空格 main</span><br></pre></td></tr></table></figure><p>如我的配置</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627140200921-165631238522639.png" alt="image-20220627140200921"></p><h2 id="安装自动部署发布工具"><a href="#安装自动部署发布工具" class="headerlink" title="安装自动部署发布工具"></a><strong>安装自动部署发布工具</strong></h2><ol><li>安装工具</li></ol><p>​输入<code>**npm install hexo-deployer-git --save**</code></p><p>​再输入hexo g</p><p>​再输入hexo d</p><ol start="2"><li><p>访问</p><p>浏览器输入 ： 自己github用户名@github.io</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627140528303-165631238737941.png" alt="image-20220627140528303"></p></li></ol><p>最后，非常感谢大佬[武师叔](<a href="https://wushishu.xyz/post/be8880ea.html">Hexo+github搭建个人博客 | 武师叔 (wushishu.xyz)</a>)！武师叔的博客很系统，很详细的记录了搭建的流程。在搭建的时候，我遇到了一些麻烦，在武师叔的博客里，找到了解决方案。在此衷心的感谢！</p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora下的Markdown语法入门</title>
      <link href="/2022/06/27/Typora%E4%B8%8B%E7%9A%84Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/27/Typora%E4%B8%8B%E7%9A%84Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Typora下Markdown语法入门"><a href="#Typora下Markdown语法入门" class="headerlink" title="Typora下Markdown语法入门"></a><center>Typora下Markdown语法入门</center></h1><p>Markdown语言：是一种轻量级标记语言，其中Typora是markdown免费文本编辑器。掌握好Markdown的语法后，我们只需要关注内容本身，至于内容的排版，格式不必花费大量精力。</p><hr><ul><li><h2 id="Typora结构类操作"><a href="#Typora结构类操作" class="headerlink" title="Typora结构类操作"></a>Typora结构类操作</h2></li></ul><h3 id="多级标题（注意‘-’后有一个空格）"><a href="#多级标题（注意‘-’后有一个空格）" class="headerlink" title="多级标题（注意‘#’后有一个空格）"></a>多级标题（注意‘#’后有一个空格）</h3><p>  ​</p><p>  一级标题： <code># 文本内容</code></p><ul><li><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li></ul><p>  二级标题：<code> ## 文本内容</code></p><ul><li><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li></ul><p>  三级标题：<code>### 文本内容</code></p><ul><li><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li></ul><p>  四级标题：<code>#### 文本内容</code></p><ul><li><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4></li></ul><p>  五级标题：<code>##### 文本内容</code></p><ul><li><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></li></ul><p>  六级标题：<code>######文本 内容</code></p><ul><li><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ul><table><thead><tr><th>各类标题快捷键</th><th>ctrl + [1-6]</th></tr></thead><tbody><tr><td>清除</td><td>ctrl + 0</td></tr><tr><td>一级标题居中</td><td># <code>&lt;center&gt;</code> 文本内容</td></tr></tbody></table><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><ul><li><p>语法格式：数字. 空格 文本内容</p><p>​快捷键：<code>Ctrl + shfit + [</code></p></li><li><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br></pre></td></tr></table></figure><p>有序列表1</p><p>有序列表2</p></li><li><p>去除有序： 按住两次“Enter”或者按“↓”</p></li><li><p>降级快捷键：Tab</p></li><li><p>升级快捷键: shfit + Tab</p></li></ul><h3 id="3-无序列表"><a href="#3-无序列表" class="headerlink" title="3. 无序列表"></a>3. 无序列表</h3><ul><li><p>语法格式: <code>空格 文本内容</code>  或者 <code>*空格 文本内容</code></p></li><li><p>快捷键: <code>ctrl + shfit + ]</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表<span class="number">1</span></span><br><span class="line">- 无序列表<span class="number">2</span></span><br></pre></td></tr></table></figure><p>无序列表1</p><p>无序列表2</p></li></ul><h3 id="4-任务列表"><a href="#4-任务列表" class="headerlink" title="4. 任务列表"></a>4. 任务列表</h3><ul><li><p>语法格式：<code>-空格[空格]空格 文本内容</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 今天要背<span class="number">20</span>个单词</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 今天要背20个单词</li></ul></li></ul><h3 id="5-表格"><a href="#5-表格" class="headerlink" title="5. 表格"></a>5. 表格</h3><ul><li><p>语法格式：|内容|</p><p>​快捷键: <code>ctrl + T</code></p></li><li><p>表格添加行：在表格中<code>ctrl + 回车</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|学号|姓名|性别|成绩|</span><br><span class="line">|:--|:-:|---:|      左对齐/居中/右对齐</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">性别</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="center">273</td><td align="center">小福</td><td align="center">男</td><td align="center">很多分</td></tr><tr><td align="center">702</td><td align="center">小璇</td><td align="center">女</td><td align="center">100</td></tr></tbody></table></li></ul><hr><h2 id="Typora代码类操作"><a href="#Typora代码类操作" class="headerlink" title="Typora代码类操作"></a>Typora代码类操作</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法格式： `文本内容`</span><br><span class="line">快捷键：ctrl + shfit + K</span><br></pre></td></tr></table></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>语法格式：&#96;&#96;&#96;&#96; 空格 语言名称  <code> 或者 </code>~~~ 空格 语言名称 &#96;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举例</span><br><span class="line">    ``` C++</span><br><span class="line">    ``` java</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加粗 ：**我是胖子**</span><br><span class="line">删除：~~我是删除~~</span><br><span class="line">斜体：*我站不直*</span><br><span class="line">斜粗体: ***我比斜体更粗***</span><br></pre></td></tr></table></figure><ol><li>加粗 ：<strong>我是胖子</strong></li><li>删除：<del>我是删除</del></li><li>斜体：<em>我站不直</em></li><li>斜粗体: <em><strong>我比斜体更粗</strong></em></li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">    &gt;</span><br><span class="line">    &gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>语法：<code>---</code> 或者 <code>***</code></p><hr><h2 id="Typora元素类操作"><a href="#Typora元素类操作" class="headerlink" title="Typora元素类操作"></a>Typora元素类操作</h2><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>Typora相关设置：文件 —&gt; 偏好设置 —&gt; 复制图片到.&#x2F;$(filename).assets文件夹】</p><p>创建方式： <code>![]()</code></p><p>快捷键： ctrl + shift + i</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97.jpg"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法格式：<code>[ 名称 ]( 地址)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](www.baidu.com)</span><br></pre></td></tr></table></figure><p><a href="www.baidu.com">百度</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

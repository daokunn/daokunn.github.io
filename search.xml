<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux安全：SSH原理</title>
      <link href="/2024/06/12/Linux%E5%AE%89%E5%85%A8%EF%BC%9ASSH%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/12/Linux%E5%AE%89%E5%85%A8%EF%BC%9ASSH%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>SSH的使用是很简单的，先说使用，从实践中理解。我用的比较多的是免密登录，所以放在前面了。</p><h1 id="免密登录操作"><a href="#免密登录操作" class="headerlink" title="免密登录操作"></a>免密登录操作</h1><p>流程如下：</p><ol><li><p>本地生成密钥对</p></li><li><p>发送本地的公钥到服务器</p></li><li><p>添加自己的私钥</p></li></ol><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>可以通过使用 <code>ssh-keygen</code> 命令来生成，我们可以先使用 man 命令或者是 help 命令查看具体需要哪些参数以及具体信息。</p><p>通过执行命令 ssh-keygen -t rsa 来生成我们需要的密钥。默认是在<code>~/.ssh/</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br><span class="line"><span class="comment"># 或者直接</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240612103804796.png" alt="image-20240612103804796" style="zoom: 33%;"><p>我们看到有几个文件，下面分别解释下每个文件是干什么用的。</p><ol><li><p>id_rsa: 生成的私钥文件,本机的私钥，不能泄露，很重要。</p></li><li><p>id_rsa.pub: 生成的公钥文件，本机的公钥。</p></li><li><p>known_hosts: 已知的主机公钥清单,它<a href="https://cloud.baidu.com/product/bos.html">存储</a>了用户曾经连接过的主机的公钥，用于验证服务器的身份</p></li><li><p>known_hosts.old：旧的known_hosts</p></li><li><p>authorized_keys: 存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥。这里没明白没关系，下面马上会介绍。我的机器上没有，因为我的win10不需要别人免密登录。</p></li></ol><h2 id="公钥复制"><a href="#公钥复制" class="headerlink" title="公钥复制"></a>公钥复制</h2><p>公钥需要复制到authorized_keys，这样这台服务器会在这个文件中查找，如果ssh客户端的公钥在这里，那么就会免密登录。</p><p>这里介绍最常用的三种方式，一是通过 ssh-copy-id 命令，二是通过 scp 命令，三是手工复制。</p><h3 id="使用ssh-copy-id复制"><a href="#使用ssh-copy-id复制" class="headerlink" title="使用ssh-copy-id复制"></a>使用ssh-copy-id复制</h3><p>方式一，通过 ssh-copy-id 命令设置。-i是指定公钥的路径,-p指定端口。最后一个参数是我们要免密钥登录的服务器 ip 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.1.100</span><br></pre></td></tr></table></figure><p>如果你的端口改变了，那就需要指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -p 48822 root@192.168.1.100</span><br></pre></td></tr></table></figure><h3 id="scp复制公钥"><a href="#scp复制公钥" class="headerlink" title="scp复制公钥"></a>scp复制公钥</h3><p>方式二，通过 scp 命令直接将该文件远程复制过去，使用这种方式需要注意，如果你之前已经配置了其它服务器上的密钥，这是使用这种方法，就会覆盖掉你原来的密钥，这时候是不建议使用这种方式的，如果你是先将该文件复制到服务器上的一个目录下，然后在使用追加的方式，将密钥追加到 authorized_keys 也是完全 OK 的。如果你只有两台服务器也是可以直接复制到文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 48822  ~/.ssh/id_rsa.pub root@192.168.1.100:~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="手动复制公钥"><a href="#手动复制公钥" class="headerlink" title="手动复制公钥"></a>手动复制公钥</h3><p>方式三，通过手工复制。将本地 id_rsa.pub 文件的内容拷贝至远程服务器的 ~&#x2F;.ssh&#x2F;authorized_keys 文件中也完全可以的。先使用 cat 命令查看当前的公钥，然后复制，在到目标服务器上去粘贴。</p><h2 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h2><p>以上操作是默认你使用win系统操作，如果你使用cmd连接，那么不必添加私钥信息。如果你使用ssh工具，需要添加私钥信息。</p><p>如<code>windterm</code>（身份验证被拒绝是因为我把authorized_keys 的公钥删除了，否则免密登录太快了，根本不现实这个界面，我这里是为了显示这个界面）</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240612105543905.png" alt="image-20240612105543905" style="zoom: 33%;"><p>点击继续，即可免密登录。</p><p>如果你是Linux操作，那么这一步不必执行。</p><h1 id="SSH原理"><a href="#SSH原理" class="headerlink" title="SSH原理"></a>SSH原理</h1><h2 id="密码认证"><a href="#密码认证" class="headerlink" title="密码认证"></a>密码认证</h2><p>简要概括如下：</p><ol><li><p>ssh登录时，为了最大程度保证账户、密码安全，使用非对称加密；</p></li><li><p>登录后，客户端、服务端之间的数据通信，采用随机口令，进行对称加密，因为速度快；</p></li></ol><p>想象一下，客户端是一位想要进入一座高安全大楼的访客，而服务器则是大楼的保安。以下是这个过程的通俗解释和相应的流程图代码：</p><ol><li><strong>访客（SSH客户端）</strong>敲门请求进入（发起登录请求）。</li><li><strong>保安（SSH服务端）</strong>通过窗口递出一张他的名片（公钥）。<ul><li>如果是访客第一次来访，保安会让访客确认他的身份（指纹信息确认）。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">daokun@daokun ~/Desktop</span><br><span class="line">$ ssh root@192.168.1.100</span><br><span class="line">The authenticity of host &#x27;192.168.1.100 (192.168.1.100)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:vjyKCLajbwDmNfuX7Ld9ycWYnad8oxxndE/aVLEH13Y.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.1.100&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.1.100&#x27;s password:</span><br><span class="line">Last login: Thu Feb 10 17:05:25 2022 from 192.168.1.4</span><br><span class="line">[root@daokun ~]#</span><br><span class="line">[root@daokun ~]#</span><br></pre></td></tr></table></figure><ol><li><strong>访客</strong>使用这张名片（公钥）将自己的密码变成一个谜（加密密码）。</li><li><strong>保安</strong>用自己的钥匙（私钥）解开谜团（解密密码）。</li><li><strong>保安</strong>核对访客的密码是否在访客名单上（对比&#x2F;etc&#x2F;shadow文件）。</li><li>如果一切顺利，<strong>保安</strong>会给访客一个访问卡（随机会话口令），以后访客就可以用这个卡自由进出了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant 客户端 as 客户端</span><br><span class="line">participant 服务器 as 服务器</span><br><span class="line">Note over 客户端,服务器: SSH连接过程，非对称加密</span><br><span class="line"></span><br><span class="line">客户端-&gt;&gt;服务器: 1. 发起登录请求</span><br><span class="line">服务器-&gt;&gt;客户端: 2. 发送公钥</span><br><span class="line">Note over 客户端: 首次连接,确认指纹信息</span><br><span class="line">客户端-&gt;&gt;服务器: 3. 使用公钥加密密码</span><br><span class="line">服务器-&gt;&gt;客户端: 4. 使用私钥解密密码</span><br><span class="line">服务器-&gt;&gt;客户端: 5. 核对密码与/etc/shadow</span><br><span class="line">服务器-&gt;&gt;客户端: 6. 返回登录成功与会话口令</span><br><span class="line">Note over 服务器,客户端: 后续命令传输使用对称加密</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基于密钥对的认证"><a href="#基于密钥对的认证" class="headerlink" title="基于密钥对的认证"></a>基于密钥对的认证</h2><p><strong>基于密钥对认证，也就是所谓的免密码登录，理解免密登录原理</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240612114624708.png" alt="image-20240612114624708" style="zoom:67%;"><h1 id="SSH安装"><a href="#SSH安装" class="headerlink" title="SSH安装"></a>SSH安装</h1><h2 id="SSH服务配置"><a href="#SSH服务配置" class="headerlink" title="SSH服务配置"></a>SSH服务配置</h2><h3 id="1、搭建所有服务的套路"><a href="#1、搭建所有服务的套路" class="headerlink" title="1、搭建所有服务的套路"></a>1、搭建所有服务的套路</h3><ul><li>关闭防火墙和selinux(实验环境都先关闭掉)</li><li>配置yum源(公网源或者本地源)</li><li>软件安装和检查</li><li>了解并修改配置文件</li><li>启动服务检查运行状态并设置开机自启动</li></ul><h3 id="2、搭建SSH服务"><a href="#2、搭建SSH服务" class="headerlink" title="2、搭建SSH服务"></a>2、搭建SSH服务</h3><h4 id="（一）关闭防火墙和selinux"><a href="#（一）关闭防火墙和selinux" class="headerlink" title="（一）关闭防火墙和selinux"></a>（一）关闭防火墙和selinux</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 关闭firewalld防火墙</span><br><span class="line"># 临时关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 关闭开机自启动</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 关闭selinux</span><br><span class="line"># 临时关闭</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 修改配置文件  永久关闭</span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h4 id="（二）配置yum源"><a href="#（二）配置yum源" class="headerlink" title="（二）配置yum源"></a>（二）配置yum源</h4><blockquote><p>注意：一般情况下使用网络源即可。</p><p>如果&#x3D;&#x3D;<strong>没有网络</strong>&#x3D;&#x3D;的情况下，才需要配置本地源</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"># yum clean all</span><br><span class="line"># yum makecache</span><br></pre></td></tr></table></figure><h4 id="（三）yum安装"><a href="#（三）yum安装" class="headerlink" title="（三）yum安装"></a>（三）yum安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-server</span><br></pre></td></tr></table></figure><h4 id="（四）服务管理"><a href="#（四）服务管理" class="headerlink" title="（四）服务管理"></a>（四）服务管理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 重启服务</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line"># 查看状态</span><br><span class="line">systemctl status sshd</span><br><span class="line"># 进程查看方式</span><br><span class="line">ps aux |grep sshd</span><br><span class="line"># 端口查看方式</span><br><span class="line">netstat -lntp|grep sshd</span><br><span class="line"></span><br><span class="line"># 开启自启动</span><br><span class="line">systemctl enable sshd</span><br></pre></td></tr></table></figure><h1 id="创建用户和组"><a href="#创建用户和组" class="headerlink" title="创建用户和组"></a>创建用户和组</h1><h2 id="用户和用户组创建"><a href="#用户和用户组创建" class="headerlink" title="用户和用户组创建"></a>用户和用户组创建</h2><h3 id="①添加开发组"><a href="#①添加开发组" class="headerlink" title="①添加开发组"></a>①添加开发组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd devgroup</span><br></pre></td></tr></table></figure><h3 id="②添加用户到用户组中"><a href="#②添加用户到用户组中" class="headerlink" title="②添加用户到用户组中"></a>②添加用户到用户组中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@jumpserver ~]# groupadd devgroup </span><br><span class="line">[root@jumpserver ~]# </span><br><span class="line">[root@jumpserver ~]# </span><br><span class="line">[root@jumpserver ~]# useradd -g devgroup devyu</span><br><span class="line">[root@jumpserver ~]# </span><br><span class="line">[root@jumpserver ~]# id devyu</span><br><span class="line">uid=9662(devyu) gid=9663(devgroup) groups=9663(devgroup)</span><br></pre></td></tr></table></figure><h2 id="使用非交互式设置密码"><a href="#使用非交互式设置密码" class="headerlink" title="使用非交互式设置密码"></a>使用非交互式设置密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jumpserver ~]# echo 123456 |passwd --stdin devyu</span><br><span class="line">Changing password for user devyu.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><h2 id="为开发人员创建数据目录并且设置相应的权限"><a href="#为开发人员创建数据目录并且设置相应的权限" class="headerlink" title="为开发人员创建数据目录并且设置相应的权限"></a>为开发人员创建数据目录并且设置相应的权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@jumpserver ~]# mkdir -p /devyu/data/</span><br><span class="line">[root@jumpserver ~]# </span><br><span class="line">[root@jumpserver ~]# ll -d /devyu/data</span><br><span class="line">drwx-wx-wx 2 root root 6 Feb 10 18:15 /devyu/data</span><br><span class="line"></span><br><span class="line">修改目录属组</span><br><span class="line">[root@jumpserver ~]# chgrp -R devgroup /devyu/</span><br><span class="line"></span><br><span class="line">查看权限</span><br><span class="line">[root@jumpserver ~]# ll -d /devyu</span><br><span class="line">drwx-wx-wx 3 root devgroup 18 Feb 10 18:15 /devyu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置黏滞位，防止other用户，随便删除别人的数据</span><br><span class="line"></span><br><span class="line">加上-R参数，递归该目录下所有的文件夹</span><br><span class="line">[root@jumpserver ~]# chmod -R 1777 /devyu</span><br><span class="line">[root@jumpserver ~]# </span><br><span class="line">[root@jumpserver ~]# ll -d /devyu/*</span><br><span class="line">drwxrwx--T 2 root devgroup 6 Feb 10 18:15 /devyu/data</span><br></pre></td></tr></table></figure><p>参考资料</p><ol><li><a href="https://www.apecome.com/series/XL100123xxxxxx?uname=5e102ce91a1525783c29dd95b06150ae">linux云计算服务器网络安全之ssh原理解密-猿来教育官方网站 (apecome.com)</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置github加速</title>
      <link href="/2024/06/12/Linux%E9%85%8D%E7%BD%AEgithub%E5%8A%A0%E9%80%9F/"/>
      <url>/2024/06/12/Linux%E9%85%8D%E7%BD%AEgithub%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>y</p><p>在Linux下载github的源码或者其他，下载速度缓慢，这个时候可以修改hosts文件来加速，但是加速地址并不固定，故写一脚脚本来测试速度并且设置这个加速地址。如果设置失败就回滚。</p><h1 id="github加速"><a href="#github加速" class="headerlink" title="github加速"></a>github加速</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来回滚 hosts 文件</span></span><br><span class="line"><span class="function"><span class="title">rollback_hosts</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;发生错误，正在恢复原始 hosts 文件...&quot;</span></span><br><span class="line">    <span class="built_in">mv</span> /etc/hosts.backup /etc/hosts</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hosts 文件已恢复。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 nslookup 工具</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v nslookup &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nslookup 命令未找到，正在安装...&quot;</span></span><br><span class="line">    yum -y install bind-utils || &#123; <span class="built_in">echo</span> <span class="string">&quot;安装 bind-utils 失败，脚本退出。&quot;</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 nscd 服务</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v nscd &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nscd 命令未找到，正在安装...&quot;</span></span><br><span class="line">    yum install -y nscd || &#123; <span class="built_in">echo</span> <span class="string">&quot;安装 nscd 失败，脚本退出。&quot;</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 github.global.ssl.fastly.net 和 github.com 的 IP 地址</span></span><br><span class="line">fastly_ip=$(nslookup github.global.ssl.fastly.net | grep <span class="string">&#x27;Address&#x27;</span> | <span class="built_in">tail</span> -n 1 | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class="line">github_ip=$(nslookup github.com | grep <span class="string">&#x27;Address&#x27;</span> | <span class="built_in">tail</span> -n 1 | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 IP 地址是否获取成功</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$fastly_ip</span>&quot;</span> || -z <span class="string">&quot;<span class="variable">$github_ip</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IP 地址获取失败，脚本退出。&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出获取的 IP 地址</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Fastly IP: <span class="variable">$fastly_ip</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GitHub IP: <span class="variable">$github_ip</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份原始的 hosts 文件</span></span><br><span class="line"><span class="built_in">cp</span> /etc/hosts /etc/hosts.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的 IP 地址到 hosts 文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$fastly_ip</span> github.global.ssl.fastly.net&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$github_ip</span> github.com&quot;</span></span><br><span class="line">&#125; &gt;&gt; /etc/hosts || &#123; rollback_hosts; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nscd 服务</span></span><br><span class="line">systemctl start nscd || &#123; <span class="built_in">echo</span> <span class="string">&quot;启动 nscd 服务失败，尝试回滚 hosts 文件。&quot;</span>; rollback_hosts; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 DNS 缓存</span></span><br><span class="line">nscd -i hosts || &#123; <span class="built_in">echo</span> <span class="string">&quot;更新 DNS 缓存失败，尝试回滚 hosts 文件。&quot;</span>; rollback_hosts; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示完成</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GitHub hosts 更新成功。&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用paramiko实现ssh远程登录</title>
      <link href="/2024/05/20/Python%E4%BD%BF%E7%94%A8paramiko%E5%AE%9E%E7%8E%B0ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2024/05/20/Python%E4%BD%BF%E7%94%A8paramiko%E5%AE%9E%E7%8E%B0ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>直接使用csdn博主<a href="https://blog.csdn.net/lixiaomei0623">你若安好我便天晴</a>的博客的内容，其文写的很详细，很清晰，很易懂。</p><p>我在<code>port</code>有一点点修改，允许在调用的更换其他的端口，原作者应该也是想如此，但是忘记写了。</p><p>封装如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, logging</span><br><span class="line"><span class="keyword">from</span> paramiko.client <span class="keyword">import</span> SSHClient, AutoAddPolicy</span><br><span class="line"><span class="keyword">from</span> paramiko <span class="keyword">import</span> AuthenticationException</span><br><span class="line"><span class="keyword">from</span> paramiko.ssh_exception <span class="keyword">import</span> NoValidConnectionsError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SshClient</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ssh_client = SSHClient()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ssh_login</span>(<span class="params">self, host_ip, username,port, password</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 设置允许连接known_hosts文件中的主机（默认连接不在known_hosts文件中的主机会拒绝连接抛出SSHException）</span></span><br><span class="line">            self.ssh_client.set_missing_host_key_policy(AutoAddPolicy())</span><br><span class="line">            self.ssh_client.connect(host_ip, port=port, username=username, password=password)</span><br><span class="line">        <span class="keyword">except</span> AuthenticationException:</span><br><span class="line">            logging.warning(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1001</span></span><br><span class="line">        <span class="keyword">except</span> NoValidConnectionsError:</span><br><span class="line">            logging.warning(<span class="string">&#x27;connect time out&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1002</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1003</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_some_command</span>(<span class="params">self, command</span>):</span><br><span class="line">        stdin, stdout, stderr = self.ssh_client.exec_command(command)</span><br><span class="line">        <span class="built_in">print</span>(stdout.read().decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ssh_logout</span>(<span class="params">self</span>):</span><br><span class="line">        self.ssh_client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    command = <span class="string">&quot;pwd&quot;</span>  <span class="comment"># 自己使用ssh时，命令怎么敲的command参数就怎么写</span></span><br><span class="line">    ssh = SshClient()</span><br><span class="line">    <span class="keyword">if</span> ssh.ssh_login(host_ip=<span class="string">&quot;124.222.83.93&quot;</span>,port=<span class="number">22</span>, username=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;pengh2()&quot;</span>) == <span class="number">1000</span>:</span><br><span class="line">    </span><br><span class="line">        ssh.execute_some_command(command)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ssh.ssh_logout()</span></span><br></pre></td></tr></table></figure><p>参考文章</p><ol><li><a href="https://blog.csdn.net/lixiaomei0623/article/details/123323954">Python—实现ssh客户端（连接远程服务器）_python ssh连接服务器-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell实现指定目录下的指定文件清空</title>
      <link href="/2024/05/20/Shell%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%B8%85%E7%A9%BA/"/>
      <url>/2024/05/20/Shell%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%B8%85%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><code>.log</code>是日志文件，需要清空里面的内容，但是不删除此文件。结构如下：</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240520141413915.png" alt="image-20240520141413915" style="zoom:50%;"><p>需要删除这么多的<code>.log</code>文件，我们使用<code>find</code>命令</p><p>对指定目录下的<code>.log</code>文件查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个脚本会输出/log目录及其子目录中所有.log文件的路径和内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找/log目录及其子目录中所有的.log文件</span></span><br><span class="line"><span class="comment"># 对每一个找到的文件，先输出文件路径，然后输出文件内容</span></span><br><span class="line">find /log -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">echo</span> <span class="string">&quot;文件路径:&quot;</span> &#123;&#125; \; -<span class="built_in">exec</span> <span class="built_in">echo</span> <span class="string">&quot;文件内容:&quot;</span> \; -<span class="built_in">exec</span> <span class="built_in">cat</span> &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有的.log文件的路径和内容已经被输出。&quot;</span></span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240520141353470.png" alt="image-20240520141353470" style="zoom:50%;"><p>对上面的log文件内容清空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个脚本会清空/log目录及其子目录中所有.log文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找/log目录及其子目录中所有的.log文件</span></span><br><span class="line"><span class="comment"># 对每一个找到的文件，使用truncate命令将其大小设置为0，从而清空文件内容</span></span><br><span class="line">find /log -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">truncate</span> --size 0 &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有的.log文件已经被清空。&quot;</span></span><br></pre></td></tr></table></figure><p>再次查看结果：</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240520144548391.png" alt="image-20240520144548391" style="zoom:50%;"><p>最后</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240520141227891.png" alt="image-20240520141227891" style="zoom: 50%;"><p><a href="https://blog.csdn.net/lixiaomei0623/article/details/123323954">Python—实现ssh客户端（连接远程服务器）_python ssh连接服务器-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.9设置定时执行脚本+开机自启脚本</title>
      <link href="/2024/05/16/Centos7-9%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/05/16/Centos7-9%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>有一个<code>a.py</code>文件想要每一个小时运行一次，并且实现开机自启动。</p><h1 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h1><p>要在CentOS 7.9上设置定时执行您的<code>a.py</code>文件，您可以使用<code>crontab</code>。这是一个在Linux系统中用于设置周期性执行任务的工具。以下是您可以遵循的步骤：</p><ol><li><p>首先，确保您的系统已经安装了<code>crontab</code>。您可以通过运行以下命令来安装它（如果尚未安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure></li><li><p>然后，启动并使<code>crond</code>服务在开机时自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> crond</span><br><span class="line">systemctl start crond</span><br></pre></td></tr></table></figure></li><li><p>接下来，使用<code>crontab -e</code>命令编辑<code>crontab</code>文件，为您的<code>a.py</code>文件添加一个定时任务。例如，如果您想每小时执行一次该脚本，可以添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 * * * * /usr/bin/python /path/to/a.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个是我的脚本运行</span></span><br><span class="line">0 * * * * /root/miniconda3/bin/python /root/system_check/user_analysic.py</span><br></pre></td></tr></table></figure><p>请确保将<code>/path/to/a.py</code>替换为您<code>a.py</code>文件的实际路径。</p></li><li><p>保存并退出编辑器。<code>crontab</code>会自动安装您的新定时任务。</p></li><li><p>最后，您可以通过<code>crontab -l</code>命令确认您的定时任务已经正确设置。</p></li></ol><blockquote><p><code>crontab</code>定时任务的格式：</p><ul><li><p><code>0 * * * *</code>：这部分是<code>crontab</code>的时间字段，指定了任务执行的频率。每个星号代表不同的时间单位：</p><ul><li>第一个数字 <code>0</code> 代表分钟，这里设置为 <code>0</code> 表示每小时的第0分钟。</li><li>第二个星号 <code>*</code> 代表小时，可以是从 <code>0</code> 到 <code>23</code> 的任何数字，这里的星号表示每个小时。</li><li>第三个星号 <code>*</code> 代表一月中的日子，可以是从 <code>1</code> 到 <code>31</code> 的任何数字。</li><li>第四个星号 <code>*</code> 代表月份，可以是从 <code>1</code> 到 <code>12</code> 的任何数字。</li><li>第五个星号 <code>*</code> 代表一周中的天数，可以是从 <code>0</code>（代表周日）到 <code>6</code>（代表周六）的任何数字。</li></ul><p>因此，<code>0 * * * *</code> 的意思是每小时的第0分钟执行一次，也就是说，每个整点都会执行一次。</p></li><li><p><code>/usr/bin/python</code>：这是Python解释器的路径，用于执行Python脚本。</p></li><li><p><code>/path/to/a.py</code>：这是您的Python脚本<code>a.py</code>的路径。您需要将其替换为脚本实际所在的路径。</p></li><li><p>每两个小时执行一次：0 *&#x2F;2 * * * &#x2F;usr&#x2F;bin&#x2F;python &#x2F;path&#x2F;to&#x2F;a.py</p></li></ul><p>综上所述，整行代码 <code>0 * * * * /usr/bin/python /path/to/a.py</code> 的意思是：每小时的开始时刻（每个整点），系统会调用 <code>/usr/bin/python</code> 解释器来执行位于 <code>/path/to/a.py</code> 的Python脚本。这是一种自动化执行脚本的常用方法，非常适合定期运行的任务。</p></blockquote><p>Q：如果我的<code>python </code> 不在<code>/usr/bin/python</code>怎么办？</p><p>A：那就要用到以下方法去查询。 在CentOS系统中，您可以通过几种方法来查找Python解释器的路径。以下是一些常用的命令：</p><ol><li><p><strong><code>which</code>命令</strong>：这个命令会在您的PATH环境变量中搜索可执行文件，并返回找到的第一个匹配项的路径。您可以这样使用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure><p>如果您有多个Python版本安装，您可能需要指定版本号，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240516091044207.png" alt="image-20240516091044207"></p></li><li><p><strong><code>whereis</code>命令</strong>：这个命令会搜索系统的标准二进制文件位置、源代码和手册页，并返回所有找到的路径。使用方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis python</span><br></pre></td></tr></table></figure></li><li><p><strong><code>type</code>命令</strong>：这个命令用于显示指定命令的类型。如果是可执行文件，它还会显示其路径。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> -P python</span><br></pre></td></tr></table></figure></li><li><p><strong>Python交互式解释器</strong>：您可以直接在Python交互式解释器中查找<code>sys.executable</code>，这将给出当前Python解释器的完整路径。打开终端，输入<code>python</code>进入Python交互式环境，然后输入以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.executable)</span><br></pre></td></tr></table></figure></li></ol><p>这些方法应该能帮助您找到Python解释器的路径。一旦找到，您就可以在<code>crontab</code>任务中使用正确的路径来执行您的Python脚本了。</p><p>​         </p><h1 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h1><p>要将您的<code>a.py</code>脚本设置为开机自启动，您可以使用以下方法之一：</p><ol><li><p><strong>使用<code>/etc/rc.d/rc.local</code>文件</strong>：</p><ul><li><p>首先，确保<code>/etc/rc.d/rc.local</code>文件具有可执行权限。如果没有，您可以使用以下命令赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li><p>然后，编辑<code>/etc/rc.d/rc.local</code>文件，在文件末尾添加您的脚本启动命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/python /path/to/a.py</span><br></pre></td></tr></table></figure><p>请确保将<code>/path/to/a.py</code>替换为您的脚本实际路径。</p></li></ul></li><li><p><strong>创建一个新的<code>systemd</code>服务</strong>：</p><ul><li><p>创建一个新的服务文件，例如<code>a.service</code>，并将其放置在<code>/etc/systemd/system/</code>目录下。</p></li><li><p>在服务文件中，添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># 这个部分是单元文件的头部，定义了服务的元数据。</span></span><br><span class="line"><span class="attr">Description</span>=My Python Script <span class="comment"># 描述服务的内容，这里是“我的Python脚本”。</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="comment"># 这个部分指定了服务的行为。</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/python /path/to/a.py <span class="comment"># ExecStart指令指定了启动服务时执行的命令。这里它调用Python解释器来运行位于/path/to/a.py的脚本。</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="comment"># 这个部分定义了如何安装这个单元，即如何使它在系统启动时自动启动。</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target <span class="comment"># WantedBy指令告诉systemd在哪个目标（target）下启动这个服务。multi-user.target是多用户的运行级别，适用于没有图形界面的常规服务器环境。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启用服务并设置为开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> a.service</span><br><span class="line">sudo systemctl start a.service</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用<code>chkconfig</code>工具</strong>：</p><ul><li><p>将您的启动脚本放入<code>/etc/rc.d/init.d/</code>目录。</p></li><li><p>赋予脚本可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/rc.d/init.d/a.py</span><br></pre></td></tr></table></figure></li><li><p>使用<code>chkconfig</code>添加到开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig --add a.py</span><br><span class="line">sudo chkconfig a.py on</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>以上方法可以帮助您设置脚本在CentOS 7.9系统开机时自动执行。</p><p>​         </p><p>​        </p><p>​             </p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/89772177">教你如何在Linux下让Python脚本自启动和定时启动！ - 知乎 (zhihu.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s组件和架构的名词解释</title>
      <link href="/2024/05/15/K8s%E7%BB%84%E4%BB%B6%E5%92%8C%E6%9E%B6%E6%9E%84%E7%9A%84%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
      <url>/2024/05/15/K8s%E7%BB%84%E4%BB%B6%E5%92%8C%E6%9E%B6%E6%9E%84%E7%9A%84%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Node和Pod"><a href="#Node和Pod" class="headerlink" title="Node和Pod"></a>Node和Pod</h2><p>下图矩形是node,node包含两个pod。一个是my-app（应用程序）,一个是DB（数据库）</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514162912701.png" alt="image-20240514162912701" style="zoom:33%;"><p>一个node可以由多个pod。</p><p>pod可以放多个容器去运行，但是为了降低耦合度，一般是一个pod里面运行一个容器。</p><h2 id="Service和Ingress"><a href="#Service和Ingress" class="headerlink" title="Service和Ingress"></a>Service和Ingress</h2><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514163238480.png" alt="image-20240514163238480" style="zoom:33%;"><p>pod和pod之间通过IP进行通讯，但是pod死亡以后，新的pod会获取新的ip,那这样的话，就会很复杂，比如上图连接的数据库pod死了，那我又得重新配置，很麻烦。所以这个IP是永久的，不变的。</p><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514164123627.png" alt="image-20240514164123627" style="zoom:33%;"><p>对于自己的应用，我们需要暴露出去，让浏览器能够访问。但是对于数据库内部访问足以，这要暴露出去，不是没事找事吗。</p><p>my-app的外部URL（service）基本都不怎么用,一般用来做测试。暴露出去http:my-app-ip:port是一个网址，例如http:10.1.3.4:80,这样不合适，一般是网址的形式，例如https:my-app.com</p><p>那my-app的请求就先到达Ingress,由ingress去转发。</p><h2 id="Configmap和-Secret"><a href="#Configmap和-Secret" class="headerlink" title="Configmap和 Secret"></a>Configmap和 Secret</h2><h3 id="Configmap"><a href="#Configmap" class="headerlink" title="Configmap"></a>Configmap</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514170357679.png" alt="image-20240514170357679" style="zoom:33%;"><p>你现在DB的service是mongo-db-service,现在你要改了，改成下面的mongo-db。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514170530410.png" alt="image-20240514170530410" style="zoom: 25%;"><p>改了之后可麻烦了，你要重新构建这个应用程序，然后推送到仓库，接着在弄进你的pod。那有没有办法解决这个问题呢？有，那就是<strong>Configmap</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514170923591.png" alt="image-20240514170923591" style="zoom:33%;"><p>你的配置数据，例如数据库的URL那就直接放在<strong>ConfigMap</strong>,如果你要修改的话，可以在<strong>ConfigMap</strong>修改。</p><p><strong>ConfigMap</strong>就是存放外部配置的组件。</p><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>想一个问题，你的数据库账号密码能不能刚在<strong>ConfigMap</strong>呢？</p><p>答案是能！但有安全风险！有安全风险，那怎么办？</p><p>那就放在一个加密的组件<strong>Secret</strong>。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514171535421.png" alt="image-20240514171535421" style="zoom:33%;"><p><strong>Secret</strong>和<strong>ConfigMap</strong>功能差不多，你可以认为是<strong>ConfigMap</strong>的pro max版本。用来存储机密数据。</p><h2 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h2><p>数据存储也是很重要的。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514172019562.png" alt="image-20240514172019562" style="zoom:33%;"><p>看上图的DB会产生一些数据，这些数据在pod重启之后就会“死掉”。数据无价，数据可是很重要的东西。重启就丢掉了。那怎么能行呢？肯定要一个<strong>持久化存储</strong>的东西，这就是<strong>Volumes</strong>。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514232056354.png" alt="image-20240514232056354" style="zoom:33%;"><p><strong>Volumes</strong>基本原理是将硬盘驱动器的物理存储连接到pod，并且可以存储在本地计算机上（也就是可以和pod运行的同一服务器节点上），当然也可以云存储。<strong>Volumes</strong>不属于k8s集群，所以你只需要对它进行外部引用。</p><h2 id="Deployment-and-StatefulSet"><a href="#Deployment-and-StatefulSet" class="headerlink" title="Deployment and StatefulSet"></a>Deployment and StatefulSet</h2><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514232735944.png" alt="image-20240514232735944" style="zoom:50%;"><p>如果my-app这个pod挂掉了，在传统中，需要停机去修复，重新部署，在这期间用户是不能访问应用的。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514233303243.png" alt="image-20240514233303243" style="zoom:33%;"><p>在k8s中，就不一样的，my-app这样的pod多的是，挂掉一个，其他相同的pod顶上。其他节点的my-app(副本)就会去连接service（带有dns功能的持久性静态IP）。</p><p><strong>service</strong>同时也是LoadBlance,可以实现负载均衡。把请求转发到最不忙的pod。</p><p>本节主角还是<strong>Deployment</strong> ，回到主题，既然pod副本多的是，那这些副本是怎么来的呢？你手动一个一个去创建吗？理论和实际都可以，如果有1000个pod呢？那不如直接定义一个蓝图，这个蓝图指定运行该pod的多少副本。这个蓝图组件就是<strong>Deployment</strong> </p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514235210308.png" alt="image-20240514235210308" style="zoom:50%;"><p>这个<strong>Deployment</strong> 是pod的抽象层，使得我们更加方便的去控制pod,与pod交互，复制pod等操作。在实践中，我们主要使用<strong>Deployment</strong> 而不是pod。</p><h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514235821948.png" alt="image-20240514235821948" style="zoom:50%;"><p>DB挂掉之后应用也是不能访问的。那好办，多弄几个副本，使用<strong>Deployment</strong> 去创建一堆DB的副本pod。听起来不错，但是数据库有状态，即数据。这些DB的副本需要访问的相同的共享数据存储，而且需要某种机制来管理哪些部分当前正在写入，哪些部分当前正在存储中读取，以避免数据不一致。这种功能<strong>Deployment</strong> 是做不到的。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515000848596.png" alt="image-20240515000848596" style="zoom: 33%;"><p><strong>StatefulSet</strong>（有状态集）因此而生，就是这些有状态的应用的蓝图。作用和<strong>Deployment</strong> 差不多，也能复制pod,扩展或者缩小pod的规模，且保持数据一致。使用<strong>有状态集</strong>部署数据库应用会比<strong>Deployment</strong> 更难。所以k8s集群外部托管数据库应用也是一种常见的作法。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515001720116.png" alt="image-20240515001720116" style="zoom:50%;"><p>我们现在my-app有两个pod,DB有两个pod，还要两个负载均衡（service）,一种一套(my-app和DB)重新启动或者崩溃，在修复之前，用户依然正常访问，这样就可以避免停机。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>这是一个整体的架构图，看不明白没关系，先放在这里。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240514161115275.png" alt="image-20240514161115275"></p><h2 id="工作节点（从节点）"><a href="#工作节点（从节点）" class="headerlink" title="工作节点（从节点）"></a><strong>工作节点（从节点</strong>）</h2><p>必须三个进程安装<strong>Work Node</strong>：</p><ol><li><strong>Container runtime</strong></li><li><strong>Kubelet</strong></li><li><strong>Kube Proxy</strong></li></ol><p>Work Node才是实际干活的,也就在工作节点。</p><h3 id="Container-runtime"><a href="#Container-runtime" class="headerlink" title="Container runtime"></a><strong>Container runtime</strong></h3><p>首先来看<strong>Container runtime</strong>，这个是用来运行容器的，可以是<strong>docker</strong>,也可以是其他的容器技术。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515174554303.png" alt="image-20240515174554303" style="zoom:50%;"><h3 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h3><p>对<strong>Pod</strong>和下面<strong>Container runtime</strong>的进程进行调度的是<strong>kubelet</strong>,这是k8s本身的进程。</p><p><strong>kubelet</strong>和<strong>Container runtime</strong>不同，它拥有<strong>Container runtime</strong>和工作节点的接口。<strong>kubelet</strong>负责获取配置并且实际运行<strong>Pod</strong>，然后和资源（例如cpu,内存，硬盘）从该节点分配给容器</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515174929020.png" alt="image-20240515174929020" style="zoom:50%;"><h3 id="Kube-Proxy"><a href="#Kube-Proxy" class="headerlink" title="Kube Proxy"></a>Kube Proxy</h3><p>通常k8s集群由多个节点组成，这些节点必须安装Container runtime和kubelet,除此之外，这么多的节点是需要通讯的。而通讯用的是之前的组件service,它也是一个负载均衡器，把请求转发到Pod的第三个进程——<strong>Kube Proxy</strong>。它具有智能转发逻辑，确保通信能以低开销高性能的方式工作。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515175757743.png" alt="image-20240515175757743" style="zoom:50%;"><p>总结，<strong>Work Node</strong>三个进程如下</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515180052061.png" alt="image-20240515180052061" style="zoom:50%;"><h2 id="Master（主节点）"><a href="#Master（主节点）" class="headerlink" title="Master（主节点）"></a>Master（主节点）</h2><p>如何去调度pod?</p><p>如何去监视pod的状态？</p><p>如何重新调度或者重新启动它？</p><p>如果有一台服务器，如何让它加入集群，成为Node并且在这服务器上创建pod或者其他组件?</p><p>答案是<strong>Master Node</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515180833261.png" alt="image-20240515180833261" style="zoom:50%;"><p><strong>Master Node</strong> 有四个进程。</p><h3 id="Api-Server"><a href="#Api-Server" class="headerlink" title="Api-Server"></a>Api-Server</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515180937598.png" alt="image-20240515180937598" style="zoom: 33%;"><p><strong>Api-Server</strong>:</p><ol><li>是集群的大门，网关。获取集群中任何更新的初始请求，是交互的同一接口。</li><li>就像保安一样看住大门，对请求做验证。如果你的请求正常，那么它就把你都请求转发给其他进程。</li></ol><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515211739703.png" alt="image-20240515211739703" style="zoom:33%;"><p>另外一个重要的进程是<strong>Scheduler</strong>。</p><p>负责调度：</p><ol><li>先查看请求的应用程序需要多少资源（多少cpu,多少内存，多少存储空间）</li><li>然后智能调度。<strong>Scheduler</strong>会遍历所有的工作节点<strong>Work Node</strong>，查看每一个<strong>Node</strong>的可用资源。</li><li>当看到<strong>Node</strong>的信息，最不忙或者拥有最多可用资源的时候，就在该<strong>Node</strong>上调度新的<strong>Pod</strong></li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515212544788.png" alt="image-20240515212544788" style="zoom: 33%;"><p>这里要注意的是，<strong>Scheduler</strong>只是决定哪一个<strong>Node</strong>应该被调度，也就是只是决策者，但是不具体执行。实际上执行调度的进程，是从节点的<strong>Kubelet</strong>，<strong>kubelet</strong>从<strong>Scheduler</strong>获取请求</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515213145886.png" alt="image-20240515213145886" style="zoom: 33%;"><h3 id="Controller-manager"><a href="#Controller-manager" class="headerlink" title="Controller manager"></a>Controller manager</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515213506131.png" alt="image-20240515213506131" style="zoom: 50%;"><p><strong>Controller manager</strong> 也是一个很重要的进程。它的作用是检测这些<strong>Node</strong>的状态，然后尽快恢复集群状态。然后向<strong>Scheduler</strong>发送请求，<strong>Scheduler</strong>去计算所需的的资源以及智能调度，然后发消息给<strong>Kubelet</strong>,让它执行。</p><h3 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515214807561.png" alt="image-20240515214807561" style="zoom:50%;"><p>最后一个<strong>Master</strong>进程是<strong>etcd</strong>,是集群状态的键值存储，你可以认为是集群的大脑，集群的状态信息都会保存在<strong>etcd</strong>中</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515214856547.png" alt="image-20240515214856547" style="zoom:50%;"><p><strong>Api-Server</strong> 如何知道集群是否健康？</p><p><strong>Scheduler</strong>如何知道可用资源？</p><p><strong>Controller manager</strong> 如何知道集群状态改变？</p><p>这些集群的的数据都是存储在<strong>etcd</strong>，所以要从<strong>etcd</strong>获取。</p><p><strong>注意etcd只存储k8s集群的信息，用于Master和Work Node进行通讯。业务的数据在Volumes，请不要混淆了！！！</strong></p><p>参考视频：</p><ol><li><p><a href="https://www.youtube.com/watch?v=Krpb44XR0bk&list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC&index=3">Kubernetes Components explained! Pods, Services, Secrets, ConfigMap | Kubernetes Tutorial 14 - YouTube</a></p></li><li><p><a href="https://www.youtube.com/watch?v=umXEmn3cMWY&list=PLy7NrYWoggjziYQIDorlXjTvvwweTYoNC&index=3">Kubernetes Architecture explained | Kubernetes Tutorial 15 (youtube.com)</a></p></li></ol><p>架构图来自：<a href="https://www.bilibili.com/video/BV1Nw4m1U7Xt?p=7&vd_source=197cd9faf9dfebb5668cf8cff4737d21">1.k8s是什么_哔哩哔哩_bilibili</a></p><p>感谢Nana女士的讲解，同时本人的英语水平不高，难免有些翻译错误和理解不到位的地方。请大佬指正，各位大佬阅读后也可移步去上面网址。</p>]]></content>
      
      
      <categories>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通人性化的YAML入门</title>
      <link href="/2024/05/15/%E9%80%9A%E4%BA%BA%E6%80%A7%E5%8C%96%E7%9A%84YAML%E5%85%A5%E9%97%A8/"/>
      <url>/2024/05/15/%E9%80%9A%E4%BA%BA%E6%80%A7%E5%8C%96%E7%9A%84YAML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。</p><p>在线编辑器：<a href="https://www.bejson.com/validators/yaml_editor/">YAML、YML在线编辑器(格式化校验)-BeJSON.com</a></p><h1 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h1><p>YAML 的配置文件后缀为 <strong>.yml</strong>，如：<strong>daokun.yml</strong> 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515143505116.png" alt="image-20240515143505116" style="zoom:50%;"><p>YAML现在很受欢迎，很多的配置文件都是由YAML写的</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515143318031.png" alt="image-20240515143318031" style="zoom:50%;"><p><strong>YAML</strong>和其他语言的对比，对比<strong>XML</strong>和<strong>JSON</strong>更加的简洁，更容易阅读</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515143601857.png" alt="image-20240515143601857" style="zoom: 50%;"><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li><p>大小写敏感</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">daokun:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Daokun:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">daokun</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">  <span class="attr">card:</span></span><br><span class="line">    <span class="attr">BOC:</span> <span class="string">20RMB</span></span><br><span class="line">    <span class="attr">ICBC:</span> <span class="string">15RMB</span></span><br><span class="line">    <span class="attr">ABC:</span> <span class="string">90RMB</span></span><br></pre></td></tr></table></figure></li><li><p>‘#’表示注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这就是一个注释，和python单行注释一样</span></span><br></pre></td></tr></table></figure></li><li><p>一个文件中可以包含多个文件的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　－－－　三个破折号表示一份内容的开始</span></span><br><span class="line"><span class="comment">#  ...   三个小数点表示一份内容的结束（非必需）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第一份内容</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 这是第二份内容</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="对象（Mapping）"><a href="#对象（Mapping）" class="headerlink" title="对象（Mapping）"></a>对象（Mapping）</h2><p>对象：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）</p><p>注意冒号后面要加一个空格！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure><p>支持多层嵌套</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">person1:</span> <span class="string">daokun</span></span><br><span class="line">  <span class="attr">person2:</span> <span class="string">afu</span></span><br></pre></td></tr></table></figure><p>支持<strong>流式风格（ Flow style）</strong>的语法（用花括号包裹，用逗号加空格分隔，类似 JSON）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> &#123; <span class="attr">person1:</span> <span class="string">daokun</span>, <span class="attr">person2:</span> <span class="string">afu</span>&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>问号“?”</strong>声明一个复杂对象，允许你使用多个词汇（数组）来组成键</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey2</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue2</span></span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515151758404.png" alt="image-20240515151758404" style="zoom:50%;"><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>破折号+空格</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">daokun</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">afu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ale</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">piaoke</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">liuzhi</span></span><br></pre></td></tr></table></figure><p>也支持<strong>内联格式（Inline Format）</strong>来表达（用方括号包裹，逗号加空格分隔，类似 JSON）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span> [<span class="string">daokun</span>, <span class="string">afu</span>, <span class="string">ale</span>, <span class="string">piaoke</span>, <span class="string">liuzhi</span> ]</span><br></pre></td></tr></table></figure><p>支持多维数组（<strong>用缩进表示层级关系</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">man:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">afu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">daokun</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">woman:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">linyin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xuanyin</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="纯量（标量）"><a href="#纯量（标量）" class="headerlink" title="纯量（标量）"></a>纯量（标量）</h2><p>纯量（scalars）：单个的、不可再分的值</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串<strong>一般不需要用引号包裹</strong>，但是如果字符串中<strong>使用了反斜杠“\”开头的转义字符就必须使用引号包裹</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strings:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span> <span class="string">world</span> <span class="comment"># 不用引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hello</span></span><br><span class="line">   <span class="string">world</span> <span class="comment"># 拆成多行后会自动在中间添加空格</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;Hello world&#x27;</span> <span class="comment"># 单引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;Hello world&quot;</span> <span class="comment"># 双引号包裹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;world \u263A&quot;</span> <span class="comment"># 使用双引号包裹时支持 Unicode 编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;\x0d\x0a is \r\n&quot;</span> <span class="comment"># 使用双引号包裹时还支持 Hex 编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;He said: &quot;Hello!&quot;&#x27;</span> <span class="comment"># 单双引号支持嵌套&quot;</span></span><br></pre></td></tr></table></figure><p><strong>保留换行(Newlines preserved)</strong></p><blockquote><p>使用<strong>竖线符“ | ”</strong>来表示该语法，每行的缩进和行尾空白都会被去掉，而额外的缩进会被保留</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML</span></span><br><span class="line"><span class="attr">lines:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我是第二行</span></span><br><span class="line"><span class="string">    我是吴彦祖</span></span><br><span class="line"><span class="string">      我是第四行</span></span><br><span class="line"><span class="string">  我是第五行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//</span> <span class="string">JSON</span></span><br><span class="line"><span class="attr">&quot;lines&quot;:</span> <span class="string">&quot;我是第一行\n我是第二行\n  我是吴彦祖\n     我是第四行\n我是第五行&quot;</span></span><br></pre></td></tr></table></figure><p><strong>折叠换行(Newlines folded)</strong></p><blockquote><p>使用<strong>右尖括号“ &gt; ”</strong>来表示该语法，只有空白行才会被识别为换行，原来的换行符都会被转换成空格</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML</span></span><br><span class="line"><span class="attr">lines:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  我是第一行</span></span><br><span class="line"><span class="string">  我也是第一行</span></span><br><span class="line"><span class="string">  我仍是第一行</span></span><br><span class="line"><span class="string">  我依旧是第一行</span></span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><table><thead><tr><th align="center">真</th><th align="center">假</th></tr></thead><tbody><tr><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">Ture</td><td align="center">False</td></tr><tr><td align="center">TRUE</td><td align="center">FALSE</td></tr><tr><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">Yes</td><td align="center">No</td></tr><tr><td align="center">YES</td><td align="center">NO</td></tr></tbody></table><p>另外还支持的标量有整数，浮点数，时间戳。</p><h2 id="引用与合并"><a href="#引用与合并" class="headerlink" title="引用与合并"></a>引用与合并</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>&amp;</strong> 锚点和 ***** 别名，可以用来引用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置afu为daokun的别称</span></span><br><span class="line"><span class="attr">daokun:</span> <span class="string">&amp;afu</span> <span class="comment"># 设置锚点</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">  <span class="attr">work:</span> <span class="string">运维</span></span><br><span class="line"><span class="attr">your_baby:</span> <span class="string">*afu</span> <span class="comment"># 引用锚点</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515155713982.png" alt="image-20240515155713982"></p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>配合<strong>合并标签“&lt;&lt;”</strong>使用可以与任意数据进行合并</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">daokun:</span> <span class="string">&amp;afu</span> <span class="comment"># 添加名为 base 的锚点</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">   <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">   <span class="attr">work:</span> <span class="string">运维</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 添加阿乐的信息</span></span><br><span class="line"><span class="attr">ale:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*afu</span> <span class="comment"># 引用 afu 锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">play</span> <span class="string">with</span> <span class="string">piake</span>  <span class="comment"># 添加额外的属性</span></span><br><span class="line"><span class="attr">piaoke:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*afu</span> <span class="comment"># 引用 afu 锚点，实例化时会自动展开</span></span><br><span class="line">    <span class="attr">gender:</span> <span class="string">人妖</span> <span class="comment"># 覆写 afu 中的属性</span></span><br><span class="line">    <span class="attr">work:</span> <span class="string">无业游民</span></span><br><span class="line">    <span class="attr">skill:</span> <span class="string">play</span> <span class="string">csgo</span> <span class="comment"># 添加额外的属性</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240515160404693.png" alt="image-20240515160404693"></p><p>在线编辑器：<a href="https://www.bejson.com/validators/yaml_editor/">YAML、YML在线编辑器(格式化校验)-BeJSON.com</a></p><p>参考文章和视频：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/145173920">一文看懂 YAML - 知乎 (zhihu.com)</a></li><li><a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML 入门教程 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://www.youtube.com/watch?v=1uFVr15xDGg">Yaml Tutorial | Learn YAML in 18 mins (youtube.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> YAML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux存储专题（一）：GlusterFS</title>
      <link href="/2024/05/14/Linux%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AGlusterFS/"/>
      <url>/2024/05/14/Linux%E5%AD%98%E5%82%A8%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AGlusterFS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>GlusterFS是一个开源的<strong>分布式文件系统</strong>，它允许你将多台服务器的存储资源整合在一起，形成一个大的存储池。这样，你就可以像使用一个单一的大硬盘一样来使用这些服务器的存储资源了。</p><p>官网：<a href="https://www.gluster.org/">Gluster</a></p><p>简单来说，GlusterFS的工作原理是这样的：</p><ol><li><strong>存储池化</strong>：你可以把多台服务器上的硬盘空间集中起来，创建一个统一的存储空间。</li><li><strong>文件系统</strong>：在这个存储池上，GlusterFS提供了一个文件系统，你可以像在本地磁盘上操作文件一样，在这个分布式文件系统上操作文件。</li><li><strong>扩展性</strong>：GlusterFS最大的优点是它的扩展性。当你需要更多的存储空间时，只需要添加更多的服务器即可，无需停机或者复杂的配置。</li><li><strong>高可用性</strong>：GlusterFS通过在不同的服务器上复制数据来提高数据的可用性。即使某台服务器出现故障，你的数据仍然是安全的，因为其他服务器上有备份。</li></ol><p>GlusterFS适用于需要存储大量数据的场景，比如云计算、大数据分析等。它的设计目标是简单易用，同时提供高性能和高可靠性。</p><p>NAS和SAN不能实现在线扩容，没有那么灵活。</p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/349113946">分布式存储之GlusterFS - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/436940079">glusterfs安装配置（保姆级教程） - 知乎 (zhihu.com)</a></li><li><a href="https://gluster-cn.readthedocs.io/zh_CN/latest/Quick-Start-Guide/Quickstart/">gluster-cn.readthedocs.io</a></li></ol><p>​              </p>]]></content>
      
      
      <categories>
          
          <category> Linux存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全:使用Python实现高效的端口扫描器</title>
      <link href="/2024/05/13/Linux%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
      <url>/2024/05/13/Linux%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>nmap是一款非常强大的主机发现和端口扫描工具，而且nmap运用自带的脚本，还能完成漏洞检测，同时支持多平台。</strong></p><p>主要功能有：</p><ol><li><p>检测活在网络上的主机（主机发现）</p></li><li><p>检测主机上开放的端口（端口发现或枚举）</p></li><li><p>检测到相应的端口（服务发现）的软件和版本</p></li><li><p>检测操作系统，硬件地址，以及软件版本</p></li><li><p>检测脆弱性的漏洞（Nmap的脚本）</p></li></ol><p>nmap的相关网站在这里：<a href="https://xael.org/pages/python-nmap-en.html">python-nmap : nmap from python (xael.org)</a>和<a href="https://nmap.org/download.html">Download the Free Nmap Security Scanner for Linux&#x2F;Mac&#x2F;Windows</a></p><h1 id="安装nmap"><a href="#安装nmap" class="headerlink" title="安装nmap"></a>安装nmap</h1><h2 id="安装namp"><a href="#安装namp" class="headerlink" title="安装namp"></a>安装namp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nmap</span><br><span class="line">nmap -version</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240513092920678.png" alt="image-20240513092920678" style="zoom:33%;"><h2 id="安装nmap-python模块"><a href="#安装nmap-python模块" class="headerlink" title="安装nmap python模块"></a>安装nmap python模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-nmap</span><br></pre></td></tr></table></figure><p>相关网站：<a href="https://pypi.org/project/python-nmap/">python-nmap · PyPI</a></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>python-nmap模块实例化</li></ol><p>最常用的是PortScanner类，这个类实现Nmap工具功能的封装。对这个类进行实例化很简单，只需要如下语句便可实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nmap</span><br><span class="line">nm=nmap.PortScanner()</span><br></pre></td></tr></table></figure><p>PortScannerAsync类和PortScanner类的功能相似，但是这个类可以实现异步扫描，对这个类的实例化语句如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nmap</span><br><span class="line">nm=nmap.PortScannerAsync()</span><br></pre></td></tr></table></figure><ol><li>python-nmap中的函数</li></ol><p>首先看一下PortScanner类，这个类中包含了如下几个函数。<br>scan()函数：这个函数的完整形式为scan(self,hosts&#x3D;‘127.0.0.1’,ports&#x3D;None,arguments&#x3D;’-sV’,sudo&#x3D;False),用来对指定目标进行扫描。</p><p>这里面的参数hosts的值为字符串类型，表示要扫描的主机，形式可以是IP地址，例如”192.168.1.1”，也可以是一个域名，例如”<a href="http://www.nmap.org/">www.nmap.org</a>“</p><p>参数ports的值也是字符串类型，表示要扫描的端口。如果要扫描的是单一端口，形式可以为”80”。如果为多个端口，可以用逗号分开，例如”80,443,3389”。如果要扫描的是连续的端口范围，可以用横线，例如“1-5000” 。</p><p>参数arguments的值也是字符串类型，这个参数实际上就是Nmap扫描所用的参数。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-O</td><td>系统扫描</td></tr><tr><td>-V，-v，-D，-d，-p</td><td>debug信息</td></tr><tr><td>–fuzzy</td><td>推测操作系统检测结果</td></tr><tr><td>-sT</td><td>TCP端口扫描（完整三次握手）</td></tr><tr><td>-sU</td><td>UDP端口扫描（不回应可能打开，回应则关闭）</td></tr><tr><td>-sL</td><td>DNS反向解析</td></tr><tr><td>-sS</td><td>隐藏扫描（半开SYN）</td></tr><tr><td>-sP</td><td>发现存活主机（直连arp，非直连TCP80，ICMP）</td></tr><tr><td>-sO</td><td>确定主机协议扫描</td></tr><tr><td>-sW</td><td>对滑动窗口的扫描</td></tr><tr><td>-sA</td><td>TCP ACK扫描</td></tr><tr><td>-sN</td><td>关闭主机扫描（不管是否存活直接扫描）</td></tr><tr><td>-sF</td><td>fin扫描</td></tr><tr><td>-sX</td><td>Xmas扫描（fin psh urg为置位）</td></tr><tr><td>-sI</td><td>完全隐藏（以一个跳板为主机（无流量）扫描另一台主机）</td></tr><tr><td>-sV</td><td>服务器版本</td></tr><tr><td>-sC</td><td>跟安全有关的脚本</td></tr><tr><td>-PN</td><td>扫描自己</td></tr></tbody></table><h1 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> nmap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入主机和端口</span></span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;请输入主机和端口：&quot;</span>)</span><br><span class="line">scan_row = input_data.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(scan_row) != <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入错误，示例：192.168.1.0/24 80,22,443&#x27;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">hosts = scan_row[<span class="number">0</span>]  <span class="comment"># 输入的主机</span></span><br><span class="line">ports = scan_row[<span class="number">1</span>]  <span class="comment"># 输入的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建端口扫描对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    nm = nmap.PortScanner()</span><br><span class="line"><span class="keyword">except</span> nmap.PortScannerError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Nmap 未找到！&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知的错误:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行扫描</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    nm.scan(hosts=hosts, arguments=<span class="string">&#x27;-v -sS -p&#x27;</span> + ports)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;扫描错误:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历扫描主机</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> nm.all_hosts():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Host: <span class="subst">&#123;host&#125;</span> (<span class="subst">&#123;nm[host].hostname()&#125;</span>)&quot;</span>)   <span class="comment"># 输出主机及主机名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;State: <span class="subst">&#123;nm[host].state()&#125;</span>&quot;</span>)   <span class="comment"># 输出主机状态，如up,down</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历协议</span></span><br><span class="line">    <span class="keyword">for</span> proto <span class="keyword">in</span> nm[host].all_protocols():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;协议：<span class="subst">&#123;proto&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取协议的所有扫描端口并排序</span></span><br><span class="line">        lport = <span class="built_in">sorted</span>(nm[host][proto].keys())</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> lport:  <span class="comment"># 遍历端口以及输出端口、状态</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;端口: <span class="subst">&#123;port&#125;</span> \t 状态: <span class="subst">&#123;nm[host][proto][port][<span class="string">&#x27;state&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果如图：</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240513093018355.png" alt="image-20240513093018355" style="zoom:50%;"><p>其中主机支持所有表达方式，如<a href="http://www.qq.com、192.168.1.*、192.168.1.1-20、192.168.1.0/24。端口输入也灵活，如80,22,443、80,22-443。">www.qq.com、192.168.1.*、192.168.1.1-20、192.168.1.0/24。端口输入也灵活，如80,22,443、80,22-443。</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240513101036954.png" alt="image-20240513101036954"></p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/585377081">Nmap使用教程图文教程（超详细） - 知乎 (zhihu.com)</a></li><li>Python自动化运维-第四章-刘天斯</li><li><a href="https://www.cnblogs.com/Yunzhonghe/p/12301153.html">python中的nmap模块（编写扫描器） - _云中鹤 - 博客园 (cnblogs.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全:使用Python构建集中式病毒扫描机制</title>
      <link href="/2024/05/11/Linux%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8Python%E6%9E%84%E5%BB%BA%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/05/11/Linux%E5%AE%89%E5%85%A8-%E4%BD%BF%E7%94%A8Python%E6%9E%84%E5%BB%BA%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Clam AntiVirus（ClamAV）是免费而且开放源代码的防毒软件，软件病毒与病毒库的更新全是社区免费发布。官网地址:<a href="http://www.clamav.net/lang/en">http://www.clamav.net/lang/en</a>。ClamAV目前未系统提供病毒扫描】查杀等服务。pyClamad(<a href="http://xael.org/">http:xael.org</a>)是一个Python第三方模块，可以让Python直接使用ClamAV的守护进程clamd,来实现高校的病毒检测功能。</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><p>pyClamad模块安装方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 一、客户端(病毒扫描源)安装</span><br><span class="line"></span><br><span class="line"># 1 安装epel扩展源</span><br><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line"># 2 安装依赖</span><br><span class="line">yum install -y clamav clamd clamav-update  # 安装相关包</span><br><span class="line">chkconfig --levels 235 clamd on # 添加扫描守护进程clamd系统服务</span><br><span class="line">/usr/bin/freshclam # 更新病毒库，建议配置到crontab定期更新</span><br><span class="line"></span><br><span class="line"># 更新守护进程监听IP配置文件，根据不同环境自行修改监听的IP,&quot;0.0.0.0&quot;为监听所有主机IP。</span><br><span class="line"># sed -i -e &#x27;/^TCPAddr/&#123; s/127.0.0.1/0.0.0.0/;&#125;&#x27; /etc/clamd.conf</span><br><span class="line"></span><br><span class="line">/etc/init.d/clamd start  # 启动扫描进程</span><br><span class="line"></span><br><span class="line"># 3 检查软件版本</span><br><span class="line">which freshclam</span><br><span class="line">freshclam --version</span><br><span class="line"></span><br><span class="line">which clamscan</span><br><span class="line">clamscan --version</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511093633995.png" alt="image-20240511093633995" style="zoom:50%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 扫描当前目录</span><br><span class="line">clamscan --remove ./</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511094909602.png" alt="image-20240511094909602" style="zoom:50%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 2.主控端部署pyClamad环境</span><br><span class="line">pip install pyclamd</span><br></pre></td></tr></table></figure><h1 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511095540495.png" alt="image-20240511095540495"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511101348093.png" alt="image-20240511101348093"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pyclamd</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scan</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,IP,scan_type,file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造方法，参数初始化&quot;&quot;&quot;</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.IP = IP</span><br><span class="line">        self.scan_type = scan_type</span><br><span class="line">        self.file = file</span><br><span class="line">        self.connstr = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.scanresult = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;多进程run方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cd = pyclamd.ClamdNetworkSocket(self.IP,<span class="number">3310</span>)</span><br><span class="line">            <span class="keyword">if</span> cd.ping():  <span class="comment"># 探测连通性</span></span><br><span class="line">                self.connstr = self.IP + <span class="string">&quot; connect [ok]&quot;</span></span><br><span class="line">                cd.reload()  <span class="comment"># 重载calmd病毒库的特征，建议更新病毒库再reload</span></span><br><span class="line">                <span class="keyword">if</span> self.scan_type == <span class="string">&quot;contscan_file&quot;</span>:  <span class="comment"># 选择不同的扫描模式</span></span><br><span class="line">                    self.scanresult = <span class="string">&quot;&#123;0&#125;\n&quot;</span>.<span class="built_in">format</span>(cd.contscan_file(self.file))</span><br><span class="line">                <span class="keyword">elif</span> self.scan_type == <span class="string">&quot;multiscan_file&quot;</span>:</span><br><span class="line">                    self.scanresult = <span class="string">&quot;&#123;0&#125;\n&quot;</span>.<span class="built_in">format</span>(cd.multiscan_file(self.file))</span><br><span class="line">                <span class="keyword">elif</span> self.scan_type == <span class="string">&quot;scan_file&quot;</span>:</span><br><span class="line">                    self.scanresult = <span class="string">&quot;&#123;0&#125;\n&quot;</span>.<span class="built_in">format</span>(cd.scan_file(self.file))</span><br><span class="line">                time.sleep(<span class="number">1</span>)  <span class="comment"># 线程挂起1秒</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.connstr = self.IP + <span class="string">&quot;ping error,exit&quot;</span> <span class="comment"># 连接不通</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>  Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.connstr = self.IP + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line">IPs = [<span class="string">&#x27;192.168.1.0&#x27;</span>,<span class="string">&#x27;192.168.2.1&#x27;</span>]  <span class="comment"># 扫描主机列表</span></span><br><span class="line">scantype = <span class="string">&quot;multiscan_file&quot;</span> <span class="comment"># 选择扫描模式</span></span><br><span class="line">scanfile = <span class="string">&quot;/data/www&quot;</span>  <span class="comment"># 指定扫描路径</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">threadnum = <span class="number">2</span> <span class="comment"># 指定启动线程数</span></span><br><span class="line">scanlist = [] <span class="comment"># 存储扫描Scan类线程对象列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> IPs:</span><br><span class="line">    currp = Scan(ip,scantype,scanfile) <span class="comment"># 创建扫描Scan类对象，参数（IP，扫描模式，扫描路径）</span></span><br><span class="line">    scanlist.append(currp)  <span class="comment"># 追加对象到列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i % threadnum == <span class="number">0</span> <span class="keyword">or</span> i ==<span class="built_in">len</span>(IPs): <span class="comment"># 当到达指定的线程数或者IP列表数后启动、退出线程</span></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> scanlist:</span><br><span class="line">            task.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> scanlist:</span><br><span class="line">            task.join()     <span class="comment"># 等待所有子线程退出，并输出扫描结果</span></span><br><span class="line">            <span class="built_in">print</span>(task.connstr)     <span class="comment"># 打印服务器连接信息</span></span><br><span class="line">            <span class="built_in">print</span>(task.scanresult)      <span class="comment"># 打印扫描结果</span></span><br><span class="line"></span><br><span class="line">        scanlist = []</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511163541427.png" alt="image-20240511163541427" style="zoom:50%;"><ol><li><p><strong>clamd服务未运行</strong>：确保clamd服务在您的服务器上已经启动。您可以使用如下命令来检查服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service clamd status</span><br></pre></td></tr></table></figure><p>如果服务没有运行，您需要启动它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service clamd start</span><br></pre></td></tr></table></figure><p>如果不行,看列表有没有，如果没有，说明没有装好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start 对应服务</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240511170742915.png" alt="image-20240511170742915" style="zoom: 50%;"></li><li><p><strong>clamd配置</strong>：检查clamd服务的配置文件（通常位于<code>/etc/clamd.conf</code>或<code>/etc/clamd.d/scan.conf</code>），确保<code>TCPAddr</code>和<code>TCPSocket</code>选项正确设置。<code>TCPAddr</code>应该设置为服务器的IP地址或<code>0.0.0.0</code>（表示监听所有地址），<code>TCPSocket</code>应该设置为<code>3310</code>。</p></li></ol><p>我出现了上面两个问题，一是相关服务没有开启，而是配置文件仅仅取消注释了IP地址，忽略了<code>TCPSocket</code>应该为<code>3310</code>也要取消注释</p><ul><li>启动clamd@scan扫描服务，服务启动不了的话，可以查看&#x2F;var&#x2F;log&#x2F;clamd.scan</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> clamd@scan</span><br><span class="line">systemctl start clamd@scan</span><br><span class="line">systemctl status clamd@scan</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240512163012217.png" alt="image-20240512163012217" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240512163040525.png" alt="image-20240512163040525" style="zoom:50%;"><h2 id="生成测试病毒样"><a href="#生成测试病毒样" class="headerlink" title="生成测试病毒样"></a>生成测试病毒样</h2><p><code>pyClamd</code>提供了一个<code>EICAR()</code>方法，该方法可以快速生成病毒样本，用于测试。复制文件到扫描目录中：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pyclamd</span><br><span class="line">&gt;&gt;&gt; cd = pyclamd.<span class="title class_">ClamdAgnostic</span>()</span><br><span class="line">&gt;&gt;&gt; cd.<span class="variable constant_">EICAR</span>()</span><br><span class="line">b<span class="string">&#x27;X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*&#x27;</span></span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><blockquote><p>tip：可以看到输出的是一个python字节串。虽然是病毒样本，但是我们并没有去执行它，所以是无害的，大家不要担心机器中毒！！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void = <span class="built_in">open</span>(<span class="string">&#x27;/data/www/EICAR&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(cd.EICAR().decode())</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20240512185434980.png" alt="image-20240512185434980" style="zoom:50%;"><p>参考文章</p><ol><li><p><a href="https://blog.csdn.net/carefree2005/article/details/122705554">Linux之ClamAV杀毒软件YUM安装和使用_yum clamav-CSDN博客</a></p></li><li><p>Python自动化运维-第四章-刘天斯</p></li><li><p><a href="https://www.cnblogs.com/wenghaojie/p/15224317.html">ClamAV（Clam AntiVirus）安装使用 - 紫藤萝的沉默 - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1569680">python 使用ClamAV实现病毒扫-腾讯云开发者社区-腾讯云 (tencent.com)</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/266731354">Linux病毒扫描工具ClamAV（Clam AntiVirus）安装使用 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://blog.csdn.net/stone_fall/article/details/108291549">Centos | Clamav | 启动clamd@scan服务_clamd@scan卸载-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/62e6def1bd2a">基于「ClamAv」通过python进行病毒检测（2）– pyClamd控制clamd详解 - 简书 (jianshu.com)</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Docker搭建MySQL主从同步</title>
      <link href="/2024/01/21/%E9%80%9A%E8%BF%87Docker%E6%90%AD%E5%BB%BAMySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/01/21/%E9%80%9A%E8%BF%87Docker%E6%90%AD%E5%BB%BAMySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">sudo yum remove docker \</span><br><span class="line">&gt;     docker-client \</span><br><span class="line">&gt;     docker-client-latest \</span><br><span class="line">&gt;     docker-common \</span><br><span class="line">&gt;     docker-latest \</span><br><span class="line">&gt;     docker-latest-logrotate \</span><br><span class="line">&gt;     docker-logrotate \</span><br><span class="line">&gt;     docker-engine</span><br><span class="line"></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo &quot;https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo()&quot;</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>关闭docker: systemctl stop docker</p><p>关闭防火墙(或者开放端口)，启动docker ：systemctl stop firewalld</p><p>开启docker：systemctl start docker</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>采用一主二从的方式</p><p>主服务器: 容器名 mysql-master,端口3307</p><p>从服务器1: 容器名 mysql-slave1 ,端口3308</p><p>从服务器2: 容器名 mysql-slave2 ,端口3309</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 创建主从数据库文件夹</span><br><span class="line">mkdir -p /daokunn/mysql/master/conf</span><br><span class="line">mkdir -p /daokunn/mysql/master/data</span><br><span class="line">mkdir -p /daokunn/mysql/slave1/conf</span><br><span class="line">mkdir -p /daokunn/mysql/slave1/data</span><br><span class="line">mkdir -p /daokunn/mysql/slave2/conf</span><br><span class="line">mkdir -p /daokunn/mysql/slave2/data</span><br><span class="line"># 初始化主数据库配置文件</span><br><span class="line">cd /daokunn/mysql/master/conf</span><br><span class="line">touch my.cnf</span><br><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /daokunn/mysql/master/data</span><br><span class="line">character-set-server = utf8</span><br><span class="line">lower-case-table-names = 1</span><br><span class="line"></span><br><span class="line"># 主从复制-主机配置</span><br><span class="line"># 主服务器唯一ID</span><br><span class="line">server-id = 1</span><br><span class="line"># 启用二进制日志</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"># 设置logbin格式</span><br><span class="line">binlog_format = STATEMENT</span><br><span class="line"># 初始化从数据库配置文件</span><br><span class="line">cd /daokunn/mysql/slave1/conf</span><br><span class="line">touch my.cnf</span><br><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line"># 粘贴以下内容</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /daokunn/mysql/slave1/data</span><br><span class="line">character-set-server = utf8</span><br><span class="line">lower-case-table-names = 1</span><br><span class="line"></span><br><span class="line"># 主从复制-从机配置</span><br><span class="line"># 从服务器唯一ID</span><br><span class="line">server-id = 2</span><br><span class="line"># 启用中继日志</span><br><span class="line">relay-log = mysql-relay</span><br><span class="line"># 初始化从数据库配置文件</span><br><span class="line">cd /daokunn/mysql/slave2/conf</span><br><span class="line">touch my.cnf</span><br><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line"># 粘贴以下内容</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /daokunn/mysql/slave2/data</span><br><span class="line">character-set-server = utf8</span><br><span class="line">lower-case-table-names = 1</span><br><span class="line"></span><br><span class="line"># 主从复制-从机配置</span><br><span class="line"># 从服务器唯一ID</span><br><span class="line">server-id = 3</span><br><span class="line"># 启用中继日志</span><br><span class="line">relay-log = mysql-relay</span><br></pre></td></tr></table></figure><h1 id="文件夹授权"><a href="#文件夹授权" class="headerlink" title="文件夹授权"></a>文件夹授权</h1><p><code>chmod -R 777 /daokunn/mysql</code></p><h2 id="搭建主服务器"><a href="#搭建主服务器" class="headerlink" title="搭建主服务器"></a>搭建主服务器</h2><p>在docker里面创建并且启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">-v /daokunn/mysql/master/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /daokunn/mysql/master/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=daokun123 \</span><br><span class="line">--name mysql-master \</span><br><span class="line">mysql:8.0.20</span><br><span class="line">docker start mysql-master</span><br><span class="line"># 查询是否启动成功</span><br><span class="line">docker ps</span><br><span class="line"># 验证是否可以登录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 交互式进入容器</span><br><span class="line">docker exec -it mysql-master /bin/bash</span><br><span class="line"></span><br><span class="line"># 登录（使用构建时指定的密码：123456）</span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"># 这一步是改密码，不改，可以跳过,如果密码提示错误，可以使用这个</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;daokun123&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"> 主数据库创建用户slave并授权</span><br><span class="line"># 创建用户</span><br><span class="line">create user &#x27;slave&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;daokun123&#x27;;</span><br><span class="line"></span><br><span class="line"># 授权</span><br><span class="line">grant replication slave on *.* to &#x27;slave&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 查询server_id值</span><br><span class="line">show variables like &#x27;server_id&#x27;;</span><br><span class="line"></span><br><span class="line"># 也可临时（重启后失效）指定server_id的值（主从数据库的server_id不能相同）</span><br><span class="line">set global server_id = 1;</span><br><span class="line"></span><br><span class="line"># 查询Master状态，并记录File和Position的值</span><br><span class="line">show master status;</span><br><span class="line"># 注意：执行完此步骤后退出主数据库，防止再次操作导致File和Position的值发生变化</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">quit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>slave1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3308:3306 \</span><br><span class="line">-v /daokunn/mysql/slave1/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /daokunn/mysql/slave1/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=daokun123 \</span><br><span class="line">--name slave1 \</span><br><span class="line">mysql:8.0.20</span><br><span class="line">docker run -d \</span><br><span class="line">-p 3366:3306 \</span><br><span class="line">-v /daokunn/mysql/slave2/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /daokunn/mysql/slav2/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=daokun123 \</span><br><span class="line">--name slave2 \</span><br><span class="line">mysql:8.0.31</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超大流量网站的负载均衡</title>
      <link href="/2023/07/29/%E8%B6%85%E5%A4%A7%E6%B5%81%E9%87%8F%E7%BD%91%E7%AB%99%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2023/07/29/%E8%B6%85%E5%A4%A7%E6%B5%81%E9%87%8F%E7%BD%91%E7%AB%99%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="负载均衡介绍"><a href="#负载均衡介绍" class="headerlink" title="负载均衡介绍"></a>负载均衡介绍</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>网络数据访问流量迅速增长</li><li>需要提高不间断24小时服务</li><li>服务器的处理器和内存访问速度的增长远低于网络带宽和应用服务的增长</li><li>传统的单机模式——单点故障</li></ol><h2 id="负载均衡的模式"><a href="#负载均衡的模式" class="headerlink" title="负载均衡的模式"></a>负载均衡的模式</h2><p>分为<strong>垂直扩展</strong>和<strong>水平扩展</strong></p><p><strong>垂直扩展</strong>：表现在技术上。就是把这个任务更加专业的去完成，比如数据库的负载均衡，可以使用读写分离技术，使用数据库缓存，多用这些专业技术去完成我们的目的。</p><p><strong>水平扩展</strong>：表现在业务上，业务拆分。通俗的说就是多叫人去做。比如一个电商网站，用户模块放在一个服务器，订单模块放在一个服务器等等。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729195300716.png" alt="image-20230729195300716"></p><h2 id="负载均衡的工作原理"><a href="#负载均衡的工作原理" class="headerlink" title="负载均衡的工作原理"></a>负载均衡的工作原理</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729195702391.png" alt="image-20230729195702391"></p><h1 id="云负载均衡介绍和使用场景"><a href="#云负载均衡介绍和使用场景" class="headerlink" title="云负载均衡介绍和使用场景"></a>云负载均衡介绍和使用场景</h1><p>SLB是阿里云负载均衡产品的统称，是阿里云提供全托管式在线负载均衡服务。</p><p>使用场景主要分为：</p><ul><li>基于4层（TCP&#x2F;UDP）的<strong>传统负载均衡CLB</strong></li><li>基于7层（HTTP&#x2F;HTTPS）的<strong>应用型负载均衡ALB</strong></li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729200248612.png" alt="image-20230729200248612"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729200405250.png" alt="image-20230729200405250"></p><h2 id="CLB"><a href="#CLB" class="headerlink" title="CLB"></a>CLB</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729200453855.png" alt="image-20230729200453855"></p><h2 id="ALB"><a href="#ALB" class="headerlink" title="ALB"></a>ALB</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729200658153.png" alt="image-20230729200658153"></p><h2 id="CLB和ALB对比"><a href="#CLB和ALB对比" class="headerlink" title="CLB和ALB对比"></a>CLB和ALB对比</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729200841525.png" alt="image-20230729200841525"></p><h2 id="云负载均衡和传统负载均衡对比"><a href="#云负载均衡和传统负载均衡对比" class="headerlink" title="云负载均衡和传统负载均衡对比"></a>云负载均衡和传统负载均衡对比</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729201002628.png" alt="image-20230729201002628"></p><h1 id="云负载均衡的功能"><a href="#云负载均衡的功能" class="headerlink" title="云负载均衡的功能"></a>云负载均衡的功能</h1><p>下面主要是以CLB作为介绍</p><p>CLB的基本功能：</p><ul><li>支持公网或私网类型的负载均衡服务</li><li><strong>流量分发</strong>：当前提供4层（tcp&#x2F;udp）和7层(http&#x2F;https)的负载均衡服务</li><li><strong>流量调度</strong>：支持加权轮询（WRR），加权最小连接数（WLC）转发方式</li><li><strong>会话保持</strong>：在Session的生命周期内，可以将同一个客户端请求转发到同一后端的ECS上</li><li>健康检查：可以对后端ECS监控检查，自动屏蔽异常状态的ECS，恢复后接触屏蔽。</li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729201652511.png" alt="image-20230729201652511"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729201710183.png" alt="image-20230729201710183"></p><h1 id="云负载均衡的高可用"><a href="#云负载均衡的高可用" class="headerlink" title="云负载均衡的高可用"></a>云负载均衡的高可用</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729201941329.png" alt="image-20230729201941329"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202224583.png" alt="image-20230729202224583"></p><h1 id="为网站创建和配置负载均衡"><a href="#为网站创建和配置负载均衡" class="headerlink" title="为网站创建和配置负载均衡"></a>为网站创建和配置负载均衡</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202310139.png" alt="image-20230729202310139"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202356980.png" alt="image-20230729202356980"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202809447.png" alt="image-20230729202809447"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202753583.png" alt="image-20230729202753583"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230729202830556.png" alt="image-20230729202830556"></p>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象存储管理与安全</title>
      <link href="/2023/07/28/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
      <url>/2023/07/28/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E4%B8%8E%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="传统存储"><a href="#传统存储" class="headerlink" title="传统存储"></a>传统存储</h1><h2 id="主机访问存储方式"><a href="#主机访问存储方式" class="headerlink" title="主机访问存储方式"></a>主机访问存储方式</h2><p>DAS</p><p>NAS</p><p>SAN</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728200636610.png" alt="image-20230728200636610"></p><h2 id="存储备份介绍"><a href="#存储备份介绍" class="headerlink" title="存储备份介绍"></a>存储备份介绍</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728200927400.png" alt="image-20230728200927400"></p><h2 id="存储灾备"><a href="#存储灾备" class="headerlink" title="存储灾备"></a>存储灾备</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728201023065.png" alt="image-20230728201023065"></p><h1 id="云存储OSS的基本介绍和使用场景"><a href="#云存储OSS的基本介绍和使用场景" class="headerlink" title="云存储OSS的基本介绍和使用场景"></a>云存储OSS的基本介绍和使用场景</h1><h2 id="云存储的分类"><a href="#云存储的分类" class="headerlink" title="云存储的分类"></a>云存储的分类</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202101166.png" alt="image-20230728202101166"></p><h2 id="阿里云对象存储服务OSS"><a href="#阿里云对象存储服务OSS" class="headerlink" title="阿里云对象存储服务OSS"></a>阿里云对象存储服务OSS</h2><p>对象存储服务(Object Storage Service),是一种面向互联网的分布式存储服务。具有海量，安全，高性能，高可靠，低成本的特点。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202421338.png" alt="image-20230728202421338"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202529239.png" alt="image-20230728202529239"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202744725.png" alt="image-20230728202744725"></p><h3 id="海量文件存储"><a href="#海量文件存储" class="headerlink" title="海量文件存储"></a>海量文件存储</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202918656.png" alt="image-20230728202918656"></p><h3 id="云端数据处理"><a href="#云端数据处理" class="headerlink" title="云端数据处理"></a>云端数据处理</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728202957704.png" alt="image-20230728202957704"></p><h2 id="数据下载加速"><a href="#数据下载加速" class="headerlink" title="数据下载加速"></a>数据下载加速</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728203035929.png" alt="image-20230728203035929"></p><h1 id="云存储OSS基本概述"><a href="#云存储OSS基本概述" class="headerlink" title="云存储OSS基本概述"></a>云存储OSS基本概述</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728203214397.png" alt="image-20230728203214397"></p><h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728203416313.png" alt="image-20230728203416313"></p><h2 id="管理方式"><a href="#管理方式" class="headerlink" title="管理方式"></a>管理方式</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728203617407.png" alt="image-20230728203617407"></p><h1 id="云存储OSS数据的上传下载"><a href="#云存储OSS数据的上传下载" class="headerlink" title="云存储OSS数据的上传下载"></a>云存储OSS数据的上传下载</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728203946559.png" alt="image-20230728203946559"></p><p><strong>方式：</strong></p><ol><li><strong>阿里云控制台</strong></li><li><strong>API</strong><br><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204117825.png" alt="image-20230728204117825"></li><li><strong>SDK</strong><br><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204223290.png" alt="image-20230728204223290"></li></ol><h1 id="图片处理与静态网站托管"><a href="#图片处理与静态网站托管" class="headerlink" title="图片处理与静态网站托管"></a>图片处理与静态网站托管</h1><h2 id="云存储OSS图片处理"><a href="#云存储OSS图片处理" class="headerlink" title="云存储OSS图片处理"></a>云存储OSS图片处理</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204403532.png" alt="image-20230728204403532"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204422959.png" alt="image-20230728204422959"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204459669.png" alt="image-20230728204459669"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204535904.png" alt="image-20230728204535904"></p><h2 id="静态网站托管"><a href="#静态网站托管" class="headerlink" title="静态网站托管"></a>静态网站托管</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204712301.png" alt="image-20230728204712301"></p><h1 id="云存储OSS安全"><a href="#云存储OSS安全" class="headerlink" title="云存储OSS安全"></a>云存储OSS安全</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204755534.png" alt="image-20230728204755534"></p><p>自带跨区域复制，打开此功能，并且是双向的</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204928056.png" alt="image-20230728204928056"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728204941608.png" alt="image-20230728204941608"></p><h2 id="Bucket权限控制"><a href="#Bucket权限控制" class="headerlink" title="Bucket权限控制"></a>Bucket权限控制</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728205034500.png" alt="image-20230728205034500"></p><h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728205117568.png" alt="image-20230728205117568"></p><h2 id="服务端加密存储"><a href="#服务端加密存储" class="headerlink" title="服务端加密存储"></a>服务端加密存储</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728205237058.png" alt="image-20230728205237058"></p><h2 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230728205328433.png" alt="image-20230728205328433"></p>]]></content>
      
      
      <categories>
          
          <category> 云存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库上云迁移</title>
      <link href="/2023/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%BA%91%E8%BF%81%E7%A7%BB/"/>
      <url>/2023/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8A%E4%BA%91%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本次实验的MySQL源数据库在ECS，目标数据库是RDS</p><h1 id="查看源数据库"><a href="#查看源数据库" class="headerlink" title="查看源数据库"></a>查看源数据库</h1><ol><li><p>ssh远程连接ECS</p></li><li><p>登录数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"></span><br><span class="line">Enter password:  （输入<span class="number">123456</span>，输入的密码不会显示）</span><br></pre></td></tr></table></figure></li><li><p>查看源数据库bakery、其中的表customer和product，以及表中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/b71de00c736447c786822f098c0ff307.png" style="zoom:50%;"><p>切换数据库为bakery：</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/df536873510246a9ac273dfff3f3257b.png" style="zoom:50%;"><p>查看表中数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> columns <span class="keyword">from</span> customer;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> columns <span class="keyword">from</span> product;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/36513047d95141988fd547e35d029696.png" style="zoom:67%;"></li></ol><h1 id="建立目标数据"><a href="#建立目标数据" class="headerlink" title="建立目标数据"></a>建立目标数据</h1><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote><p>顶部导航栏处点击 <strong>产品与服务</strong> ，下拉菜单中，<strong>数据库</strong> 中选择 <strong>云数据库RDS版</strong> ，进入阿里云RDS管理控制台。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/61795ee41a064bbaa21e4165d8887dbe.png" alt="img" style="zoom:50%;"><p>进入实验资源 <strong>云数据库RDS实例</strong> 的管理控制台。</p><p>在左侧地址栏，点击 <strong>实例列表</strong></p></blockquote><h2 id="点击管理"><a href="#点击管理" class="headerlink" title="点击管理"></a>点击管理</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/97a94efc60c04eccbc3a347d6eb2d39e.png" style="zoom:67%;"><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/c1e314b5a6fe4f1f9a76883134abdd3c.png" style="zoom:67%;"><p>1）<strong>数据库账号</strong>：请根据 <strong>输入框</strong> 下端的 <strong>命名规则</strong> ，输入 数据库账号名称，例如：<strong>lab_user</strong> 。</p><p>2）<strong>密码账号类型</strong> ：请选择 <strong>普通账号</strong></p><p>3）<strong>密码</strong> ：请根据 <strong>输入框</strong> 下端的 <strong>密码规则</strong> ，输入 密码，例如：<strong>Passw0rd</strong>；</p><p>4）<strong>确认密码</strong>：再次输入创建的密码。</p><p>5）完成如上信息后，点击 <strong>创建</strong> 。</p><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><p>1）点击左侧栏的 <strong>数据库管理</strong> ，进入数据库管理页面。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/8c9766fc15c2469bb4e2652f97700853.png" alt="img" style="zoom:67%;"><p>2）在右侧的 <strong>数据库管理</strong> 页面，点击左上角的 <strong>创建数据库</strong> ，进入创建页面。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/2b29324f554f494fb8efdbb76aac2ba1.png" alt="img"></p><h2 id="数据库-数据库账号关联"><a href="#数据库-数据库账号关联" class="headerlink" title="数据库+数据库账号关联"></a>数据库+数据库账号关联</h2><p>1）<strong>数据库（DB）名称</strong>：请根据 <strong>输入框</strong> 下端的 <strong>命名规则</strong> ，输入 <strong>数据库名称</strong>，例如：lab_db 。</p><p>2）<strong>支持字符集</strong>：默认设为 <strong>utf8</strong> 。</p><p>3）<strong>授权帐号</strong>：选择新建数据库账号 <strong>lab_user</strong>。</p><p>4）完成如上配置信息后，点击底部的 <strong>创建</strong> ，完成数据库的创建。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/57d3491f90c4427db4276ce0a0670542.png" alt="img" style="zoom:67%;"><p>6）在 <strong>数据库管理</strong> 页面中，等待1分钟左右，点击右上角的 <strong>刷新</strong> ，可以查看到数据库 <strong>lab_db</strong> 的 <strong>数据库状态</strong> 为 <strong>运行中</strong> ，且 <strong>绑定账号</strong> 为 新建数据库账号 lab_user 。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/d122bd9d123b4c6aaa3cfc485e2e1f1e.png" alt="img"></p><h1 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h1><p>将ECS的MySQL中的源数据库中的数据迁移到RDS的新建目标数据库 <strong>lab_db</strong>。</p><ol><li>通过如下步骤，进入数据迁移管理页面：</li></ol><p>1）点击左侧地址栏 <strong>实例列表</strong>，然后点击 <strong>数据导入</strong> 。进入 <strong>数据迁移服务</strong> 的管理页面。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/89efe106308f4827aeeb946189c61de6.png" alt="img"></p><p>2）点击左侧栏 <strong>数据迁移</strong> ，进入数据迁移的管理页面。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/f482ba5679624b89844cfa764cd8a956.png" alt="img" style="zoom:50%;"><p>3）点击 <strong>数据迁移</strong> 左上角的 <strong>创建迁移任务</strong> 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/5be049120a4840b2a88d061a16682812.png" alt="img" style="zoom:50%;"><ol start="2"><li>新建一个迁移任务，按照如下步骤，输入 <strong>源库信息</strong> 的配置信息：</li></ol><p>1）<strong>任务名称</strong>：自定义一个名称，以便能找到自己的数据迁移任务。</p><p>2）<strong>数据库类型</strong>：选择 <strong>MySQL</strong> 。</p><p>3）<strong>接入方式</strong>：选择ECS自建数据库</p><p>4）<strong>实例类型</strong>：选择 <strong>有公网IP的自建数据库</strong> 。</p><p>5）<strong>实例地区</strong>：选择 <strong>实验资源</strong> 中分配的 <strong>地域</strong> ，例如：<strong>华东2</strong></p><p>6）<strong>主机名或IP地址</strong>：输入 <strong>实验资源</strong> 中分配的 <strong>MySQL源数据库</strong> ECS实例的 <strong>弹性IP</strong>。</p><p>7）<strong>端口</strong>：使用默认端口号 <strong>3306</strong></p><p>8）<strong>数据库账号</strong>：输入ECS上自建MySQL的 <strong>数据库账号</strong> ，<strong>root</strong>；<strong>数据库密码</strong>：自建MySQL的访问密码，<strong>123456</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/99d78a237534432d86de44a05d298a43.png" alt="img" style="zoom: 67%;"><ol start="5"><li>通过如下步骤，配置迁移任务的 <strong>迁移类型及列表</strong>：</li></ol><p>1）<strong>任务步骤</strong>：选择 <strong>库表结构迁移</strong> 和 <strong>全量迁移</strong></p><p>2）勾选左侧 <strong>迁移对象</strong> 中的本地MySQL数据库中的bakery</p><p>3）点击 <strong>&gt;</strong></p><p>4）数据库 <strong>bakery</strong> 移动到 <strong>已选择对象</strong> 的列表中。</p><p>5）完成如上配置后，点击面的 <strong>下一步高级配置</strong> 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/6213d49fb9564db6b71c5dcf4242352d.png" alt="img" style="zoom:50%;"><p>6）在高级配置页面，直接点击 <strong>下一步保存任务并预检查</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/e6fec454f0de4454947d3a34144259b1.png" alt="img" style="zoom:50%;"><ol start="6"><li><p>等待3秒钟左右，完成预检查，检查结果为 预检查通过100% ，点击 <strong>下一步购买</strong> 。</p><blockquote><p>说明：若预检查未通过，请根据错误提示和如上的操作步骤，核对迁移任务的配置是否正确。</p></blockquote></li><li><p>按照如下内容，购买迁移任务的配置</p><p>1）<strong>链路规格</strong>：选择 <strong>small</strong></p><p>2）勾选 《<strong>数据传输（按量付费）服务条款》</strong></p><p>3）完成如上配置后，点击 <strong>购买并启动</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/460639d71b784c1aa69e4290c79f6c49.png" alt="img" style="zoom:50%;"><p>4）点击<strong>确认</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/c2b1fd24b8cc422b9c8775f3adb3bf54.png" alt="img" style="zoom: 50%;"><p>8.此时，页面迁移任务的状态为 <strong>迁移中</strong> ，等待3-4分钟，状态变为 <strong>已完成</strong> 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/eaca6109db9445668708070d196f3c6f.png" alt="img" style="zoom:50%;"></li></ol><h1 id="查阅迁移结果"><a href="#查阅迁移结果" class="headerlink" title="查阅迁移结果"></a>查阅迁移结果</h1><p>在RDS的管理控制台，查看数据迁移结果。</p><p>1.进入RDS管理控制台。在 <strong>实例列表</strong> 界面中，点击右上角的 <strong>登录数据库</strong> ，进入数据库管理登录界面。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/1aae02b8d0404ddb8ebb75298da944d9.png" alt="img" style="zoom:50%;"><p>● <strong>用户名</strong>：输入新建数据库账号 <strong>lab_user</strong></p><p>● <strong>密码</strong>：输入新建数据库密码 <strong>Passw0rd</strong></p><p>完成后，点击 <strong>登录</strong> 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/dccc3b739126487caf146660c263f2e0.png" alt="img" style="zoom:33%;"><p>进入数据库管理页面，证明数据库迁移成功。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/82f87f77c52a455c9588a2bdeddad14c.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 云数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Serverless进行AIGC绘图创作</title>
      <link href="/2023/07/21/%E5%9F%BA%E4%BA%8EServerless%E8%BF%9B%E8%A1%8CAIGC%E7%BB%98%E5%9B%BE%E5%88%9B%E4%BD%9C/"/>
      <url>/2023/07/21/%E5%9F%BA%E4%BA%8EServerless%E8%BF%9B%E8%A1%8CAIGC%E7%BB%98%E5%9B%BE%E5%88%9B%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="基于Serverless进行AIGC绘图创作"><a href="#基于Serverless进行AIGC绘图创作" class="headerlink" title="基于Serverless进行AIGC绘图创作"></a>基于Serverless进行AIGC绘图创作</h1><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><ol><li>前往<a href="https://fcnext.console.aliyun.com/overview">函数计算控制台</a>。</li><li>在左侧导航栏中，单击<strong>应用</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_5fbea9ad2d164fda9422b3dae4bf5478.png" alt="img"></p><p><strong>注意：</strong>如果您之前使用过应用中心，在单击<strong>应用</strong>之后出现类似于下面的页面，此时您可以单击<strong>创建应用</strong>继续流程。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/4b52d0f0f95b486a97ea3503a3d437e2.png" alt="img"></p><ol start="3"><li>在单击<strong>应用&#x2F;创建应用</strong>之后，您可以看到应用列表。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_f7ff42fea44e4563bf215deea9c4d261.png" alt="img"></p><ol start="4"><li>在<strong>应用</strong>页面，搜索并选择<strong>AI数字绘画stable-diffusion</strong>，单击<strong>立即创建</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_0dc28e03bfd044ab8e0d21e655587cd0.png" alt="img"></p><ol start="5"><li>在<strong>创建应用</strong>页面，选择直接部署。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_3382a63623a84cb986cc7f888f5bfd09.png" alt="img"></p><ol start="6"><li>此时还需要关注页面上角色名称部分，例如：</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/621fa484aebf418ba8489638fe9b1d0f.png" alt="img"></p><p>此时需要单击前往授权进行授权，授权完成可能会提示：</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/64cc873093b94fb79d9a49a692643e18.png" alt="img"> <strong>说明：</strong>如果您的角色名称已有相关权限，可忽略此步骤。</p><ol start="7"><li>选择地域，应用可支持部署地域为北京、杭州、上海、深圳，请选择任意一地域。</li></ol><p><strong>说明：</strong>如遇部署异常，特别是AIGC公共镜像拉取耗时长&#x2F;失败问题，请切换其他地域重试。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_1fc1cafcac9b41129fb5c4225588d392.png" alt="img"></p><ol start="8"><li>选择绘图类型，内置了 <strong>Stable Diffusion 1.5, 动漫风格，真人风格</strong> 类型，您可以根据需要进行选择</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_68332caf453c476b87a56b6d0637b459.png" alt="img"></p><p>本应用模版使用Stable Diffusion 的docker镜像部署，为方便您的体验，本实验提供基于社区开源项目构建的镜像。</p><p><strong>说明：</strong>本次实验提供的镜像是由Serverless Devs开源项目贡献者贡献的基于<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui%EF%BC%89">stable-diffusion-webui</a>构建，仅供您体验使用。您也可以使用自己的Stable Diffusion镜像，构建方法详情请参见<a href="https://github.com/devsapp/fc-stable-diffuson#6-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%B9%B6%E4%BD%BF%E7%94%A8stable-diffusion-webui-%E9%95%9C%E5%83%8F">如何构建并使用stable-diffusion-webui-镜像</a>。</p><ol start="9"><li>如无特殊需求，<strong>以下设置保持不变</strong></li></ol><ul><li>启用 WebUI 模式</li><li>WebUI 鉴权</li><li>启用 API 模式</li><li>API 鉴权</li><li>Stable Diffusion 参数</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_7bb1c22837a644739dd4ec8bdb166169.png" alt="img"></p><ol start="10"><li>完成之后，单击页面最下面的<strong>创建并部署默认环境</strong>。</li></ol><p><strong>注意：部署应用之后会产生函数计算资源使用费用，计费情况详情请参考</strong><a href="https://help.aliyun.com/document_detail/54301.html"><strong>计费概述</strong></a><strong>。</strong></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_5db35bd0386e41368dae9109d759acfa.png" alt="img"></p><ol start="11"><li>活动应用创建提醒，阅读后，勾选“已知当前收费项”，继续部署</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_8cbcb3eaf126445196542d99e365d846.png" alt="img"></p><ol start="12"><li>在基本信息页面，单击<strong>部署版本</strong>。</li></ol><p><strong>说明：</strong>大约需要等待1~2分钟。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_5872cfbd8f63469882114418c1aa1976.png" alt="img"></p><ol start="13"><li>在<strong>部署版本</strong>页面，请您耐心等待<strong>部署状态</strong>变为部署成功，在部署时您也可以查看日志观察应用部署情况。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_44a3596bac8c48b0b413364d62e8e71c.png" alt="img"></p><ol start="14"><li>检查GPU函数（sd-server）的镜像加速准备状态，函数计算提供的镜像加速能力专门为AI&#x2F;GPU大镜像进行启动优化，请当镜像加速准备状态处于<strong>可用</strong>后，再开始进行函数调用。</li></ol><ul><li>14.1 在<strong>基本信息</strong>页面，单击<strong>环境名称</strong>。</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_c23f105d3fcc44499a469f3d49b66d5b.png" alt="img"></p><ul><li>14.2 在<strong>环境详情</strong>页面的<strong>资源信息</strong>区域中，单击<strong>函数名</strong>（具体函数名根据您在创建时填写的参数生成）</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_e00cb39bf363428b82e6d080f6ad1b25.png" alt="img"></p><ul><li>14.3 在<strong>函数sd-server详情</strong>页面的<strong>环境信息</strong>区域，检查镜像加速准备状态，请您耐心等待镜像加速准备状态变为<strong>可用</strong>。</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_107ea6b6c10e4942ab32ef8480a2bfe3.png" alt="img"></p><ol start="15"><li>镜像加速准备状态变为可用后，返回到应用的基本信息页面。在<strong>基本信息</strong>页面，单击<strong>访问域名</strong>中的第一个域名，进入程序加载页面。请您稍等片刻，等待程序加载完成。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_785bda66af9844578914a88b6dcae44a.png" alt="img"></p><ol start="16"><li>加载完成之后，返回如下页面，表示您已成功进入Stable Diffusion WebUI的操作界面。<strong>我们已为您预置了默认的提示词，协助你快速生成第一张图片</strong></li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_da20b82a1a354b20a4a64c0869e4db7b.png" alt="img"></p><h2 id="使用文字生成图片"><a href="#使用文字生成图片" class="headerlink" title="使用文字生成图片"></a>使用文字生成图片</h2><p>生成图片的操作方式非常简单，只需要在左侧的<strong>Prompt</strong>输入框中填入提示词，之后单击右侧的<strong>Generate</strong>按钮即可。</p><p>提示词就是生成图片的依据，既可以是描述需要生成内容的词，如：girl, sunset, forest 等；也可以是用于是描述图像属性的词，如：best quality, beautiful, masterpiece 等。我们甚至可以通过提示词选择图片生成的视角、光线、画风；人物的姿势、着装、表情；背景的内容等。</p><p>我们建议您加上画风描述词，让您的图片更加美观，如：Cyberpunk（赛博朋克），shinkai makoto（新海诚），Ghibli Studio（吉卜力），Paul Gauguin（梵高）等等</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_164644cae3534a02950dd5dedafaf5e7.png" alt="img"></p><p>在图片生成的过程中，我们可以在页面上看到生成过程的中间图片逐渐变得清晰。同时，也可以通过进度条直观的了解图片生成的进度和预估剩余时间。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_8e87f61cf5e3416fb2ade90ede03579a.png" alt="img"></p><p><strong>示例：</strong></p><p>在<strong>文生图</strong>输入框中，填入<strong>中文&#x2F;英文</strong>提示词，然后单击 <strong>生成</strong></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_b19babe32f234abfbe26e798cf795fc2.png" alt="img"></p><p>您也可以选择已经配置好的提示词，生成更符合要求的图片<img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_71912db682cc45baa8ca0a0a57bf78c4.png" alt="img"></p><p>生成新图</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/md3gyqvkgd26g_0b16ecab7a53445dabc5e7a920fbc811.png" alt="img"></p><h2 id="计费参考"><a href="#计费参考" class="headerlink" title="计费参考"></a>计费参考</h2><p>小明使用函数计算部署了 Stable Diffusion 大约要消耗多少函数计算资源呢？</p><p>函数计算配置：GPU 16 GB、vCPU 8 核、内存 32 GB</p><p>一、首次生成一张图所耗费的资源（冷启动）：</p><p>GPU费用 &gt;&gt;&gt; 16*(60+5) &#x3D; 1040 GB-S</p><p>CPU费用 &gt;&gt;&gt; 8*(60+5) &#x3D; 520</p><p>内存费用&gt;&gt;&gt; 32*(60+5) &#x3D; 2080 GB-S</p><p>其中：60秒冷启动，5秒生成一张图。</p><p>二、后续生成一张图所耗费的资源（热启动）：</p><p>GPU费用 &gt;&gt;&gt; 16*(5) &#x3D; 80 GB-S</p><p>CPU费用 &gt;&gt;&gt; 8*5 &#x3D; 40</p><p>内存费用 &gt;&gt;&gt; 32*5 &#x3D; 160 GB-S</p><p>其中：5s秒生成一张图。</p><p>三、假如小明0元购买了免费试用包，或老客专享资源包</p><p>资源包额度为：</p><p>vCPU试用额度：前50万vCPU*秒vCPU资源使用免费。</p><p>内存试用额度：前100万GB*秒内存资源使用免费。</p><p>函数调用试用额度：前400万次函数调用免费。</p><p>GPU试用额度：前10万GB*秒GPU资源使用免费。</p><p>那么小明可以生成的图片数量估计为：</p><p>GPU试用额度可生成图片数量：&gt;&gt;&gt; 100000&#x2F;80 &#x3D; 1250张</p><p>CPU试用额度可生成图片数量：&gt;&gt;&gt; 500000&#x2F;40 &#x3D; 12500张</p><p>内存试用额度可生成图片数量：&gt;&gt;&gt; 1000000&#x2F;160 &#x3D; 6250张</p><p>最终小明在免费使用额度，可以免费生成1250张图。</p><ul><li><strong>注意1：</strong>当小明领取了新人函数计算资源包后，可以免费使用104分钟sd-webui，<strong>超出104分钟后将开始付费</strong>。</li><li><strong>注意2</strong>：当小明无须SD-WEBUI生成图片时，请及时关闭SD-WEBUI使用界面！！！进入SD-WEBUI使用界面就会产生计费，无论是否生成图片。</li></ul><h2 id="释放函数资源"><a href="#释放函数资源" class="headerlink" title="释放函数资源"></a>释放函数资源</h2><ol><li>在<strong>应用</strong>页面，找到您部署的应用，单击右侧操作列下的<strong>删除</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_703737ae10214d0eba60f1fd66aa62aa.png" alt="img"></p><ol start="2"><li>在<strong>删除应用</strong>对话框中，选择<strong>我一确定资源删除的风险，依旧要删除上面已选择的资源</strong>，然后单击<strong>删除应用及所选资源</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_e4a3ed864cdb45299d7bc45990d0c70d.png" alt="img"></p><h1 id="容器服务Serverless版ASK快速入门：在线魔方应用部署和监控"><a href="#容器服务Serverless版ASK快速入门：在线魔方应用部署和监控" class="headerlink" title="容器服务Serverless版ASK快速入门：在线魔方应用部署和监控"></a>容器服务Serverless版ASK快速入门：在线魔方应用部署和监控</h1><h2 id="部署并公开应用"><a href="#部署并公开应用" class="headerlink" title="部署并公开应用"></a>部署并公开应用</h2><p>本步骤指导您如何在ASK集群中快速部署一个无状态应用（Deployment），即魔方游戏，并将该应用向公网公开。关于创建Deployment的详细参数描述，请参见<a href="https://help.aliyun.com/document_detail/87784.htm#task-p2s-2rl-vdb">创建无状态工作负载Deployment</a>。</p><ol><li>双击打开虚拟桌面的<strong>Chromium网页浏览器</strong>，在RAM用户登录框中单击<strong>下一步</strong>，复制<strong>云产品资源</strong>列表中<strong>子用户密码，</strong>粘按<strong>CTRL+V</strong>把密码粘贴到密码输区，登陆子账户（<strong>后续在远程桌面里的粘贴操作均使用CTRL + V快捷键</strong>）。</li><li>进入容器服务控制台，复制容器服务管理控制台地址，在<strong>浏览器</strong>打开新页签，粘贴并访问容器服务管理控制台。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cs.console.aliyun.com/</span><br></pre></td></tr></table></figure><ol start="3"><li>在<strong>集群列表</strong>页面中，根据<strong>云产品资源</strong>列表中Kubernetes容器服务集群的地域和<strong>K8s集群ID</strong>信息。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_b10b48be93ba4d5794a4adce9befa8dc.png" alt="img"></p><ol start="4"><li>复制集群ID信息，进入容器服务控制台，选择 ID 并粘贴复制集群ID内容，进行搜索即可找到对应的Kubernetes容器服务集群资源，单击目标<strong>集群名称</strong>。</li></ol><p><strong>说明：</strong>您可在<strong>云产品资源</strong>列表中查看到云起实验室分配的Kubernetes容器服务集群资源。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_30396dcc3c7b4ecfb927a7d752e49b9d.png" alt="img"></p><ol start="5"><li>在集群管理页左侧导航栏中，选择<strong>工作负载&gt;无状态</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_5fd10da9000249f0809a369689a965d3.png" alt="img"></p><ol start="6"><li>在<strong>无状态</strong>页面中，单击<strong>使用镜像创建</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_22f129299c334e8898a659b28197ddd4.png" alt="img"></p><ol start="7"><li>在<strong>应用基本信息</strong>页签，设置应用名称，例如cube，单击<strong>下一步</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_8270b55953b7437f92373fd539d2535d.png" alt="img"></p><ol start="8"><li>在<strong>容器配置</strong>页签，依次设置<strong>镜像名称</strong>、<strong>镜像Tag</strong>、<strong>资源限制</strong>、<strong>所需资源</strong>和<strong>端口</strong>，单击<strong>下一步</strong>。</li></ol><p>参数说明：</p><ul><li><strong>镜像名称</strong>：输入下方内容。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.cn-hangzhou.aliyuncs.com/acr-toolkit/ack-cube</span><br></pre></td></tr></table></figure><ul><li><strong>镜像Tag</strong>：单击<strong>选择镜像Tag</strong>选择镜像的版本。若不指定，默认为最新版。示例：1.0。</li><li><strong>所需资源：</strong>选择 CPU为1Core，内存为2GB。</li><li><strong>端口</strong>：新增一个端口，然后设置容器的端口，输入名称cube，容器端口80，协议TCP。</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_5580c32a03924f349bf7f5e56e8b9910.png" alt="img"></p><ol start="9"><li>在<strong>高级配置</strong>页签，单击服务（Service）右侧的<strong>创建</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_1d59da108820401d9d049335bda79213.png" alt="img"></p><ol start="10"><li>在<strong>创建服务</strong>对话框中，设置服务的相关参数，单击<strong>创建</strong>，以通过该服务公开应用。</li></ol><p>参数说明：</p><ul><li><strong>名称：</strong>输入服务的名称。示例：cube-svc。</li><li><strong>类型</strong>：选择<strong>负载均衡</strong>&gt;<strong>公网访问</strong>&gt;<strong>新建SLB</strong>。</li><li><strong>服务端口</strong>：设置服务端口为80。</li><li><strong>容器端口：</strong>设置服务端口为80。</li></ul><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_80425acc3e47474ab5879a4b1e39c4bd.png" alt="img"></p><p>创建完Service服务后，点击下方 <strong>创建</strong> 按钮。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_f2458ab96fdc498fb851e11abd0b5e26.png" alt="img"></p><p>返回如下页面，表示应用创建成功，单击<strong>查看应用详情</strong>。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_566656a7414240d6abbbcd1d059d6bbe.png" alt="img"></p><ol start="11"><li>在应用详情页面，您可以查看应用的容器组、访问方式、事件、容器伸缩、历史版本、日志和触发器等信息。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_7ccb624a14644b5f9be79be53c1a76db.png" alt="img"></p><h2 id="测试应用"><a href="#测试应用" class="headerlink" title="测试应用"></a>测试应用</h2><p>完成以上操作后，您已经成功搭建了在线魔方游戏。本步骤指导您如何通过服务（Service）来访问新部署的容器化应用。</p><ol><li>切换回容器服务管理控制台页签。在左侧导航栏中，选择<strong>网络&gt;服务</strong>，在服务列表页面，找到新创建的服务（即cube-svc），记录<strong>外部端点</strong>列的IP地址。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/y4dn6eatoa22k_bcd0b9c889d945cbaae209ded7f7ae4e.png" alt="img"></p><ol start="2"><li>打开您本机的浏览器，在地址栏中输入并访问外部端点列的IP地址，您即可体验魔方游戏。</li></ol><p><strong>说明：</strong>需要在本地浏览器访问查看哦。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/45b2e291e0fb4fd1a2658591f0ff4d3f.png" alt="img"></p><h2 id="监控运用"><a href="#监控运用" class="headerlink" title="监控运用"></a>监控运用</h2><p>本步骤指导您如何监控应用的运行状况，如CPU利用率、内存利用率、网络I&#x2F;O压力等指标。</p><ol><li>切换回<strong>容器服务管理</strong>控制台页签。在左侧导航栏中，选择<strong>运维管理&gt;Prometheus监控</strong>。</li><li>在<strong>Prometheus监控</strong>页面，单击<strong>应用监控&gt;无状态应用监控</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_8ad4a00bfe1741a487fba0f95e9b3d71.png" alt="img"></p><ol start="3"><li>在<strong>无状态应用监控</strong>页签，选择<strong>namespace</strong>为<strong>default</strong>，选择<strong>deploymen</strong>t为<strong>cube</strong>。</li></ol><p>您可以查看应用的资源使用情况，包括创建应用时所设置的资源阈值，所需资源（对应图中request）。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_305cdd60305a40f0962cb086126687b9.png" alt="img"></p><ol start="4"><li>在<strong>无状态应用监控</strong>页签，单击<strong>集群Pod监控</strong>。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_2327fcfc0dba4c28a26f30caa1e9b585.png" alt="img"></p><ol start="5"><li>在<strong>集群Pod监控</strong>页签，选择<strong>namespace</strong>为default，选择<strong>Pod</strong>为您需要监控的Pod。</li></ol><p>您可以查看单个Pod的资源使用情况。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_d1e7e5363a164c3792e15ebad9993143.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ChatGPT自动化办公</title>
      <link href="/2023/07/17/%E4%BD%BF%E7%94%A8ChatGPT%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/"/>
      <url>/2023/07/17/%E4%BD%BF%E7%94%A8ChatGPT%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文章主要内容是:<br>ChatGPT编写VBA程序<br>格式转换问题(批量转换.xls–&gt;xlsx .csv–&gt;xlsx .doc–&gt;.docx .ppt–&gt;.pptx ppt–&gt;pdf)</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><a href="https://ai.minihuo.com/">ChatGPT–镜像</a>或者new-bing</p><p>Office 2019（或者其他版本，不要太老）</p><h1 id="ChatGPT编写VBA程序"><a href="#ChatGPT编写VBA程序" class="headerlink" title="ChatGPT编写VBA程序"></a>ChatGPT编写VBA程序</h1><p>先在设置中把开发工具全选</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717214210155.png" alt="image-20230717214210155"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717214611831.png" alt="image-20230717214611831"></p><p>然后在开发者工具</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717214210155.png"></p><p>第一个代码</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> SayHello()</span><br><span class="line">    MsgBox <span class="string">&quot;你好！&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717214711301.png" alt="image-20230717214711301"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717214728629.png" alt="image-20230717214728629"></p><h1 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h1><h2 id="批量-xls–-gt-xlsx"><a href="#批量-xls–-gt-xlsx" class="headerlink" title="批量.xls–&gt;.xlsx"></a>批量.xls–&gt;.xlsx</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230717215358946.png" alt="image-20230717215358946"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Sub ConvertXLS2XLSX()</span><br><span class="line">    Dim strPath As String, strFile As String</span><br><span class="line">    Dim wb As Workbook</span><br><span class="line">    </span><br><span class="line">    &#x27;选择文件夹路径</span><br><span class="line">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        .Title = &quot;选择文件夹&quot;</span><br><span class="line">        .Show</span><br><span class="line">        </span><br><span class="line">        If .SelectedItems.Count &gt; 0 Then</span><br><span class="line">            strPath = .SelectedItems(1) &amp; &quot;\&quot;</span><br><span class="line">        Else</span><br><span class="line">            MsgBox &quot;未选择文件夹！&quot;, vbExclamation</span><br><span class="line">            Exit Sub</span><br><span class="line">        End If</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27;处理文件夹中的xls文件</span><br><span class="line">    strFile = Dir(strPath &amp; &quot;*.xls&quot;)</span><br><span class="line">    Do While strFile &lt;&gt; &quot;&quot;</span><br><span class="line">        Set wb = Workbooks.Open(strPath &amp; strFile)</span><br><span class="line">        wb.SaveAs Replace(wb.FullName, &quot;.xls&quot;, &quot;.xlsx&quot;), FileFormat:=xlOpenXMLWorkbook</span><br><span class="line">        wb.Close SaveChanges:=False</span><br><span class="line">        </span><br><span class="line">        strFile = Dir</span><br><span class="line">    Loop</span><br><span class="line">    </span><br><span class="line">    MsgBox &quot;转换完成！&quot;, vbInformation</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>上述代码会弹出一个对话框用于选择包含要转换的xls文件的文件夹。然后，它会遍历文件夹中的每个xls文件，并将其另存为xlsx格式文件。转换完成后，会有一个消息框提示转换完成。请注意，这段代码只能处理一个文件夹中的xls文件，不会递归子文件夹。</p><h2 id="批量-CSV-gt-xlsx"><a href="#批量-CSV-gt-xlsx" class="headerlink" title="批量.CSV-&gt;.xlsx"></a>批量.CSV-&gt;.xlsx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Sub ConvertCSV2XLSX()</span><br><span class="line">    Dim strPath As String, strFile As String</span><br><span class="line">    Dim wb As Workbook</span><br><span class="line">    </span><br><span class="line">    &#x27;选择文件夹路径</span><br><span class="line">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        .Title = &quot;选择文件夹&quot;</span><br><span class="line">        .Show</span><br><span class="line">        </span><br><span class="line">        If .SelectedItems.Count &gt; 0 Then</span><br><span class="line">            strPath = .SelectedItems(1) &amp; &quot;\&quot;</span><br><span class="line">        Else</span><br><span class="line">            MsgBox &quot;未选择文件夹！&quot;, vbExclamation</span><br><span class="line">            Exit Sub</span><br><span class="line">        End If</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27;处理文件夹中的csv文件</span><br><span class="line">    strFile = Dir(strPath &amp; &quot;*.csv&quot;)</span><br><span class="line">    Do While strFile &lt;&gt; &quot;&quot;</span><br><span class="line">        Set wb = Workbooks.Open(strPath &amp; strFile, Local:=True)</span><br><span class="line">        wb.SaveAs Replace(wb.FullName, &quot;.csv&quot;, &quot;.xlsx&quot;), FileFormat:=xlOpenXMLWorkbook</span><br><span class="line">        wb.Close SaveChanges:=False</span><br><span class="line">        </span><br><span class="line">        strFile = Dir</span><br><span class="line">    Loop</span><br><span class="line">    </span><br><span class="line">    MsgBox &quot;转换完成！&quot;, vbInformation</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>上述代码会弹出一个对话框用于选择包含要转换的csv文件的文件夹。然后，它会遍历文件夹中的每个csv文件，并将其另存为xlsx格式文件。转换完成后，会有一个消息框提示转换完成。请注意，这段代码只能处理一个文件夹中的csv文件，不会递归子文件夹。</p><h2 id="批量-doc–-gt-docx"><a href="#批量-doc–-gt-docx" class="headerlink" title="批量.doc–&gt;.docx"></a>批量.doc–&gt;.docx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Sub ConvertDOC2DOCX()</span><br><span class="line">    Dim strPath As String, strFile As String</span><br><span class="line">    Dim objWord As Object</span><br><span class="line">    </span><br><span class="line">    &#x27;选择文件夹路径</span><br><span class="line">    With Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        .Title = &quot;选择文件夹&quot;</span><br><span class="line">        .Show</span><br><span class="line">        </span><br><span class="line">        If .SelectedItems.Count &gt; 0 Then</span><br><span class="line">            strPath = .SelectedItems(1) &amp; &quot;\&quot;</span><br><span class="line">        Else</span><br><span class="line">            MsgBox &quot;未选择文件夹！&quot;, vbExclamation</span><br><span class="line">            Exit Sub</span><br><span class="line">        End If</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27;处理文件夹中的doc文件</span><br><span class="line">    strFile = Dir(strPath &amp; &quot;*.doc&quot;)</span><br><span class="line">    Do While strFile &lt;&gt; &quot;&quot;</span><br><span class="line">        Set objWord = CreateObject(&quot;Word.Application&quot;)</span><br><span class="line">        </span><br><span class="line">        With objWord.Documents.Open(FileName:=strPath &amp; strFile, ReadOnly:=True)</span><br><span class="line">            .SaveAs2 Replace(.FullName, &quot;.doc&quot;, &quot;.docx&quot;), FileFormat:=wdFormatXMLDocument</span><br><span class="line">            .Close SaveChanges:=False</span><br><span class="line">        End With</span><br><span class="line">        </span><br><span class="line">        objWord.Quit</span><br><span class="line">        </span><br><span class="line">        strFile = Dir</span><br><span class="line">    Loop</span><br><span class="line">    </span><br><span class="line">    MsgBox &quot;转换完成！&quot;, vbInformation</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>上述代码会弹出一个对话框用于选择包含要转换的doc文件的文件夹。然后，它会遍历文件夹中的每个doc文件，并将其另存为docx格式文件。转换完成后，会有一个消息框提示转换完成。请注意，为了运行此代码，您需要在VBA编辑器中添加对”Microsoft Word xx.x Object Library”的引用（其中xx.x是安装在您计算机上的版本号）。</p><h2 id="批量将word–-gt-pdf"><a href="#批量将word–-gt-pdf" class="headerlink" title="批量将word–&gt;pdf"></a>批量将word–&gt;pdf</h2><p>提供一些关于使用VBA语言将Word文档批量转换为PDF格式的一般性指导：</p><ol><li>打开一个新的Excel工作簿。</li><li>按Alt+F11打开Visual Basic for Applications编辑器。</li><li>在项目浏览窗格中，选择你要添加代码的工作簿对象。</li><li>在菜单栏上选择<code>插入</code>-&gt;<code>模块</code>，然后在编辑区域中输入以下VBA代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">Sub ConvertWordToPDF()</span><br><span class="line">    Dim objWord As Object</span><br><span class="line">    Dim objDoc As Object</span><br><span class="line">    Dim filePath As String</span><br><span class="line">    Dim exportPath As String</span><br><span class="line">    </span><br><span class="line">    &#x27; 设置文件夹路径</span><br><span class="line">    filePath = &quot;C:\Your\Word\Documents\Folder\&quot;</span><br><span class="line">    exportPath = &quot;C:\Your\Export\PDF\Folder\&quot;</span><br><span class="line"></span><br><span class="line">    &#x27; 创建一个Word应用程序对象</span><br><span class="line">    Set objWord = CreateObject(&quot;Word.Application&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x27; 如果不想显示打开的Word文档，可以将下一行代码取消注释</span><br><span class="line">    &#x27; objWord.Visible = False</span><br><span class="line"></span><br><span class="line">    &#x27; 循环处理文件夹中的所有Word文档</span><br><span class="line">    FileSearch filePath, &quot;*.docx&quot;, objWord, exportPath</span><br><span class="line"></span><br><span class="line">    &#x27; 关闭Word应用程序</span><br><span class="line">    objWord.Quit</span><br><span class="line">    </span><br><span class="line">    &#x27; 释放对象的引用</span><br><span class="line">    Set objDoc = Nothing</span><br><span class="line">    Set objWord = Nothing</span><br><span class="line">    </span><br><span class="line">    MsgBox &quot;转换完成！&quot;</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub FileSearch(sourceFolder As String, fileMask As String, objWord As Object, exportPath As String)</span><br><span class="line">    Dim fileName As Variant</span><br><span class="line">    Dim subFolder As Variant</span><br><span class="line">    </span><br><span class="line">    &#x27; 遍历文件夹中的所有子文件和子文件夹</span><br><span class="line">    fileName = Dir(sourceFolder &amp; fileMask)</span><br><span class="line">    </span><br><span class="line">    Do While fileName &lt;&gt; &quot;&quot;</span><br><span class="line">        ExportPDF objWord, sourceFolder, fileName, exportPath</span><br><span class="line">        </span><br><span class="line">        fileName = Dir</span><br><span class="line">    Loop</span><br><span class="line">    </span><br><span class="line">    subFolder = Dir(sourceFolder, vbDirectory)</span><br><span class="line">    </span><br><span class="line">    Do While subFolder &lt;&gt; &quot;&quot;</span><br><span class="line">        If (subFolder &lt;&gt; &quot;.&quot;) And (subFolder &lt;&gt; &quot;..&quot;) Then</span><br><span class="line">            FileSearch sourceFolder &amp; subFolder &amp; &quot;\&quot;, fileMask, objWord, exportPath</span><br><span class="line">        End If</span><br><span class="line">        </span><br><span class="line">        subFolder = Dir</span><br><span class="line">    Loop</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub ExportPDF(objWord As Object, sourceFolder As String, fileName As String, exportPath As String)</span><br><span class="line">    Dim objDoc As Object</span><br><span class="line">    </span><br><span class="line">    &#x27; 打开Word文档</span><br><span class="line">    Set objDoc = objWord.Documents.Open(sourceFolder &amp; fileName)</span><br><span class="line">    </span><br><span class="line">    &#x27; 设置为生成PDF格式的输出选项</span><br><span class="line">    objDoc.ExportAsFixedFormat outputFileName:=exportPath &amp; Left(fileName, Len(fileName) - 4) &amp; &quot;.pdf&quot;, _</span><br><span class="line">        ExportFormat:=17, OpenAfterExport:=False</span><br><span class="line"></span><br><span class="line">    &#x27; 关闭Word文档</span><br><span class="line">    objDoc.Close SaveChanges:=False</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><ol start="5"><li>修改代码中的<code>filePath</code>和<code>exportPath</code>变量为实际的文件夹路径。确保你的Word文档在<code>filePath</code>指定的文件夹下，并且希望导出的PDF文件将保存在<code>exportPath</code>指定的文件夹下。</li><li>按F5运行代码。</li></ol><p>这段VBA代码会递归遍历指定文件夹下的所有Word文档（.docx文件），并将它们批量转换为PDF格式保存在指定的输出文件夹中。</p><p>请注意，在使用此代码之前，你可能需要确保Microsoft Word已经安装在你的计算机上，并正确引用了Word对象库。可以通过依次选择<code>工具</code>-&gt;<code>引用</code>来添加对<code>Microsoft Word XX.X Object Library</code>的引用，其中的XX.X表示你所安装的Word版本。</p><h1 id="将多个Excel文件合并成一个"><a href="#将多个Excel文件合并成一个" class="headerlink" title="将多个Excel文件合并成一个"></a>将多个Excel文件合并成一个</h1><p>您好，您可以使用下面的VBA代码来将多个Excel文件合并成一个文件。这个代码会弹出一个对话框，让您选择要合并的Excel文件所在的文件夹，然后将该文件夹中的所有Excel文件合并到一个新的Excel文件中：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> merge_excel_files()</span><br><span class="line">    <span class="keyword">Dim</span> sDir <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> result_dir <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">With</span> Application.FileDialog(msoFileDialogFolderPicker)</span><br><span class="line">        .Title = <span class="string">&quot;请选择要合并的Excel文件所在的文件夹&quot;</span></span><br><span class="line">        .Show</span><br><span class="line">        result_dir = .SelectedItems(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">    ChDir result_dir</span><br><span class="line">    sDir = Dir(result_dir &amp; <span class="string">&quot;\*.xlsx&quot;</span>)</span><br><span class="line">    <span class="keyword">Dim</span> newWB <span class="keyword">As</span> Workbook</span><br><span class="line">    <span class="keyword">Set</span> newWB = Workbooks.Add</span><br><span class="line">    <span class="keyword">While</span> Len(sDir)</span><br><span class="line">        <span class="keyword">Dim</span> tempWB <span class="keyword">As</span> Workbook</span><br><span class="line">        <span class="keyword">Set</span> tempWB = Workbooks.Open(Filename:=result_dir &amp; <span class="string">&quot;\&quot;</span> &amp; sDir)</span><br><span class="line">        <span class="keyword">For</span> <span class="keyword">Each</span> ws <span class="keyword">In</span> tempWB.Sheets</span><br><span class="line">            ws.Copy After:=newWB.Sheets(newWB.Sheets.Count)</span><br><span class="line">        <span class="keyword">Next</span> ws</span><br><span class="line">        tempWB.Close SaveChanges:=<span class="literal">False</span></span><br><span class="line">        sDir = Dir</span><br><span class="line">    Wend</span><br><span class="line">    newWB.SaveAs Filename:=result_dir &amp; <span class="string">&quot;\merged.xlsx&quot;</span>, _</span><br><span class="line">    FileFormat:=xlOpenXMLWorkbook, Password:=<span class="string">&quot;&quot;</span>, WriteResPassword:=<span class="string">&quot;&quot;</span>, _</span><br><span class="line">    ReadOnlyRecommended:=<span class="literal">False</span>, CreateBackup:=<span class="literal">False</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL二进制日志和慢日志的开启查询</title>
      <link href="/2023/07/10/MySQL%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E5%92%8C%E6%85%A2%E6%97%A5%E5%BF%97%E7%9A%84%E5%BC%80%E5%90%AF%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/07/10/MySQL%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E5%92%8C%E6%85%A2%E6%97%A5%E5%BF%97%E7%9A%84%E5%BC%80%E5%90%AF%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>通过日志可以帮助管理员发现曾经发生过的事情</p><p>本文学习四种日志:</p><ul><li>错误日志</li><li>二进制日志</li><li>查询日志</li><li>慢查询日志</li></ul><h1 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h1><p>错误日志是MySQL最重要的日志之一，记录了MySQL启动和停止，以及服务器在运行过程中发生的严重错误的相关信息。当数据库无法使用时，建议首先看这个日志。</p><p>日志默认是开启的，默认目录在&#x2F;var&#x2F;log&#x2F;,默认日志文件名是mysqld.log</p><p>我的手动更改了，可以查看一下位置<code>show variables like &#39;%log_error;&#39;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710165547584.png" alt="image-20230710165547584" style="zoom:50%;"><p>日志查看</p><p><code>tail /data/mysql/mysqld.log</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710165946708.png" alt="image-20230710165946708" style="zoom:50%;"><h1 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h1><p>二进制日志(BINLOG)记录了所有的DDL(数据定义语言)和DML(数据操纵语言)，但是不包括数据查询(select,show)</p><p>作用:①灾难时的数据恢复 ②MySQL的主从复制。</p><p>在MySQL8是默认开启的。</p><h2 id="二进制日志的参数"><a href="#二进制日志的参数" class="headerlink" title="二进制日志的参数"></a>二进制日志的参数</h2><p><code>show variables like &#39;%log_bin%&#39;;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710170449503.png" alt="image-20230710170449503" style="zoom:50%;"><p>解释</p><ul><li><code>log_bin</code>:  开启&#x2F;关闭二进制日志ON&#x2F;OFF</li><li><code>log_bin_basename:</code>是binlog日志的基本文件名(日志的最终目录)</li><li><code>log_bin_index:</code>是binlog文件的素引文件，这个文件管理了所有的binlog文件的目录</li><li><code>log_bin_trust_function_creators:</code>限制存储过程，前面我们已经讲过了，这是因为二进制日志的一个重要功能是用于主从复制，而存储函数有可能导致主从的数据不一致。所以当开启二进制日志后，需要限制存储函数的创建、修改、调用</li><li><code>log_bin_use_v1_row_events此只读系统变量已弃用</code>。ON表示使用版本1二进制日志行，OFF表示使用版本2二进制日志行（MySQL5.6的默认值为2)。</li><li><code>sql_log_bin</code>  表示当前会话是否记录 bin log，默认值on</li></ul><table><thead><tr><th>日志格式</th><th>含义</th></tr></thead><tbody><tr><td>STATEMENT</td><td>基于SQL语句的日志记录，记录的是SQL语句，对数据进行的修改的SQL都会记录在日志中</td></tr><tr><td>ROW</td><td>基于行的日志记录，记录的是每一行的变化(默认)</td></tr><tr><td>MIXED</td><td>混合上面两种模式，默认使用STATEMENT，特殊情况使用ROW</td></tr></tbody></table><p>查看MySQL使用的日志格式<code>show variables like &#39;%binlog_format%&#39;;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710172328159.png" alt="image-20230710172328159" style="zoom: 50%;"><h2 id="binlog查看"><a href="#binlog查看" class="headerlink" title="binlog查看"></a>binlog查看</h2><p>binlog是无法直接查看的，需要使用<code>mysqlbinlog </code>,具体语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [参数]  logfilename</span><br></pre></td></tr></table></figure><p>参数选项:</p><p>-d 指定数据库名称，只列出指定数据库相关操作<br>-o 忽略掉日志中的前n行命令<br>-v 将行事件重构为SQL语句<br>－ｗ　将行事件重构为SQL语句，并且注释</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710172316805.png" alt="image-20230710172316805" style="zoom:50%;"><p>例如，查看binlog.0005</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog binlog<span class="number">.000005</span></span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710173546759.png" alt="image-20230710173546759" style="zoom: 33%;"><p>日志删除</p><p>对于业务繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不删除，会占用很大的磁盘空间，下面几种方式删除</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>reset master</td><td>删除全部binlog日志</td></tr><tr><td>purge master logs to ‘binlog.XXXXXX’</td><td>删除xxxxxx编号之前的日志</td></tr><tr><td>purge master logs before ‘yyyy-mm-dd hh24:mi:ss’</td><td>删除日志为“yyyy-mm-dd hh24:mi:ss”之前产生的所有日志</td></tr></tbody></table><h1 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h1><p>查询日志包含了客户端所有操作语句，而二进制日志是不包括的。</p><p>默认情况下是不开启的</p><p>查看是否开启<code>show variables like &#39;%general%&#39;;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710174324729.png" alt="image-20230710174324729" style="zoom:50%;"><p>开启这日志</p><p>修改MySQL配置文件&#x2F;etc&#x2F;my.cnf（默认）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#　开启查询日志文件，０关闭，１开启</span><br><span class="line">general＿log<span class="operator">=</span><span class="number">1</span></span><br><span class="line">#　设置日志文件名，不指定默认文件名是host_name.log</span><br><span class="line">general_log_file<span class="operator">=</span>mysql_query.log</span><br></pre></td></tr></table></figure><p>重启<code>service mysqld restart</code></p><p>查看日志<code>tail -f /data/mysql/mysql_query.log</code></p><h1 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h1><p>慢查询日志记录了所有执行参数超过long_query_time设置值并且扫描记录不小于min_examined_row_limit的所有SQL语句，默认没有开启。long_query_time默认是10S，最小为0，进度可以到微秒。</p><p>开启日志</p><p><code>vim /etc/my.cnf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里追加</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="comment"># 执行时间参数</span></span><br><span class="line">ong_query_time=10</span><br></pre></td></tr></table></figure><p>重启<code>service mysqld restart</code></p><p>查看日志<code>tail -f /data/mysql/localhost-slow.log</code></p><p>默认不会记录管理语句，也不会记录不使用索引进行查找的查询，可以在my.cnf修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记录执行慢的管理语句</span></span><br><span class="line">log_slow_admin_statements=1</span><br><span class="line"><span class="comment"># 记录不使用索引的查找语句</span></span><br><span class="line">log_queries_not_using_indexs=1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制和读写分离</title>
      <link href="/2023/07/10/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%92%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2023/07/10/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%92%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>MYSQL主从复制是运维工程师、数据库管理员必备的知识。</p><h1 id="MySQL单台和多台服务器对比"><a href="#MySQL单台和多台服务器对比" class="headerlink" title="MySQL单台和多台服务器对比"></a>MySQL单台和多台服务器对比</h1><p><strong>mysql单台服务器缺点</strong></p><p>单台服务器如果磁盘出现问题的话，数据库数据就会丢失<br>单台服务器的备份，如果把数据文件备份到本地的话，难以自动定期备份<br>单台服务器无法应对高并发的读，只有单台的话，读写都在同一台，数据压力大</p><p><strong>mysql单台服务器优点</strong><br>数据不会出现不一致的现象<br>维护简单</p><p>推荐:如果确实只有单台服务器的话，可考虑采用单台服务器 + 云快照或者云存储</p><p><strong>mysql多台服务器实现主从复制缺点</strong><br>复制出问题或者写量比较大的时候，数据可能会不一致<br>主从复制维护比较麻烦</p><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h2><p>首先放几张Mysql主从复制的原理图</p><p>架构图</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710141630676.png" alt="image-20230710141630676" style="zoom:50%;"><p>架构详解</p><img src="https://pic4.zhimg.com/80/v2-12f36a0aa2ea88020809173182e54e73_1440w.webp" style="zoom: 67%;"><p>Mysql的主从复制中主要有三个线程：<strong>master（binlog dump thread）</strong>、<strong>slave（I&#x2F;O thread 、SQL thread）</strong>，Master一条线程和Slave中的两条线程。</p><p><strong>master（binlog dump thread）</strong>主要负责Master库中有数据更新的时候，会按照<code>binlog</code>格式，将更新的事件类型写入到主库的<code>binlog</code>文件中。并且，Master会创建<code>log dump</code>线程通知Slave主库中存在数据更新，这就是为什么主库的binlog日志一定要开启的原因。</p><p><strong>I&#x2F;O thread</strong>线程在Slave中创建，该线程用于请求Master，Master会返回binlog的名称以及当前数据更新的位置、binlog文件位置的副本。然后，将<code>binlog</code>保存在 <strong>「relay log（中继日志）」</strong> 中，中继日志也是记录数据更新的信息。</p><p><strong>SQL线程</strong>也是在Slave中创建的，当Slave检测到中继日志有更新，就会将更新的内容同步到Slave数据库中，这样就保证了主从的数据的同步。</p><p>概括的说就是:</p><ul><li>从库会生成两个线程，一个I&#x2F;O线程，一个SQL线程</li><li>I&#x2F;O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中</li><li>SQL线程会读取relay-log文件中的日志，并解析成sql语句注意执行</li></ul><p>注意事项</p><ul><li>主库的binlog日志一定要开启（通常为了数据安全，slave也会开启）</li><li>master和slave最好同一版本，如果不满足，保证master版本高于slave</li><li>master和slave的时间需要同步</li></ul><p>以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：</p><ol><li><strong>「同步策略」</strong>：Master会等待所有的Slave都回应后才会提交，这个主从的同步的性能会严重的影响。</li><li><strong>「半同步策略」</strong>：Master至少会等待一个Slave回应后提交。</li><li><strong>「异步策略」</strong>：Master不用等待Slave回应就可以提交。</li><li><strong>「延迟策略」</strong>：Slave要落后于Master指定的时间。</li></ol><h3 id="MySQL主从形式"><a href="#MySQL主从形式" class="headerlink" title="MySQL主从形式"></a>MySQL主从形式</h3><ul><li>一主一从</li><li>主主复制(互为主从)</li><li>一主多从</li><li>多主一从</li><li>联级复制</li></ul><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710151720635.png" alt="image-20230710151720635" style="zoom:33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710151756109.png" alt="image-20230710151756109" style="zoom:33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710151958891.png" alt="image-20230710151958891" style="zoom: 33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710152045725.png" alt="image-20230710152045725" style="zoom: 50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710152159280.png" alt="image-20230710152159280" style="zoom: 50%;"><h2 id="主从复制搭建"><a href="#主从复制搭建" class="headerlink" title="主从复制搭建"></a>主从复制搭建</h2><p>步奏：</p><ol><li>服务器准备</li><li>主库配置</li><li>从库配置</li></ol><p>知识储备:mysql的安装配置（提前搭建好，记得修改远程访问权限）</p><h3 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h3><p>都安装好MySQL</p><p>服务器1是192.168.2.3(master)<br>服务器2是192.168.2.6(slave)</p><p>开放3306端口</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall<span class="operator">-</span>cmd <span class="comment">--permanent --zone=public --add-port=3306/tcp</span></span><br><span class="line">firewall<span class="operator">-</span>cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure><h3 id="主库配置Master"><a href="#主库配置Master" class="headerlink" title="主库配置Master"></a>主库配置Master</h3><ol><li>配置文件修改</li></ol><p><code>vim /etc/my.cnf</code></p><p><strong>注意这个要在[mysqld]分组下面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这个要在[mysqld]分组下面</span></span><br><span class="line"><span class="comment"># 服务ID，这个是id唯一的</span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="comment"># 是否只读，1是只读，0是读写</span></span><br><span class="line">read-only=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项目</span></span><br><span class="line"><span class="comment"># 开启二进制日志</span></span><br><span class="line">log-bin=master-bin</span><br><span class="line"><span class="comment"># 开启二进制日志索引</span></span><br><span class="line">log-bin-index = master-bin.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要同步的数据库</span></span><br><span class="line"><span class="comment"># binlog-ignore-db=xx数据库</span></span><br><span class="line"><span class="comment"># 指定同步的数据库</span></span><br><span class="line"><span class="comment"># binlog-do-db=xx数据库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>server-id #binlog配置需要给mysql服务器设置id用来标识mysql服务器，每个mysql服务器都有不一样的id。从1开始标识</p><p>log-bin #开启binlog，mysql主服务器都需要开启</p><p>log-bin-index #binlog存放到文件里面，index里面存放着binlog的文件名</p></blockquote><ol start="2"><li><p>数据目录(目录看配置文件，可以自定义)<br>创建数据目录:<code>mkdir -pv /data/mysql</code><br>更改所有者:<code>chown mysql:mysql /data/mysql/</code></p></li><li><p>重启<code>service mysqld restart</code></p></li><li><p>创建远程连接账号，并赋予主从复制权限<br>先登录MySQL<br>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建itcast用户和密码，此用户可以在任意主机</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;daokunpwd&#x27;</span>; </span><br><span class="line"># 为<span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span>分配主从复制权限</span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>查看二进制日志坐标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710203930939.png" alt="image-20230710203930939" style="zoom:50%;"><blockquote><p>file:从哪个日志文件开始推送</p><p>position:哪个位置开始推送</p><p>binlog_ignore_db:指不需要同步的数据库</p></blockquote></li></ol><h3 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h3><ol><li>配置文件修改</li></ol><p><code>vim /etc/my.cnf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务ID，这个是id唯一的</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="comment"># 是否只读，1是只读，0是读写</span></span><br><span class="line">read-only=1</span><br></pre></td></tr></table></figure><ol start="2"><li>数据目录(可选项)<br>创建数据目录:<code>mkdir -pv /data/mysql</code><br>更改所有者:<code>chown mysql:mysql /data/mysql/</code></li><li>重启<code>service mysqld restart</code></li></ol><p>到这里基本上两个数据库各自就差不多了。但是现在两个数据仍然是独立的，得把他们关联起来</p><p><strong>关联数据库</strong></p><p>登录<strong>从库</strong>！<strong>从库！</strong></p><p>关联语法(8.0.23的语法)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change replication source <span class="keyword">to</span> source_host<span class="operator">=</span><span class="string">&#x27;xxx.xxx&#x27;</span>,source_user<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,source_password<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,source_log_file<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,source_log_pos<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>关联语法(8.0.23之前的语法)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;IP地址&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>,master_log_pos<span class="operator">=</span>xxx;</span><br></pre></td></tr></table></figure><p>同步语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">8.0</span><span class="number">.22</span>之后版本</span><br><span class="line"><span class="keyword">start</span> replica;</span><br><span class="line"># <span class="number">8.0</span><span class="number">.22</span>之前版本</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>实践(我的是mysql 8.0.17)</p><ol><li><p>关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.2.3&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;daokunpwd&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;binlog.000010&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">996</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启同步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure></li></ol><p>做好之后可以查看状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">8.0</span><span class="number">.22</span>之后版本</span><br><span class="line"><span class="keyword">show</span> replica status\G;</span><br><span class="line"># <span class="number">8.0</span><span class="number">.22</span>之前版本</span><br><span class="line"><span class="keyword">show</span> slave status\G;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710210621012.png" alt="image-20230710210621012" style="zoom:50%;"><p>翻车了，出了些问题，我这个问题是因为slave服务器是复制而来的。matser和slave的uuid一样，修改一下，然后重新开启架构或者重启。uuid在auto.cnf文件注意uuid:<strong>位数不能多也不能少！</strong></p><p>那么auto.cnf在哪里呢？两种办法找:</p><ol><li>这个文件的位置查询:<code>find -name auto.cnf</code></li><li>进入mysql：<code>show variables like &#39;datadir&#39;;</code></li></ol><p>在MySQL中，输入<code>select uuid();</code>生成新的uuid，然后去auto.cnf修改</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710211207934.png" alt="image-20230710211207934" style="zoom:50%;"><p>分别在master和slave的MySQL查看UUID:<code>show variables like &#39;%server_uuid%&#39;;</code></p><p>验证有没有改变</p><p>有改变的话，在slave:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>如果不是这个问题，还有可能是binlog.xxxx的位置或者position不对。</p><p><strong>或者是server_id相同</strong>，这个也是很有可能的，你看你的日志报错是什么</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>master查看状态<code>show master status\G;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710220915168.png" alt="image-20230710220915168" style="zoom:50%;"><p>slave查看状态:<code>show slave status\G;</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710220853384.png" alt="image-20230710220853384" style="zoom:33%;"><p>现在我们在master创建库和插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line">use db01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    sex <span class="type">varchar</span>(<span class="number">5</span>)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,sex) <span class="keyword">values</span>(<span class="string">&#x27;daokun&#x27;</span>,<span class="string">&#x27;man&#x27;</span>),(<span class="string">&#x27;afu&#x27;</span>,<span class="string">&#x27;man&#x27;</span>),(<span class="string">&#x27;yingbaby&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710221939756.png" alt="image-20230710221939756" style="zoom:50%;"><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="主从复制之主库主机名问题"><a href="#主从复制之主库主机名问题" class="headerlink" title="主从复制之主库主机名问题"></a>主从复制之主库主机名问题</h3><p>mysql主服务器的正确配置需要指定log-bin、log-bin-index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line">log-bin=master-bin</span><br><span class="line"></span><br><span class="line">log-bin-index = master-bin.index</span><br></pre></td></tr></table></figure><p>主机名改变后，即使mysql重启了，主从同步是能够照常进行的。</p><p><strong>但是:如果log-bin、log-bin-index没有指定，主机名改变之后，重启，主从同步会不正常</strong>。</p><p>如不指定的话，binlog文件名就会依赖于主机名。</p><p>主机名改变会导致binlog文件名改变，binlog文件名改变带来的影响？</p><blockquote><p>答：主从同步会出问题，多台从库的话，所有从库都会出问题</p></blockquote><h3 id="主从复制之主库主机名问题-1"><a href="#主从复制之主库主机名问题-1" class="headerlink" title="主从复制之主库主机名问题"></a>主从复制之主库主机名问题</h3><p>mysql从库正确的配置需要指定relay-log、relay-log-index</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">relay-log = relay-log</span><br><span class="line">relay-log-index = relay-log.index</span><br></pre></td></tr></table></figure><p>如果是使用正确的配置，从库重启的话，主从同步能够照常进行。</p><p>没指定relay-log、relay-log-index</p><p>默认依赖于主机名，主机名改变，有发生mysql重启，重启后主从同步失败</p><p>Last_SQL_Errno: 1872</p><p>Last_SQL_Error: Slave failed to initialize relay log info structure from the repository</p><p><strong>解决方案</strong></p><p>需要记录当前主从同步的位置信息，一定得记录，不然同步的数据就会不全</p><p>Master_Log_File: shijiange1-bin.000002</p><p>Read_Master_Log_Pos: 32922</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop slave; #关闭主从同步</span><br><span class="line">reset slave; #从库重置</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> </span><br><span class="line"> master_host<span class="operator">=</span><span class="string">&#x27;192.168.237.128&#x27;</span>,</span><br><span class="line"> master_port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line"> master_user<span class="operator">=</span><span class="string">&#x27;replication&#x27;</span>, </span><br><span class="line"> master_password<span class="operator">=</span><span class="string">&#x27;shijiange&#x27;</span>,</span><br><span class="line"> master_log_file<span class="operator">=</span><span class="string">&#x27;shijiange1-bin.000002&#x27;</span>,</span><br><span class="line"> master_log_pos<span class="operator">=</span><span class="number">32922</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>记得指定relay-log、relay-log-index</p><h2 id="基于GTID的主从复制实践"><a href="#基于GTID的主从复制实践" class="headerlink" title="基于GTID的主从复制实践"></a>基于GTID的主从复制实践</h2><p>阿里云的RDS目前已经使用GTID。</p><p>GTID介绍</p><ul><li><strong>MySQL5.6往后版本支持的新特性</strong></li><li>GTID Global Transaction Identified<ul><li>全局事务ID</li></ul></li><li>GTID构成<ul><li>server_uuid+事务ID</li></ul></li><li>在配置主从的时候不再需要自行去找二进制日志文件位置</li></ul><p>相对使用binlog+位置的方法来说:</p><ol><li>gtid让配置主从更加方便</li><li>从提升为主时比较方便</li></ol><p>说明：</p><p>主库192.168.2.4</p><p>从库192.168.2.5</p><h3 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h3><p>在my.cnf添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意要在[mysqld]下面</span></span><br><span class="line"><span class="comment">#server_id=10 # 你有就不配置，没有就配置</span></span><br><span class="line">log_bin=master</span><br><span class="line">gtid_mode=on<span class="comment">#启用gtid</span></span><br><span class="line">enforce_gtid_consistency=<span class="literal">true</span><span class="comment">#强制gtid一致性</span></span><br><span class="line">log-slave-updates=1</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index = master-bin.index</span><br><span class="line">relay-log = relay-log</span><br><span class="line">relay-log-index = relay-log.index</span><br><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure><p>在主服务器创建从服务器登录用户，为用户授权，刷新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;daokunpwd&#x27;</span>; </span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> &quot;daokun&quot;@&quot;%&quot;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="从库配置-1"><a href="#从库配置-1" class="headerlink" title="从库配置"></a>从库配置</h3><p>create user ‘itcast‘@’%’ identified with mysql_native_password by ‘daokunpwd’; </p><p>在my.cnf添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意要在[mysqld]下面</span></span><br><span class="line">log_bin=master</span><br><span class="line">gtid_mode=on<span class="comment">#启用gtid</span></span><br><span class="line">enforce_gtid_consistency=<span class="literal">true</span><span class="comment">#强制gtid一致性</span></span><br><span class="line">log-slave-updates=1</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index = master-bin.index</span><br><span class="line">relay-log = relay-log</span><br><span class="line">relay-log-index = relay-log.index</span><br><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure><p>从库命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> </span><br><span class="line">  master_host<span class="operator">=</span><span class="string">&#x27;192.168.2.4&#x27;</span>, </span><br><span class="line">  master_port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">  master_user<span class="operator">=</span><span class="string">&#x27;daokun&#x27;</span>, </span><br><span class="line">  master_password<span class="operator">=</span><span class="string">&#x27;daokunpwd&#x27;</span>, </span><br><span class="line">  master_auto_position <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230711141052510.png" alt="image-20230711141052510" style="zoom: 33%;"><p>查看是否关闭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;gtid_mode&#x27;</span>;</span><br><span class="line"># 如果关闭，设置以下</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@GLOBAL</span>.GTID_MODE <span class="operator">=</span> OFF_PERMISSIVE;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230711141214511.png" alt="image-20230711141214511" style="zoom:50%;"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status\G;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>主库插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db02;</span><br><span class="line">use db02;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> afu_happy(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    mysql_grade <span class="type">varchar</span>(<span class="number">5</span>)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> afu_happy(name,mysql_grade) <span class="keyword">values</span>(<span class="string">&#x27;daokun&#x27;</span>,<span class="string">&#x27;93&#x27;</span>),(<span class="string">&#x27;afu&#x27;</span>,<span class="string">&#x27;90&#x27;</span>),(<span class="string">&#x27;yingerBaby&#x27;</span>,<span class="string">&#x27;98&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230711142001493.png" alt="image-20230711142001493" style="zoom: 33%;"><h2 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a><strong>面试相关</strong></h2><blockquote><p>❝Mysql主从有什么优点？为什么要选择主从？❞</p></blockquote><ol><li>高性能方面：主从复制通过水平扩展的方式，解决了原来单点故障的问题，并且原来的并发都集中到了一台Mysql服务器中，现在将单点负载分散到了多台机器上，实现读写分离，不会因为写操作过长锁表而导致读服务不能进行的问题，提高了服务器的整体性能。</li><li>可靠性方面：主从在对外提供服务的时候，若是主库挂了，会有通过主从切换，选择其中的一台Slave作为Master；若是Slave挂了，还有其它的Slave提供读服务，提高了系统的可靠性和稳定性。</li></ol><blockquote><p>❝若是主从复制，达到了写性能的瓶颈，你是怎么解决的呢？❞</p></blockquote><p>主从模式对于写少读多的场景确实非常大的优势，但是总会写操作达到瓶颈的时候，导致性能提不上去。</p><p>这时候可以在设计上进行解决采用分库分表的形式，对于业务数据比较大的数据库可以采用分表，使得数据表的存储的数据量达到一个合理的状态。</p><p>也可以采用分库，按照业务进行划分，这样对于单点的写，就会分成多点的写，性能方面也就会大大提高。</p><blockquote><p>❝主从复制的过程有数据延迟怎么办？导致Slave被读取到的数据并不是最新数据。❞</p></blockquote><p>主从复制有不同的复制策略，对于不同的场景的适应性也不同，对于数据的实时性要求很高，要求强一致性，可以采用同步复制策略，但是这样就会性能就会大打折扣。</p><p>若是主从复制采用异步复制，要求数据最终一致性，性能方面也会好很多。只能说，对于数据延迟的解决方案没有最好的方案，就看你的业务场景中哪种方案使比较适合的。</p><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710141456139.png" alt="image-20230710141456139" style="zoom: 33%;"><p>读写分离是基于主从同步的，上面的知识不会，这边就先不要看了。</p><p>简而言之，读写分离就是让写操作让master去做，读操作交给slave。但是这个配置实在是太麻烦了。</p><h2 id="MyCat实现读写分离"><a href="#MyCat实现读写分离" class="headerlink" title="MyCat实现读写分离"></a>MyCat实现读写分离</h2><p>可以使用MyCat</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710223332874.png" alt="image-20230710223332874" style="zoom:50%;"><p>读写分离和负载均衡由MyCat的schema.xml文件datahost标签的balance属性控制。</p><p>ps:累了累了</p><p>这有一个大哥写的很好:<a href="https://zhuanlan.zhihu.com/p/269807567">Mysql+Mycat实现数据库主从同步与读写分离</a></p><h2 id="Atlas实现读写分离"><a href="#Atlas实现读写分离" class="headerlink" title="Atlas实现读写分离"></a>Atlas实现读写分离</h2><p>atlas为mysql数据库的中间件，可以实现mysql的读写分离</p><p>程序只需要连接atlas入口，无需读写单独指定</p><p>程序 -&gt; atlas -&gt;数据库(主库、读库)</p><p><strong>主库+从库 给予atlas读写的权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>atlas连接数据的用户是daokun</p><p>Atlas下载地址<a href="https://github.com/Qihoo360/Atlas/releases">https://github.com/Qihoo360/Atlas/releases</a></p><p>下载tar.gz版本去二进制安装，当然也可以yum安装，rpm安装</p><p><strong>Atlas的rpm安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wegt https://github.com/Qihoo360/Atlas/releases/download/sharding-1.0.1/Atlas-sharding_1.0.1-el6.x86_64.rpm</span><br><span class="line">rpm -i Atlas-sharding_1.0.1-el6.x86_64.rpm</span><br><span class="line"><span class="comment"># 进入安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql-proxy</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p>进入了&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;<strong>conf</strong></p><p>mv test.cnf test.cnf.bak </p><p>vim test.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[mysql-proxy]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#带#号的为非必需的配置项目</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#管理接口的用户名</span></span><br><span class="line">admin-username = daokun</span><br><span class="line"> </span><br><span class="line"><span class="comment">#管理接口的密码</span></span><br><span class="line">admin-password = daokunpwd</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Atlas后端连接的MySQL主库的IP和端口，可设置多项，用逗号分隔</span></span><br><span class="line">proxy-backend-addresses = 192.168.2.4:3306</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Atlas后端连接的MySQL从库的IP和端口，@后面的数字代表权重，用来作负载均衡，若省略则默认为1，可设置多项，用逗号分隔</span></span><br><span class="line"><span class="comment">#proxy-read-only-backend-addresses = 127.0.0.1:3305@1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#用户名与其对应的加密过的MySQL密码，密码使用PREFIX/bin目录下的加密程序encrypt加&gt;密，将其替换为你的MySQL的用户名和加密密码！</span></span><br><span class="line"><span class="comment"># 我的路径是使用/usr/local/mysql-proxy/bin/encrypt daokunpwd命令</span></span><br><span class="line">pwds = daokun:QNdwApWplE7mTh762ogNww==</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置Atlas的运行方式，设为true时为守护进程方式，设为false时为前台方式，一般开发&gt;调试时设为false，线上运行时设为true,true后面不能有空格。</span></span><br><span class="line">daemon = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置Atlas的运行方式，设为true时Atlas会启动两个进程，一个为monitor，一个为worker，monitor在worker意外退出后会自动将其重启，设为false时只有worker，没有monitor，&gt;一般开发调试时设为false，线上运行时设为true,true后面不能有空格。</span></span><br><span class="line">keepalive = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#工作线程数，对Atlas的性能有很大影响，可根据情况适当设置</span></span><br><span class="line">event-threads = 8</span><br><span class="line"> </span><br><span class="line"><span class="comment">#日志级别，分为message、warning、critical、error、debug五个级别</span></span><br><span class="line">log-level = message</span><br><span class="line"> </span><br><span class="line"><span class="comment">#日志存放的路径</span></span><br><span class="line">log-path = /usr/local/mysql-proxy/log</span><br><span class="line"> </span><br><span class="line"><span class="comment">#SQL日志的开关，可设置为OFF、ON、REALTIME，OFF代表不记录SQL日志，ON代表记录SQL日志，REALTIME代表记录SQL日志且实时写入磁盘，默认为OFF</span></span><br><span class="line"><span class="comment">#sql-log = OFF</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#慢日志输出设置。当设置了该参数时，则日志只输出执行时间超过sql-log-slow（单位：ms)的日志记录。不设置该参数则输出全部日志。</span></span><br><span class="line"><span class="comment">#sql-log-slow = 10</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#实例名称，用于同一台机器上多个Atlas实例间的区分</span></span><br><span class="line"><span class="comment">#instance = test</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Atlas监听的工作接口IP和端口</span></span><br><span class="line">proxy-address = 0.0.0.0:1234</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Atlas监听的管理接口IP和端口</span></span><br><span class="line">admin-address = 0.0.0.0:2345</span><br><span class="line"> </span><br><span class="line"><span class="comment">#分表设置，此例中person为库名，mt为表名，id为分表字段，3为子表数量，可设置多项，以逗号分隔，若不分表则不需要设置该项</span></span><br><span class="line"><span class="comment">#tables = person.mt.id.3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#默认字符集，设置该项后客户端不再需要执行SET NAMES语句</span></span><br><span class="line"><span class="comment">#charset = utf8</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#允许连接Atlas的客户端的IP，可以是精确IP，也可以是IP段，以逗号分隔，若不设置该项则允许所有IP连接，否则只允许列表中的IP连接</span></span><br><span class="line"><span class="comment">#client-ips = 127.0.0.1, 192.168.1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Atlas前面挂接的LVS的物理网卡的IP(注意不是虚IP)，若有LVS且设置了client-ips则此项必须设置，否则可以不设置</span></span><br><span class="line"><span class="comment">#lvs-ips = 192.168.1.1</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230711151809817.png" alt="image-20230711151809817"></p><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> start <span class="comment"># 启动</span></span><br><span class="line">/usr/local/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> restart</span><br><span class="line">/usr/local/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> stop</span><br></pre></td></tr></table></figure><p>启动之后，检查有没有在监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp |grep mysql-proxy</span><br></pre></td></tr></table></figure><p>安装教程来源:<a href="https://blog.csdn.net/en_joker/article/details/109220661">安装–csdn</a></p><p>更多内容:<a href="https://cloud.tencent.com/developer/article/1817568">Mysql之读写分离架构-Atlas–腾讯云社区</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8安装配置和日常运维</title>
      <link href="/2023/07/08/MySQL8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E6%97%A5%E5%B8%B8%E8%BF%90%E7%BB%B4/"/>
      <url>/2023/07/08/MySQL8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E6%97%A5%E5%B8%B8%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>基于Centos7.9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其他版本也可以</span></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure><h1 id="MySQL的安装启动实践"><a href="#MySQL的安装启动实践" class="headerlink" title="MySQL的安装启动实践"></a>MySQL的安装启动实践</h1><p>关闭防火墙、关闭selinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看防火墙命令:</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment">#关闭防火墙命令:</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><blockquote><p> 确保没有mysql其他版本</p><p> 一、检查</p><p> Yum检查<br> <code>yum list installed | grep mysql</code></p><p> 安装则直接删除</p><p> <code>yum remove mysql mysql-server mysql-libs compat-mysql</code></p><p> <code>yum remove mysql-community-release</code></p><p> rpm检查<br> <code>rpm -qa | grep -i mysql </code></p><p> 有则直接删除</p><p> <code>rpm -e --nodeps mysql-community-libs-5.7.22-1.el7.x86_64</code></p><p> <code>rpm -e –nodeps mysql57-community-release-el7-11.noarch</code></p><p> 二、口令查找Mysql的安装目录和残存文件</p><ol><li><p>whereis mysql</p></li><li><p>find &#x2F; -name mysql</p></li></ol><p> 找到后，全部rm删除。</p></blockquote><h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><ol><li><p>MySQL的下载官网:<code>https://dev.mysql.com/downloads</code></p></li><li><p>官方文档:<a href="https://dev.mysql.com/doc/refman/8.0/en/binary-installation.html">Installing MySQL on Unix&#x2F;Linux Using Generic Binaries</a></p></li><li><p>MySQL有各种版本，community社区版是开源免费的</p></li></ol><p>安装地址: <strong>&#x2F;usr&#x2F;local&#x2F;mysql</strong></p><blockquote><p>这个是习惯性位置,你可以自己更改</p><p>例如nginx位置&#x2F;usr&#x2F;local&#x2F;nginx;redis位置&#x2F;usr&#x2F;local&#x2F;redis</p><p>或者是&#x2F;opt&#x2F;mysql,&#x2F;opt&#x2F;nginx</p></blockquote><p><strong>MySQL安装说明</strong></p><ol><li>rpm或者yum安装，生产环境比较少用</li><li>编译或者二进制安装，生产环境使用</li></ol><p>我们选择二进制安装，解压到指定目录即可完成安装。</p><p>先下载二进制文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.17-linux-glibc2.12-i686.tar.xz</span><br></pre></td></tr></table></figure><blockquote><p>可以使用上传工具:</p><p><code>yum install lrzsz -y</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境依赖</span></span><br><span class="line">yum install -y gcc gcc-c++ openssl openssl-devel libaio libaio-devel ncurses ncurses-devel</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -Jxvf mysql-8.0.17-linux-glibc2.12-i686.tar.xz </span><br><span class="line"><span class="built_in">mv</span> mysql-8.0.17-linux-glibc2.12-i686 /usr/local/mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>环境变量设置</p><p><code>vim /etc/profile</code></p><p>加入<code>export PATH=$PATH:/usr/local/mysql/bin</code></p><p>然后<code>source /etc/profile</code></p><p>或者直接<code> echo &#39;export PATH=/usr/local/mysql/bin:$PATH&#39; &gt;&gt; /etc/profile  &amp;&amp; source /etc/profile</code></p><h2 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708192422740.png" alt="image-20230708192422740"></p><blockquote><p>出现这个情况可能是由于64位的系统中安装了32位的MySQL程序，导致缺少一些依赖库。</p><ul><li><p>安装glibc.i686和zlib.i686等组件，以支持32位的程序运行。</p><p>中的步骤，或者使用以下命令：</p><ul><li><code>yum install glibc.i686</code></li><li><code>yum install zlib.i686 --setopt=protected_multilib=false</code></li><li><code>yum install xulrunner.i686</code></li></ul></li></ul></blockquote><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708153418679.png" alt="image-20230708153418679"></p><blockquote><p>出现这个情况，两种选择：</p><ul><li>换一个更低的mysql版本</li><li>升级你的系统</li></ul></blockquote><p>最后</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708192556381.png" alt="image-20230708192556381"></p><h2 id="MySQL8的配置及数据初始化"><a href="#MySQL8的配置及数据初始化" class="headerlink" title="MySQL8的配置及数据初始化"></a>MySQL8的配置及数据初始化</h2><p>一般nginx,Redis这些，安装完，配置一下启动就好。但是Mysql还有数据初始化才可以启动。也就是MySQL需要:</p><ul><li>配置</li><li>数据初始化</li></ul><p><strong>配置</strong></p><p><code>vim /etc/my.cnf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 指定监听地址</span></span><br><span class="line">bind-address=127.0.0.1</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">port=3306</span><br><span class="line"><span class="comment"># 指定数据目录</span></span><br><span class="line">datadir=/data/mysql</span><br><span class="line"><span class="comment"># 启动时的用户</span></span><br><span class="line">user=mysql</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="comment"># 开启慢查询</span></span><br><span class="line">slow_query_log=1</span><br><span class="line">long_query_time=0.2</span><br><span class="line">slow_query_log_file=/data/mysql/mysql-slow.log</span><br><span class="line">innodb-file-per-table=1</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">max_allowed_packet = 512M</span><br><span class="line">connect_timeout = 60</span><br><span class="line">net_read_timeout = 120</span><br><span class="line">[mysqld_safe]</span><br><span class="line"><span class="comment"># 指定错误日志位置</span></span><br><span class="line">log-error=/data/mysql/mysqld.log</span><br><span class="line">pid-file=/data/mysql/mysqld.pid</span><br></pre></td></tr></table></figure><p><strong>数据初始化</strong></p><ol><li><p>新增用户</p><p><code>useradd mysql -s /sbin/nologin</code></p></li><li><p>数据目录</p><p><code>mkdir -pv /data/mysql</code></p><p><code>chown -R mysql:mysql /data/mysql /usr/local/mysql/</code></p></li><li><p>初始化 </p><p><code>mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql </code></p><blockquote><p>我的报错了，如下(这是两个报错)</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708210439635.png" alt="image-20230708210439635"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708210623774.png" alt="image-20230708210623774"></p><p>解决办法，缺少装啥</p><p><code>yum install -y libaio.so.1</code></p><p><code> yum install libnuma.so.1</code></p></blockquote><p>成功了</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708210727594.png" alt="image-20230708210727594"></p></li><li><p>需要记住临时密码：A temporary password is generated for root@localhost: <strong>jR&#x3D;cxEs3LLRl</strong></p></li><li><p>验证是否初始化成功：&#x2F;data&#x2F;mysql</p></li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708210947979.png" alt="image-20230708210947979" style="zoom:50%;"><h2 id="MySQL8服务器启动"><a href="#MySQL8服务器启动" class="headerlink" title="MySQL8服务器启动"></a>MySQL8服务器启动</h2><ol><li><p>脚本启动：&#x2F;etc&#x2F;init.d&#x2F;mysqld start </p></li><li><p>脚本关闭：&#x2F;etc&#x2F;init.d&#x2F;mysqld stop </p></li><li><p>手工启动：nohup mysqld_safe –defaultsfile&#x3D;&#x2F;etc&#x2F;my.cnf &amp; </p></li><li><p>手工关闭：kill</p></li></ol><blockquote><p>出现问题，无法启动</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708213840493.png" alt="image-20230708213840493"></p><p>解决:<code>cp /usr/local/mysql/.support-files/mysql.server /etc/init.d/mysqld</code></p></blockquote><p>但是可以使用Centos系统的特色——<strong>Systemctl</strong>管理</p><p><code>vim /usr/lib/systemd/system/mysqld.service</code></p><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mysqld</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/init.d/mysqld start</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Systemctl管理Mysql </p><ol><li><p>开机启动：<code>systemctl enable mysqld </code></p></li><li><p>启动：<code>systemctl start mysqld </code></p></li><li><p>关闭：<code>systemctl stop mysqld </code></p></li><li><p>重启：<code>systemctl restart mysqld</code></p></li></ol><p>是否运行：</p><ul><li>端口</li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708214338495.png" alt="image-20230708214338495"></p><ul><li>进程</li><li>日志</li></ul><p><code>less /data/mysql/mysqld.log </code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708214450931.png" alt="image-20230708214450931"></p><h2 id="MySQL客户端和数据库操作"><a href="#MySQL客户端和数据库操作" class="headerlink" title="MySQL客户端和数据库操作"></a>MySQL客户端和数据库操作</h2><p>流程：</p><ul><li>建库</li><li>建表</li><li>数据操作：增删改查</li></ul><p>MySQL客户端：</p><ul><li>Linux客户端，mysql命令</li><li>windows客户端，界面操作</li><li>网站客户端phpadmin,需要LNMP</li><li>程序操作Mysql数据库，需要编程</li></ul><h3 id="Linux客户端使用"><a href="#Linux客户端使用" class="headerlink" title="Linux客户端使用"></a>Linux客户端使用</h3><ul><li>登录:<code>mysql -uroot -p密码 -A</code></li></ul><p>-u指定用户，-p指定输入密码；-A取消命令提示；-h指定登录到那台主机；-S指定使用哪个Socket</p><p>注意:密码上面有</p><p>示例：<code>mysql -uroot -pjR=cxEs3LLRl -A</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708215144739.png" alt="image-20230708215144739"></p><ul><li>退出exit</li><li>修改密码:<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;zhugenfu&#39;;</code></li></ul><p>密码是zhugenfu</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230708220602576.png" alt="image-20230708220602576"></p><p><strong>mysql操作说明</strong></p><ul><li>库 –&gt; 表 –&gt; 数据</li><li>多个库、多个表、多行数据</li><li>插入、读取、更新、删除数据</li></ul><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>遵循sql语言</p><ul><li>显示数据库<code>show databases;</code></li><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><ul><li>选择数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><p>常用数值类型介绍 </p><ol><li><p>TINYINT整型1字节，SMALLINT整型2字节， MEDIUMINT整型3字节，INT整型4字节，BIGINT整型8字 节 </p></li><li><p>FLOAT浮点数，整型无小数点 </p></li><li><p>DOUBLE双浮点数</p></li></ol><p>字符串类型 </p><ol><li>CHAR定长字符串，VARCHAR变长字符串 </li><li>TEXT长文本数据，MEDIUMTEXT中长文本数据， LONGTEXT极大长文本数据</li></ol><p>日期和时间类型 </p><ol><li>日期类型DATE，YYYY-MM-DD</li><li>时间类型TIME，HH:MM:SS </li><li>年类型YEAR，YYYY </li><li>日期时间类型DATETIME，YYYY-MM-DD HH:MM:SS</li></ol><p>数据类型很重要，篇幅也比较多，很枯燥。</p><p>可以选择看菜鸟教程<a href="https://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程-MySQL数据类型</a></p><h1 id="MySQL数据表增删改查"><a href="#MySQL数据表增删改查" class="headerlink" title="MySQL数据表增删改查"></a>MySQL数据表增删改查</h1><h2 id="数据表创建"><a href="#数据表创建" class="headerlink" title="数据表创建"></a>数据表创建</h2><p>先指定数据库:<code>use &lt;数据库名&gt;;</code></p><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p>以下为创建MySQL数据表的SQL通用语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (column_name column_type);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `runoob_tbl`(</span><br><span class="line">   `runoob_id` <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `runoob_author` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `submission_date` <span class="type">DATE</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( `runoob_id` ),</span><br><span class="line">    <span class="keyword">unique</span> key (`runoob_title`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1,用来标识用的。</li><li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。一个数据表只有一个主键</li><li>unique key 是唯一键，数值不可以重复，一个数据表可以有多个唯一键</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul><h2 id="数据表查看"><a href="#数据表查看" class="headerlink" title="数据表查看"></a>数据表查看</h2><p>所有表<code>show tables;</code></p><p>查看表结构:<code>desc &lt;表名&gt;;</code>或者<code>show create &lt;表名&gt;;</code></p><h2 id="数据表查询"><a href="#数据表查询" class="headerlink" title="数据表查询"></a>数据表查询</h2><p>读取所有内容<code>select * from runoob_tbl;</code></p><p>读取指定内容<code>select runoob_title from runoob_tbl;</code></p><p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[LIMIT N][ <span class="keyword">OFFSET</span> M]</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件。</li><li>你可以使用 LIMIT 属性来设定返回的记录数。</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><h2 id="字段更新和删除"><a href="#字段更新和删除" class="headerlink" title="字段更新和删除"></a>字段更新和删除</h2><p><strong>更新语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">set</span> 更改字段<span class="operator">=</span>更改值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>一般是先select，再update</p><p>条件一定要加，不然就会全表更新，对于企业很致命</p></blockquote><p><strong>字段删除语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>一般是先select，再delete</p><p>条件一定要加，不然就会全表删除了</p></blockquote><p>整个表删除(保留自增id):<code>delete from &lt;表名&gt;;</code></p><p>整个表删除(重置自增id):<code>truncate table &lt;表名&gt;;</code></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><strong>删除MySQL数据表</strong>的通用语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name ;</span><br></pre></td></tr></table></figure><h2 id="数据表插入数据"><a href="#数据表插入数据" class="headerlink" title="数据表插入数据"></a>数据表插入数据</h2><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_tbl </span><br><span class="line">    (runoob_title, runoob_author, submission_date)</span><br><span class="line">    <span class="keyword">VALUES</span></span><br><span class="line">    (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br></pre></td></tr></table></figure><h2 id="列的修改"><a href="#列的修改" class="headerlink" title="列的修改"></a>列的修改</h2><p>根据上面的插入数据进行修改</p><h3 id="使用-CHANGE-只修改列名"><a href="#使用-CHANGE-只修改列名" class="headerlink" title="使用 CHANGE 只修改列名"></a><strong>使用 <code>CHANGE</code> 只修改列名</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line">CHANGE runoob_title title <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure><p>AI 生成的代码。仔细查看和使用。 <a href="https://www.bing.com/new#faq">有关常见问题解答的详细信息</a>.</p><p>这个命令将 <code>runoob_title</code> 列的名字改为 <code>title</code>，类型保持不变。</p><h3 id="使用-CHANGE-修改列名和类型"><a href="#使用-CHANGE-修改列名和类型" class="headerlink" title="使用 CHANGE 修改列名和类型"></a><strong>使用 <code>CHANGE</code> 修改列名和类型</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line">CHANGE runoob_author author TEXT;</span><br></pre></td></tr></table></figure><p>这个命令将 <code>runoob_author</code> 列的名字改为 <code>author</code>，并且将类型改为 <code>TEXT</code>。</p><h3 id="使用-MODIFY-修改类型"><a href="#使用-MODIFY-修改类型" class="headerlink" title="使用 MODIFY 修改类型"></a><strong>使用 <code>MODIFY</code> 修改类型</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line">MODIFY submission_date DATETIME;</span><br></pre></td></tr></table></figure><p>这个命令将 <code>submission_date</code> 列的类型从 <code>TIMESTAMP</code> 改为 <code>DATETIME</code>。</p><h3 id="增加一个列"><a href="#增加一个列" class="headerlink" title="增加一个列"></a><strong>增加一个列</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line"><span class="keyword">ADD</span> page_views <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这个命令在表中新增了一个名为 <code>page_views</code> 的列，类型为 <code>INT</code>，默认值为 <code>0</code>。</p><h3 id="增加两个列"><a href="#增加两个列" class="headerlink" title="增加两个列"></a><strong>增加两个列</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line"><span class="keyword">ADD</span> (</span><br><span class="line">  category_id <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  status TINYINT <span class="keyword">DEFAULT</span> <span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个命令在表中新增了两个列：<code>category_id</code>（类型为 <code>INT</code>，默认值为 <code>0</code>）和 <code>status</code>（类型为 <code>TINYINT</code>，默认值为 <code>1</code>）。</p><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> runoob_tbl</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> page_views;</span><br></pre></td></tr></table></figure><p>执行这个命令后，<code>page_views</code> 列将会从 <code>runoob_tbl</code> 表中被永久删除。请在执行此类操作前确保该列不再需要，因为一旦删除，所有相关数据都将丢失。</p><h3 id="删除两个列"><a href="#删除两个列" class="headerlink" title="删除两个列"></a>删除两个列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE runoob_tbl</span><br><span class="line">DROP COLUMN category_id,</span><br><span class="line">DROP COLUMN status;</span><br></pre></td></tr></table></figure><h1 id="Mysql8简单聚合查询、事务、索引实战"><a href="#Mysql8简单聚合查询、事务、索引实战" class="headerlink" title="Mysql8简单聚合查询、事务、索引实战"></a>Mysql8简单聚合查询、事务、索引实战</h1><h2 id="查询排序和分组查询"><a href="#查询排序和分组查询" class="headerlink" title="查询排序和分组查询"></a>查询排序和分组查询</h2><p>先创建一个数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> learntype <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> grade <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> )ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;shijiange&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;shijiange&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;daokun&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;daokun&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">85</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;afu&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, learntype, grade)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;afu&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">62</span>);</span><br></pre></td></tr></table></figure><h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><ol><li>id升序：<code>select * from user order by id asc;</code></li><li>id降序：<code>select * from user order by id desc;</code></li><li>通过学习类型：<code>select * from user order by learntype; </code></li><li>多列排序：<code>select * from user order by learntype asc,grade desc;</code></li></ol><p>注意：user是表名，你的表名可能是其他名字，我的是user。</p><p><strong>按照id升序查询</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709100641613.png" alt="image-20230709100641613" style="zoom:50%;"><p><strong>按照id降序查询</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709100746022.png" alt="image-20230709100746022" style="zoom:50%;"><p><strong>多列排序（learntype+grade）</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709101250664.png" alt="image-20230709101250664" style="zoom: 50%;"><p><strong>多列排序（username升序+grade降序）</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709101445373.png" alt="image-20230709101445373" style="zoom:50%;"><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol><li>分组查询可以针对某个列进行分组</li><li>分组以后可以使用统计函数:<strong>count,sum,avg,max,min</strong></li></ol><p>先了解统计函数</p><p>查成绩最大值<code>seletc max(grade) from user</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709101849752.png" alt="image-20230709101849752" style="zoom:50%;"><p>分组统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按照名字作为组别，显示username,统计总分(默认是按照id)</span><br><span class="line"><span class="keyword">select</span> username,<span class="built_in">sum</span>(grade) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> username;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709102242733.png" alt="image-20230709102242733" style="zoom:50%;"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按照名字作为组别，显示username(升序),统计总分</span><br><span class="line"><span class="keyword">select</span> username,<span class="built_in">sum</span>(grade) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> username <span class="keyword">order</span> <span class="keyword">by</span> username;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709102505210.png" alt="image-20230709102505210" style="zoom:50%;"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按照名字作为组别，显示username,统计总分（降序）</span><br><span class="line"><span class="keyword">select</span> username,<span class="built_in">sum</span>(grade) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> username <span class="keyword">order</span> <span class="keyword">by</span> username;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709102619416.png" alt="image-20230709102619416" style="zoom:50%;"><h2 id="多表组合查询"><a href="#多表组合查询" class="headerlink" title="多表组合查询"></a>多表组合查询</h2><p><strong>创建user表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">bigint</span> unsigned auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> key ( id )</span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;daokun&#x27;</span>, <span class="string">&#x27;mypwd&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;shijiange&#x27;</span>, <span class="string">&#x27;shijianpwd&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;afu&#x27;</span>, <span class="string">&#x27;afupwd&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;other&#x27;</span>, <span class="string">&#x27;opwd&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>创建logincount表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> logincount(</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">count <span class="type">bigint</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> logincount (username, count) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;daokun&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> logincount (username, count) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;shijiange&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> logincount (username, count) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;other&#x27;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> logincount (username, count) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;nonono&#x27;</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><p><strong>Mysql多表联合查询</strong> </p><ol><li><p>inner join两张表共有</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user.username,user.password,logincount.count <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">inner</span> <span class="keyword">join</span> logincount <span class="keyword">on</span> user.username<span class="operator">=</span>logincount.username; </span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709113852620.png" alt="image-20230709113852620"></p></li><li><p>left join以左表为主</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user.username,user.password,logincount.count <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">left</span> <span class="keyword">join</span> logincount <span class="keyword">on</span> user.username<span class="operator">=</span>logincount.username; </span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709114051032.png" alt="image-20230709114051032"></p><ol start="3"><li>right join以右表为主</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user.username,user.password,logincount.count <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">right</span> <span class="keyword">join</span> logincount <span class="keyword">on</span> user.username<span class="operator">=</span>logincount.username; </span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709114134949.png" alt="image-20230709114134949"></p><h2 id="正则查询"><a href="#正则查询" class="headerlink" title="正则查询"></a>正则查询</h2><p>这个比较少用，因为比较耗性能。</p><p><strong>普通正则表达式</strong></p><ul><li>.表示任意一个字符， *表示前面一个字符出现0次 或者多次</li><li>[abc]表示中括号内任意一个字符，[^abc]表示非 中括号内的字符</li><li>[0-9]表示数字，[a-z]表示小写字母，[A-Z]表示 大写字母</li><li>^xx表示以xx开头，xx$表示以xx结尾 </li><li>[a-zA-Z]表示所有字母，[a-zA-Z0-9]表示所有字 母+数字 </li><li>[^0-9]表示非数字 </li><li>\d表示数字，\D表示非数字</li><li>\s表示空白字符，\S表示非空白字符</li></ul><p><strong>扩展正则表达</strong></p><p>在普通正则符号的基础上进行扩展</p><ul><li>?表示前面字符出现0或者1次，+前面字符出现1或者多次</li><li>{a}表示前面字符匹配a次，{a,b}表示前面字符匹配a到b次</li><li>{,b}表示前面字符匹配0次到b次，{a,}前面字符匹 配a或a+次</li><li>string1|string2表示匹配string1或者string2</li></ul><p><strong>正则查询实战</strong></p><p>正则查询是非常耗性能 </p><ol><li><p>只要匹配部分就能输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username regexp <span class="string">&#x27;dao&#x27;</span>; </span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709115220038.png" alt="image-20230709115220038"></p></li><li><p>普通正则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username regexp <span class="string">&#x27;ge$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709115315231.png" alt="image-20230709115315231"></p></li><li><p>扩展正则查询</p></li></ol>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username regexp <span class="string">&#x27;ge$|afu&#x27;</span>;</span><br></pre></td></tr></table></figure><p>   <img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709115351719.png" alt="image-20230709115351719"></p><h2 id="MySQL的事务操作实战"><a href="#MySQL的事务操作实战" class="headerlink" title="MySQL的事务操作实战"></a>MySQL的事务操作实战</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>SQL建User表</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">bigint</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">money <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> key ( id )</span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p> <strong>数据准备</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password, money)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;shijiange&#x27;</span>, <span class="string">&#x27;mypwd&#x27;</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password, money)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;mypwd&#x27;</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h3 id="事务介绍"><a href="#事务介绍" class="headerlink" title="事务介绍"></a>事务介绍</h3><ol><li>事务可以由一个或者多个操作组成</li><li>事务就是把一个或多个操作捆绑在一起</li><li>事务还有一个功能就是预防部分误操作</li></ol><p><strong>MySQL默认开启事务自动提交</strong></p><p>事务自动提交:数据的更新立即生效，无法回滚</p><p>可以查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%commit%&quot;;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709175456611.png" alt="image-20230709175456611" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709175557271.png" alt="image-20230709175557271" style="zoom:50%;"><h3 id="MySQL事务自控实战"><a href="#MySQL事务自控实战" class="headerlink" title="MySQL事务自控实战"></a>MySQL事务自控实战</h3><p>准备两个ssh连接，一个ssh1,一个ssh2。默认是ssh1在操作。</p><ol><li><p>当前会话事务自动提交关闭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span>OFF;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709181017174.png" alt="image-20230709181017174" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709181300595.png" alt="image-20230709181300595" style="zoom:50%;"><p>现在，我们在ssh1输入<code>commit</code>提交一下</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709181354359.png" alt="image-20230709181354359"></p><p>ssh2在查看一次</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709181437962.png" alt="image-20230709181437962" style="zoom:33%;"><p>也就是说，提交才会更改</p></li><li><p>删除表，回滚复原</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709182331106.png" alt="image-20230709182331106" style="zoom:50%;"><p>也就是可以预防update,delete执行操作失误。注意<code>drop table user;</code>无法回滚</p></li><li><p>多个操作组成一个事务<br>原子操作:shijiange向lisi转账5000块钱，要么都一起成功，要么一起失败，不能出现一个成功，一个失败。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span>OFF;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> money<span class="operator">=</span><span class="number">5000</span> <span class="keyword">where</span></span><br><span class="line">username<span class="operator">=</span><span class="string">&#x27;shijiange&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> <span class="number">15000</span> <span class="keyword">where</span> username <span class="operator">=</span><span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"># <span class="keyword">rollback</span> 或者 <span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ol><p>再强调一下:不是所有都能回滚</p><ol><li>回滚：<code>delete from user; </code></li><li>不可回滚：<code>drop table user;</code></li></ol><h3 id="MySQL更改表结构实战"><a href="#MySQL更改表结构实战" class="headerlink" title="MySQL更改表结构实战"></a>MySQL更改表结构实战</h3><p>如果我们创建了一个表有username,password字段，但是后面发现还需要monney字段，这个时候就需要更改表结构了。</p><p><strong>改表结构需求</strong></p><ol><li>添加字段，例如用户表新增存款字段 </li><li>字段长度不足，例如用户名20位不够存储</li></ol><p><strong>SQL建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">bigint</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> key ( id )</span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p><strong>新增和删除字段</strong> </p><ol><li><p>增加money字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> money <span class="type">bigint</span> unsigned; </span><br></pre></td></tr></table></figure></li><li><p>删除money字段</p></li></ol>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> money; </span><br></pre></td></tr></table></figure><ol start="3"><li><p>指定位置新增字段:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> money <span class="type">bigint</span> unsigned <span class="keyword">default</span> <span class="number">0</span> after username;</span><br></pre></td></tr></table></figure></li><li><p>加入到第一个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> money <span class="type">int</span> unsigned <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">first</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>修改字段类型</strong> </p><ol><li><p>修改money字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify money <span class="type">bigint</span> unsigned <span class="keyword">default</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>扩大 username字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> modify username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MySQL索引实战"><a href="#MySQL索引实战" class="headerlink" title="MySQL索引实战"></a>MySQL索引实战</h3><p><strong>索引说明</strong></p><ul><li>MySQL默认字段是没有索引的</li><li>索引大多情况下可以加快数据的查询</li></ul><p>不适用于:</p><ul><li>数据类型变化不多的，例如性别</li><li>数据更新频率更新频率不高的不建议，因为更新数据需要维护索引</li></ul><p>实践思路：先创建一个数据表user。然后利用这个user表重复创建100多万数据。在这100万条数据添加一个特别的数据。试试普通查询和索引查询的区别。</p><p>创建user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">bigint</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">primary</span> key ( id )</span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>插入两条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;shijiange&#x27;</span>, <span class="string">&#x27;mypwd&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;justdoit&#x27;</span>, <span class="string">&#x27;mypwd&#x27;</span>);</span><br></pre></td></tr></table></figure><p>百万数据准备(这条命令多用几次)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username,password) <span class="keyword">select</span> username, password <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>查看数据多少(我的是200万)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709222903925.png" alt="image-20230709222903925" style="zoom:50%;"><p>插入特别的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (username, password) <span class="keyword">values</span> (<span class="string">&#x27;daokun&#x27;</span>, <span class="string">&#x27;dfupwd&#x27;</span>);</span><br></pre></td></tr></table></figure><p>普通查找这条特别的数据(花了0.57s)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>&quot;daokun&quot;;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709223208694.png" alt="image-20230709223208694" style="zoom:50%;"><p>索引查找特别数据</p><ul><li><p>建立索引(花了14s)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> index i_usernam (username);</span><br></pre></td></tr></table></figure></li><li><p>查找数据(0s)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span>&quot;daokun&quot;;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709223527044.png" alt="image-20230709223527044" style="zoom:50%;"></li></ul><p>查看表中的索引<code>show indexes from user;</code></p><p>主键和唯一键默认会创建索引</p><p>注意:正则是无法命中索引的！！</p><h1 id="MySQL的权限控制"><a href="#MySQL的权限控制" class="headerlink" title="MySQL的权限控制"></a>MySQL的权限控制</h1><h2 id="设置用户和监听地址"><a href="#设置用户和监听地址" class="headerlink" title="设置用户和监听地址"></a>设置用户和监听地址</h2><p><strong>Mysql监听说明</strong><br>如果本地使用，监听在127.0.0.1，无风险（安全是安全，但是也没啥用啊）<br>如果局域网访问，监听在局域网，风险较小<br>如果是公网访问，风险比较大。权限如果不会设置 容易被入侵</p><p>修改监听<br><code>cd /etc/my.cnf</code>修改成0.0.0.0</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710003825557.png" alt="image-20230710003825557" style="zoom:33%;"><p><code>/etc/init.d/mysqld restart</code></p><p>查看<code>netstat -tulnp |grep mysql</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710003504797.png" alt="image-20230710003504797" style="zoom:33%;"><p><strong>Mysql8默认只允许localhost登录</strong><br>mysql.user记录着权限信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure><p>查看用户权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;root&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p><strong>Mysql8使用新的认证方式—caching_sha2_password</strong><br><code>show variables like &#39;%authen%&#39;; </code><br>因为客户端可能不支持这种验证方式，所以我们设置用户的时候，还是使用旧的认证方式。</p><h3 id="Mysql增加用户"><a href="#Mysql增加用户" class="headerlink" title="Mysql增加用户"></a><strong>Mysql增加用户</strong></h3><p>密码建议用强密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户和监听IP</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;daokunpwd&#x27;</span>; </span><br><span class="line"># 设置权限，这一步不能忘记了，不然新用户很多事情干不了</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>新用户登录<code>mysql -udaokun -pdaokunpwd -h 127.0.0.1 -A</code><br>因为指定了监听IP地址，所以需要<code>-h</code></p><p>127.0.0.1代表允许访问的client ip。可以给多个 IP，例如192.168.%、10.%<br>all privileges代表所有权限。这里可以给具体权 限，例如select、update等<br><code>*.*</code>代表所有库所有表。这里可以给具体库、具体表，例如daokun.*daokun.user<br>with grant option代表给grant权限<br>with mysql_native_password使用旧的认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;daokun&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line"># 换成%是所有主机</span><br></pre></td></tr></table></figure></blockquote><p>检查有没有添加</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230709234925343.png" alt="image-20230709234925343" style="zoom: 50%;"><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED BY <span class="string">&#x27;daokun123&#x27;</span>;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> = PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当前用户改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&quot;newpassword&quot;);</span><br></pre></td></tr></table></figure></blockquote><h3 id="重置用户密码"><a href="#重置用户密码" class="headerlink" title="重置用户密码"></a>重置用户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;daokun&#x27;@&#x27;127.0.0.1&#x27; = &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure><h3 id="权限回收"><a href="#权限回收" class="headerlink" title="权限回收"></a><strong>权限回收</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>具体可以查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR ‘daokun’@’127.0.0.1’;</span><br></pre></td></tr></table></figure></blockquote><h2 id="用户删除"><a href="#用户删除" class="headerlink" title="用户删除"></a><strong>用户删除</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;daokun&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="客户端权限控制"><a href="#客户端权限控制" class="headerlink" title="客户端权限控制"></a>客户端权限控制</h3><p><strong>Mysql图形化客户端</strong> </p><ol><li>Navicat for MySQL，需要注册破解，比较麻烦 </li><li>MySQLWorkbench，可直接使用。下载链接： <a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></li></ol><blockquote><p>建议下载和自己MySQL版本号对应的</p></blockquote><p>win客户端IP:192.168.2.2<br>centos服务器192.168.2.4</p><p>按照上面的内容创建一个用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;mydaokun&#x27;</span>@<span class="string">&#x27;192.168.2.2&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;daokunpwd&#x27;</span>; </span><br><span class="line"># 设置权限，这一步不能忘记了，不然新用户很多事情干不了</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;mydaokun&#x27;</span>@<span class="string">&#x27;192.168.2.2&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>win客户端连接</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230710000745930.png" alt="image-20230710000745930" style="zoom: 33%;"><h1 id="MySQL日常运维"><a href="#MySQL日常运维" class="headerlink" title="MySQL日常运维"></a>MySQL日常运维</h1><h2 id="MySQL-dump备份数据库"><a href="#MySQL-dump备份数据库" class="headerlink" title="MySQL dump备份数据库"></a>MySQL dump备份数据库</h2><p>dump备份数据库会锁表，备份前要注意是否影响业务。<br>数据量大也不建议使用dump,可选择直接复制文件。</p><p>准备:我们有test1,test2两个数据库;test1里面有user表</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a><strong>备份</strong></h3><p><strong>备份多个库</strong></p><ol><li>备份所有库：<code>mysqldump -uroot -pdaokun --all-databases &gt;/tmp/all.sql</code></li><li>备份多个库：<code>mysqldump -uroot -pdaokun --databases test1 test2 &gt;/tmp/all.sql</code></li></ol><p><strong>备份某个具体库或某个具体表</strong> </p><ol><li>备份test1库:<code>mysqldump -uroot -pdaokun test1 &gt;/tmp/test1.sql </code></li><li>备份test1下的user表:<code>mysqldump -uroot -pdaokun user test1&gt;/tmp/user_test1.sq</code></li></ol><p><strong>特殊备份</strong></p><ol><li>忽略某个表：<code>mysqldump -uroot -pdaokun user --ignore-table=test1.user &gt;/tmp/ignore.sql</code></li><li>备份表结构：<code>mysqldump -uroot -pdaokun user -d &gt;/tmp/usertruct.sql</code></li></ol><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>数据恢复</p><p><strong>恢复多个库</strong></p><ol><li>登录到Mysql </li><li>设置编码： <code>set names utf8;</code></li><li>导入数据：<code>source /tmp/all.sql;</code></li></ol><blockquote><p>第二步默认是utf8,如不放心可以查看编码: <code>show variables like &#39;%char%&#39;;</code></p><p>&#x2F;tmp&#x2F;all.sql是路径</p></blockquote><p><strong>恢复单个库</strong> </p><p>恢复test1里面user表</p><ol><li>自己创建库：<code>create database test1; </code></li><li>进入user表:<code>use user;</code></li><li>导入数据：<code>source /tmp/user_test1.sql</code></li></ol><p>更多内容:<a href="https://www.runoob.com/mysql/mysql-database-export.html">导出数据-菜鸟教程</a>和<a href="https://www.runoob.com/mysql/mysql-database-import.html">导入数据-菜鸟教程</a></p><h2 id="MySQL重新初始化"><a href="#MySQL重新初始化" class="headerlink" title="MySQL重新初始化"></a>MySQL重新初始化</h2><p>什么情况下需要重新初始化数据库 </p><ol><li>学习中创建了很多无用的库，权限分配比较乱</li><li>安装完Mysql，用了一段时间，想废弃之前的数据 </li><li>重新初始化会让Mysql恢复到原始的状态</li></ol><blockquote><p>注意:Mysql重新初始化 1. 重新初始化数据会丢失，注意备份 2. 线上环境请勿乱操作</p></blockquote><p><strong>重新初始化步骤</strong> </p><ol><li>停止Mysql数据库。<code>/etc/init.d/mysqld stop</code></li><li>并删除数据目录<code>\rm -rf /data/mysql/* </code></li><li>重新初始化命令：<code>mysqld --initialize -- user=mysql --basedir=/usr/local/mysql -- datadir=/data/mysql </code></li><li>记住临时密码：xxx </li><li>启动数据库：<code>/etc/init.d/mysqld restart</code></li><li>进入Mysql更改密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;daokun&#39;</code></li></ol><h2 id="运维管理命令"><a href="#运维管理命令" class="headerlink" title="运维管理命令"></a>运维管理命令</h2><p><strong>能看到客户端IP、用户、执行的命令</strong></p><ol><li>在MySQL里面输入<code>show processlist;</code></li><li>在MySQL里面输入<code>show full processlist; </code></li></ol><p>在Linux输入:<code>mysql -uroot -pshijiangepwd -A -e &quot;show processlist;&quot;</code>等效于上面的1</p><p><strong>Shell命令统计Mysql信息</strong></p><p><code>mysql -uroot -daokun -A -e &quot;show processlist;&quot;|awk &#39;&#123;print $3&#125;&#39;</code></p><p><strong>查看Mysql配置</strong> </p><ol><li>所有设置查看：show variables; </li><li>字符集配置查看：show variables like ‘%char%’; </li><li>事务设置：show variables like ‘%commit%’;</li><li>密码过期时间设置：show variables like ‘%password%’; </li><li>最大连接数设置：show variables like ‘%connect%’;</li><li>缓存大小设置：show variables like ‘%buffer%’;</li><li>超时时间设置：show variables like ‘%timeout%’;</li></ol><p><strong>更改Mysql的配置</strong> </p><ol><li><p>当前会话设置，临时生效：set autocommit&#x3D;OFF;</p></li><li><p>全局设置，永久生效，只要Mysql不重启：set global max_connections&#x3D;1024;</p></li><li><p>永久的需要写入配置文件预防Mysql重启后失效</p></li></ol><p><strong>Mysql的状态查看</strong><br>可用来监控</p><ol><li>全部状态：show global status; </li><li>启动时间：show global status like ‘%uptime%’</li><li>. 流量信息：show global status like ‘%bytes%’; </li><li>连接信息：show global status like ‘%connect%’;</li><li>增删改查、事务提交信息：show global status like ‘%com_select%’;</li></ol><h1 id="MySQL忘记密码解决方案"><a href="#MySQL忘记密码解决方案" class="headerlink" title="MySQL忘记密码解决方案"></a>MySQL忘记密码解决方案</h1><p>前提条件:MySQL服务器能够登录进去(ssh)</p><p>本文有两种方法：</p><ol><li><strong>命令修改</strong>(MysSQL8不一定行)</li></ol><ul><li><p>跳过授权表(通用)</p><ol><li>关闭数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin shutdown <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><ol start="2"><li>跳过授权表启动</li></ol><p>具体文件看各自怎么路径安装的，会一波三折，耐心看报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --default-file=/etc/mt.cnf --skip-grant-tables --skip-networking=on --user=mysql &amp;</span><br></pre></td></tr></table></figure><pre><code>      3. 直接进去（不输入密码）</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><ol start="4"><li>修改密码</li></ol></li></ul><ol start="2"><li><strong>配置文件修改</strong>(推荐)<ol><li>备份Mysql配置 <code>cp /etc/my.cnf /ect/my.cnf.bak</code></li><li>更改Mysql配置，新增<strong>skip-grant-tables</strong>和<strong>bindaddress&#x3D;127.0.0.1</strong>，重启Mysql </li><li>无密码登录到数据库：<code>mysql -uroot -A</code></li><li>重置密码：<code>update mysql.user set authentication_string=&#39;&#39; where user=&#39;root&#39; and host=&#39;localhost&#39;;</code></li><li>还原配置，重启Mysql <code>cp /ect/my.cnf.bak /ect/my.cnf</code></li><li>使用空密码登录，修改密码<code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;daokun&#39;;</code></li></ol></li></ol><p>更多:<a href="https://www.runoob.com/note/27730">MySQL密码忘记处理-菜鸟教程</a></p><h1 id="MySQL8安装脚本"><a href="#MySQL8安装脚本" class="headerlink" title="MySQL8安装脚本"></a>MySQL8安装脚本</h1><p>实测可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义MySQL 8.0的yum源URL</span></span><br><span class="line">MYSQL_REPO_URL=<span class="string">&quot;https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并删除所有旧的MySQL GPG密钥</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在检查并删除所有旧的MySQL GPG密钥...&quot;</span></span><br><span class="line">sudo rpm -e --allmatches gpg-pubkey-a8d3785c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用find命令查找MySQL GPG密钥的位置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在查找MySQL GPG密钥的位置...&quot;</span></span><br><span class="line">MYSQL_GPG_KEY_PATH=$(sudo find /etc/pki/rpm-gpg/ -name <span class="string">&#x27;RPM-GPG-KEY-mysql*&#x27;</span> | <span class="built_in">head</span> -n 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$MYSQL_GPG_KEY_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;无法找到MySQL GPG密钥。&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;找到MySQL GPG密钥: <span class="variable">$MYSQL_GPG_KEY_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入新的MySQL GPG密钥</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在导入新的MySQL GPG密钥...&quot;</span></span><br><span class="line">sudo rpm --import <span class="variable">$MYSQL_GPG_KEY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查MySQL 8.0的yum源是否已经存在</span></span><br><span class="line"><span class="keyword">if</span> ! yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL 8.0 yum源不存在，正在添加...&quot;</span></span><br><span class="line">    <span class="comment"># 添加MySQL官方的yum源</span></span><br><span class="line">    sudo yum install -y <span class="variable">$MYSQL_REPO_URL</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;添加MySQL yum源失败，请检查网络连接或者源URL。&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL 8.0 yum源已存在。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MySQL 8.0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始安装MySQL 8.0...&quot;</span></span><br><span class="line">sudo yum install -y mysql-community-server --nogpgcheck</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查安装是否成功</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL 8.0 安装成功。&quot;</span></span><br><span class="line">    <span class="comment"># 启动MySQL服务</span></span><br><span class="line">    sudo systemctl start mysqld</span><br><span class="line">    <span class="comment"># 获取并显示MySQL的初始化密码</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在获取MySQL的初始化密码...&quot;</span></span><br><span class="line">    INITIAL_ROOT_PASSWORD=$(grep <span class="string">&#x27;password&#x27;</span> /var/log/mysqld.log | <span class="built_in">head</span> -n1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$INITIAL_ROOT_PASSWORD</span></span><br><span class="line">    <span class="comment"># 开机自启MySQL服务</span></span><br><span class="line">    sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL服务已启动并设置为开机自启。&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL 8.0 安装失败，请检查yum源或者联系管理员。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;daokun&#x27;; </span><br><span class="line">FLUSH PRIVILEGES;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Centos7.9的网络管理技能</title>
      <link href="/2023/07/06/%E5%9F%BA%E4%BA%8ECentos7-9%E7%9A%84%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD/"/>
      <url>/2023/07/06/%E5%9F%BA%E4%BA%8ECentos7-9%E7%9A%84%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>对于提供互联网应用的服务器，网络防火墙是其抵御攻击破坏的安全屏障，如 何在攻击时及时做出有效的措施是网络应用时时刻刻面对的问题。高昂的硬件防火墙是一般开发者难以接受的。Linux系统的出现，为开发者低成本解决安全问题提供 了一种可行的方案。要熟练应用<strong>Linux防火墙</strong>，首先需要了解TCP&#x2F;IP网络的基本原理，理解Linux防火墙的工作原理，并熟练掌握Linux系统下提供的各种工具。</p><p>如果管理的计算机有几十台，初始化服务器配置IP地址、网关和子网掩码等参 数是个烦琐耗时的过程。如果网络结构要更改，需要重新初始化网络参数，使用<strong>动态主机配置协议</strong>（Dynamic Host Configuration Protocol，DHCP）则可以避免 此问题，客户端可以从DHCP服务端检索相关信息并完成相关网络配置，在系统重启 后依然可以工作。尤其在移动办公领域，只要区域内有一台DHCP服务器，用户就可 以在办公室之间自由活动而不必担心网络参数配置的问题。DHCP提供一种动态指定 IP地址和相关网络配置参数的机制。 </p><p>如今互联网应用越来越丰富，如仅仅用IP地址标识网络上的计算机是不可能完成任务的，也没有必要，于是产生了<strong>域名系统</strong>。域名系统通过一系列有意义的名称 标识网络上的计算机，用户按域名请求某个网络服务时，域名系统负责将其解析为 对应的IP地址，这便是DNS。 </p><p>本文的主要内容:</p><ul><li><strong>网络管理协议</strong> </li><li><strong>常用的网络管理命令</strong> </li><li><strong>Linux的网络配置方法</strong></li><li><strong>高级网络配置</strong></li><li><strong>DHCP配置</strong></li><li><strong>DNS配置</strong></li></ul><h1 id="网络管理协议"><a href="#网络管理协议" class="headerlink" title="网络管理协议"></a>网络管理协议</h1><p>这里主要简单介绍<strong>TCP&#x2F;IP协议</strong>，<strong>UDP协议</strong>和<strong>ICMP协议</strong>。更多内容请自行查找。</p><h2 id="TCP-x2F-IP协议"><a href="#TCP-x2F-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a>TCP&#x2F;IP协议</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706094840340.png" alt="image-20230706094840340" style="zoom:50%;"><p><strong>网络接口层</strong>:主要为上层提供服务，完成链路控制等功能。</p><p><strong>网际互联层</strong>:主要解决主机到主机之间的通信问题。其主要协议有：网际协议（IP）、地址解析协议 （ARP）、反向地址解析协议（RARP）和互联网控制报文协议（ICMP）。</p><p><strong>传输层</strong>：为应用层提供端到端的通信功能，同时提供流量控制，确保数据完整和正确。TCP协议位于该层，提供一种可靠的、面向连接的数据传输服务；与此对应的是UDP协议，提供不可靠的、无连接的数据报传输服务。</p><p><strong>应用层</strong>:对应于OSI参考模型中的上面3层， 为用户提供所需要的各种应用服务，如FTP、Telnet、DNS、SMTP等。</p><h2 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h2><p>由于不同体系结构的计算机存储数据的格式和顺序都不一样，要使用互联网互联必须定义一个数据的表示标准。如一台计算机发送1个32位的整数至另外一台计算 机，由于机器上存储整数的字节顺序可能不一样，按照源计算机的格式发送到目的 主机可能会改变数字的值。</p><p>TCP&#x2F;IP协议定义了一种所有机器在互联网分组的二进制 字段中必须使用的网络标准字节顺序（network standard byte order），与此对应的是主机字节顺序，主机字节顺序是和各个主机密切相关的。传输时需要遵循 以下转换规则：“<strong>主机字节顺序→网络字节顺序→主机字节顺序</strong>”，即发送方将主 机字节顺序的整数转换为网络字节顺序然后发送出去，接收方收到数据后将网络字 节顺序的整数转换为自己的主机字节顺序然后处理。</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>UDP（User Datagram Protocol）是一种无连接的传输层协议，主要用于不要 求分组顺序到达的传输中，分组传输顺序的检查与排序由应用层完成，提供面向事 务的简单不可靠信息传送服务。由于其不提供数据包分组、组装和不能对数据包进 行排序的缺点，当报文发送之后，是无法得知其是否安全完整到达的，同时流量不 易控制，如网络质量较差，则UDP协议数据包丢失会比较严重。但UDP协议具有资源 消耗小，处理速度快的优点。 </p><h2 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a><strong>ICMP协议</strong></h2><p>ICMP是Internet Control Message Protocol（Internet控制报文协议）的 缩写，属于TCP&#x2F;IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消 息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。 如经常使用的用于检查网络通不通的ping命令，ping的过程实际上就是ICMP协议工 作的过程。<strong>ICMP唯一的功能是报告问题而不是纠正错误</strong>，纠正错误的任务由发送方 完成。</p><h1 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h1><h2 id="检查网络通常或速度ping"><a href="#检查网络通常或速度ping" class="headerlink" title="检查网络通常或速度ping"></a>检查网络通常或速度ping</h2><p>ping常常用来测试与目标主机或域名是否可达，通过发送ICMP数据包到网络主 机，并显示响应情况，并根据输出信息来确定目标主机或域名是否可达。ping的结 果通常情况下是可信的，由于有些服务器可以设置禁止ping，从而使ping的结果并不是完全可信的。</p><p>Linux下ping不会自动终止，需要按“Ctrl+c”终止或用参数“-c”指定要求 完成的回应次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [-dfnqrRv][-c&lt;完成次数&gt;][-i&lt;间隔秒数&gt;][-I&lt;网络界面&gt;][-l&lt;前置载入&gt;][-p&lt;范本样式&gt;][-s&lt;数据包大小&gt;][-t&lt;存活数值&gt;][主机名称或IP地址]</span><br></pre></td></tr></table></figure><ul><li>-d 使用Socket的SO_DEBUG功能。</li><li>-c &lt;完成次数&gt; 设置完成要求回应的次数。</li><li>-f 极限检测。</li><li>-i&lt;间隔秒数&gt; 指定收发信息的间隔时间。</li><li>-I&lt;网络界面&gt; 使用指定的网络接口送出数据包。</li><li>-l&lt;前置载入&gt; 设置在送出要求信息之前，先行发出的数据包。</li><li>-n 只输出数值。</li><li>-p&lt;范本样式&gt; 设置填满数据包的范本样式。</li><li>-q 不显示指令执行过程，开头和结尾的相关信息除外。</li><li>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。</li><li>-R 记录路由过程。</li><li>-s&lt;数据包大小&gt; 设置数据包的大小。</li><li>-t&lt;存活数值&gt; 设置存活数值TTL的大小。</li><li>-v 详细显示指令的执行过程。</li><li>-w <deadline> 在 deadline 秒后退出。</deadline></li><li>-W <timeout> 在等待 timeout 秒后开始执行。</timeout></li></ul><p>示例如下:</p><ol><li>直接ping(下图是ping的通的情况)</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706095853040.png" alt="image-20230706095853040" style="zoom: 33%;"><ol start="2"><li>ping指定次数</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706100025953.png" alt="image-20230706100025953" style="zoom: 50%;"><ol start="3"><li>指定时间间隔和次数限制</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706100138368.png" alt="image-20230706100138368" style="zoom:50%;"><ol start="4"><li>ping公网域名</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706100226925.png" alt="image-20230706100226925" style="zoom:50%;"><ol start="5"><li>发送周期，设置发送包的大小，设置TTL值</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706100800580.png" alt="image-20230706100800580" style="zoom:50%;"><p>更多内容:<a href="https://www.runoob.com/linux/linux-comm-ping.html">Linux ping 命令 | 菜鸟教程 (runoob.com)</a></p><h2 id="配置网络或显示当前网络接口状态ifconfig"><a href="#配置网络或显示当前网络接口状态ifconfig" class="headerlink" title="配置网络或显示当前网络接口状态ifconfig"></a>配置网络或显示当前网络接口状态ifconfig</h2><p>ifconfig命令可以用于查看、配置、启用或禁用指定网络接口，如配置网卡的 IP地址、掩码、广播地址、网关等，Windows类似的命令为ipconfig。</p><p>语法如下： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [网络设备][down up -allmulti -arp -promisc][add&lt;地址&gt;][del&lt;地址&gt;][&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;][io_addr&lt;I/O地址&gt;][irq&lt;IRQ地址&gt;][media&lt;网络媒介类型&gt;][mem_start&lt;内存地址&gt;][metric&lt;数目&gt;][mtu&lt;字节&gt;][netmask&lt;子网掩码&gt;][tunnel&lt;地址&gt;][-broadcast&lt;地址&gt;][-pointopoint&lt;地址&gt;][IP地址]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>add&lt;地址&gt; 设置网络设备IPv6的IP地址。</li><li>del&lt;地址&gt; 删除网络设备IPv6的IP地址。</li><li>down 关闭指定的网络设备。</li><li>&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt; 设置网络设备的类型与硬件地址。</li><li>io_addr&lt;I&#x2F;O地址&gt; 设置网络设备的I&#x2F;O地址。</li><li>irq&lt;IRQ地址&gt; 设置网络设备的IRQ。</li><li>media&lt;网络媒介类型&gt; 设置网络设备的媒介类型。</li><li>mem_start&lt;内存地址&gt; 设置网络设备在主内存所占用的起始地址。</li><li>metric&lt;数目&gt; 指定在计算数据包的转送次数时，所要加上的数目。</li><li>mtu&lt;字节&gt; 设置网络设备的MTU。</li><li>netmask&lt;子网掩码&gt; 设置网络设备的子网掩码。</li><li>tunnel&lt;地址&gt; 建立IPv4与IPv6之间的隧道通信地址。</li><li>up 启动指定的网络设备。</li><li>-broadcast&lt;地址&gt; 将要送往指定地址的数据包当成广播数据包来处理。</li><li>-pointopoint&lt;地址&gt; 与指定地址的网络设备建立直接连线，此模式具有保密功能。</li><li>-promisc 关闭或启动指定网络设备的promiscuous模式。</li><li>[IP地址] 指定网络设备的IP地址。</li><li>[网络设备] 指定网络设备的名称。</li></ul><p>示例</p><ol><li>显示网络设备信息</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706101545068.png" alt="image-20230706101545068" style="zoom:50%;"><blockquote><p> 第1行：UP表示此网络接口为启用状态，RUNNING表示网卡设备已连接，MULTICAST表示支持组播，MTU为数据包最大传输单元。</p><p>第2行：依次为网卡IP、子网掩码、广播地址。</p><p>第3行：ipv6地址。</p><p>第4行：Ethernet（以太网）表示连接类型，ether为网卡的MAC地 址。</p><p>第5行：接收数据包个数、大小统计信息</p><p> 第6行：异常接收包的数量，如丢包量，错误等。</p><p>第7行：发送数据包个数、大小统计信息。</p><p>第8行：导演发送包的数量，如丢包量，错误等。</p><p>如果第6行和第8行中的丢包量、错误包量较高，通常表示物理链路存在问题。 例如网线干扰过大、距离太长等。</p></blockquote><p>显示指定网卡信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706102228322.png" alt="image-20230706102228322" style="zoom:50%;"><ol start="2"><li>启动关闭指定网卡</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 down  <span class="comment"># 关闭</span></span><br><span class="line">ifconfig ens33 up   <span class="comment"># 开启</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>为网卡配置和删除IPv6地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 add 33ffe:3240:800:1005::2/ 64 //为网卡设置IPv6地址</span><br><span class="line"></span><br><span class="line">ifconfig ens33 del 33ffe:3240:800:1005::2/ 64 //为网卡删除IPv6地址</span><br></pre></td></tr></table></figure></li><li><p>修改MAC地址</p></li></ol><p>用ifconfig修改MAC地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 down //关闭网卡</span><br><span class="line">ifconfig ens33 hw ether 00:AA:BB:CC:DD:EE //修改MAC地址</span><br><span class="line">ifconfig ens33 up //启动网卡</span><br><span class="line">ifconfig ens33 hw ether 00:1D:1C:1D:1E //关闭网卡并修改MAC地址 </span><br><span class="line">ifconfig ens33 up //启动网卡</span><br></pre></td></tr></table></figure><ol start="5"><li><p>启用和关闭ARP协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 arp  //开启</span><br><span class="line">ifconfig ens33 -arp  //关闭</span><br></pre></td></tr></table></figure></li><li><p>设置最大传输单元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ifconfig ens33 mtu 1500 </span><br><span class="line">//设置能通过的最大数据包大小为 1500 bytes</span><br></pre></td></tr></table></figure></li></ol><p>更多内容:<a href="https://www.runoob.com/linux/linux-comm-ifconfig.html">Linux ifconfig命令 | 菜鸟教程 (runoob.com)</a></p><h2 id="显示添加或修改路由表route"><a href="#显示添加或修改路由表route" class="headerlink" title="显示添加或修改路由表route"></a>显示添加或修改路由表route</h2><p><strong>显示所有的路由表</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706102928181.png" alt="image-20230706102928181" style="zoom:50%;"><p><strong>添加一条路由</strong></p><p>发往192.168.60.0网段的全部要经过网关192.168.2.1</p><p><code>route add -net 192.168.60.0 netmask 255.255.255.0 gw 192.168.2.1</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706103408029.png" alt="image-20230706103408029" style="zoom:50%;"><p><strong>删除一条路由</strong></p><p>删除的时候不需要网关</p><p><code>route del -net 192.168.60.0 netmask 255.255.255.0</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706103457551.png" alt="image-20230706103457551" style="zoom:50%;"><h2 id="复制文件至其他系统scp"><a href="#复制文件至其他系统scp" class="headerlink" title="复制文件至其他系统scp"></a>复制文件至其他系统scp</h2><p>如本地主机需要和远程主机进行数据迁移或文件传送，可以使用ftp，或搭建 Web服务，另外可选的方法有scp或rsync。</p><p>Linux scp 命令用于 Linux 之间复制文件和目录。也可以用于windows传递数据(前提是安装openssh协议，<a href="https://blog.csdn.net/denglavender/article/details/109631478">解决办法</a>,<a href="https://zhuanlan.zhihu.com/p/542926236">关于scp传输文件踩过的坑(最全!linux与windows相互传输文件</a>)</p><p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p><p>scp 是加密的，<a href="https://www.runoob.com/linux/linux-comm-rcp.html">rcp</a> 是不加密的，scp 是 rcp 的加强版。</p><p>注意由于各个发行版不同，scp语法不尽相同，具体使用方法可查看系统帮助。</p><p>语法如下(简易语法):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [可选参数] file_source file_target </span><br></pre></td></tr></table></figure><p>centos系统ip：192.168.2.6</p><p>ubuntu系统ip: 192.168.2.7</p><p>windows系统：192.168.2.2</p><h3 id="从本地复制到远程"><a href="#从本地复制到远程" class="headerlink" title="从本地复制到远程"></a>从本地复制到远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单版</span></span><br><span class="line"> scp 本地文件 对端ip:对面目录</span><br><span class="line"><span class="comment"># 指定用户名需要输入密码</span></span><br><span class="line">scp 本地文件目录 远程用户名@对端ip：远程文件目录</span><br></pre></td></tr></table></figure><h4 id="Centos7-9到ubuntu20-0（以add-sh为例子）"><a href="#Centos7-9到ubuntu20-0（以add-sh为例子）" class="headerlink" title="Centos7.9到ubuntu20.0（以add.sh为例子）"></a>Centos7.9到ubuntu20.0（以add.sh为例子）</h4><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706110300510.png" alt="image-20230706110300510" style="zoom:50%;"><p>指定了root用户传输文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /root/add.sh root@192.168.2.7:/home/daokun/桌面</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">传输目录-r</span><br><span class="line">scp -r /root/test root@192.168.2.7:/home/daokun/桌面</span><br></pre></td></tr></table></figure></blockquote><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706110553520.png" alt="image-20230706110553520" style="zoom:50%;"><p>登录ubuntu查看</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706110943408.png" alt="image-20230706110943408" style="zoom:50%;"><h4 id="win10到ubuntu"><a href="#win10到ubuntu" class="headerlink" title="win10到ubuntu"></a>win10到ubuntu</h4><p>准备的文件</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706114032344.png" alt="image-20230706114032344" style="zoom:33%;"><p>命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /D:/KwDownload/song root@192.168.2.7:/home/daokun</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706114054362.png" alt="image-20230706114054362" style="zoom:50%;"><h3 id="从远程到本地"><a href="#从远程到本地" class="headerlink" title="从远程到本地"></a>从远程到本地</h3><p>从远程复制到本地，只要将从本地复制到远程的命令的后2个参数调换顺序即可</p><h4 id="Centos7-9到ubuntu20-0-在ubuntu操作"><a href="#Centos7-9到ubuntu20-0-在ubuntu操作" class="headerlink" title="Centos7.9到ubuntu20.0(在ubuntu操作)"></a>Centos7.9到ubuntu20.0(在ubuntu操作)</h4><p>复制centos系统&#x2F;root&#x2F;test目录到ubuntu系统</p><p>现在centos的ip是192.168.2.5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@192.168.2.6:/root/test /home/daokun/桌面</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706122558338.png" alt="image-20230706122558338" style="zoom:50%;"><h2 id="复制文件至其他系统rsync"><a href="#复制文件至其他系统rsync" class="headerlink" title="复制文件至其他系统rsync"></a>复制文件至其他系统rsync</h2><p> rsync是Linux系统下的常用的数据镜像备份工具，用于在不同的主机之间同步文件。</p><p>从字面意思上，rsync 可以理解为 remote sync（远程同步），但它不仅可以远程同步数据（类似于 scp 命令），还可以本地同步数据（类似于 cp 命令）。不同于 cp 或 scp 的一点是，使用 rsync 命令备份数据时，不会直接覆盖以前的数据（如果数据已经存在），而是先判断已经存在的数据和新数据的差异，只有数据不同时才会把不相同的部分覆盖。</p><h3 id="本地文件传送到远程主机-默认在家目录，命名为daokun1-txt"><a href="#本地文件传送到远程主机-默认在家目录，命名为daokun1-txt" class="headerlink" title="本地文件传送到远程主机(默认在家目录，命名为daokun1.txt)"></a>本地文件传送到远程主机(默认在家目录，命名为daokun1.txt)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -v --port 56789 daokun.txt root@192.168.2.7:daokun1.txt</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706181503083.png" alt="image-20230706181503083" style="zoom:50%;"><h3 id="本地目录传送到远程主机（命名为dao）"><a href="#本地目录传送到远程主机（命名为dao）" class="headerlink" title="本地目录传送到远程主机（命名为dao）"></a>本地目录传送到远程主机（命名为dao）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --port 56789 daokun root@192.168.2.7:dao</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706181550095.png" alt="image-20230706181550095" style="zoom: 33%;"><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706181924970.png" alt="image-20230706181924970"></p><h3 id="远程复制到本机"><a href="#远程复制到本机" class="headerlink" title="远程复制到本机"></a>远程复制到本机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av -e <span class="string">&quot;ssh -p 22&quot;</span> root@192.168.0.100:/root/Python-3.7.5.tar /root/</span><br></pre></td></tr></table></figure><p>用法更多详解:<a href="http://c.biancheng.net/view/6121.html">Linux rsync命令用法详解 (biancheng.net)</a></p><p><a href="https://blog.csdn.net/qiuweifan/article/details/122158629"> rsync 从一台服务器远程拉取另一台服务器数据的实践</a></p><h2 id="显示网络连接、路由表或接口状态netstat"><a href="#显示网络连接、路由表或接口状态netstat" class="headerlink" title="显示网络连接、路由表或接口状态netstat"></a>显示网络连接、路由表或接口状态netstat</h2><p>netstat命令用于监控系统网络配置和工作状况，可以显示内核路由表、活动的网络状态以及每个网络接口的有用的统计数字。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有连接中的Socket</td></tr><tr><td>-c</td><td>持续列出网络状态</td></tr><tr><td>-h</td><td>在线帮助</td></tr><tr><td>-i</td><td>显示网络界面</td></tr><tr><td>-l</td><td>显示监控中的服务器的Socket</td></tr><tr><td>-n</td><td>直接使用IP地址</td></tr><tr><td>-p</td><td>显示正在使用Socket的程序名</td></tr><tr><td>-r</td><td>显示路由表</td></tr><tr><td>-s</td><td>显示网络工作信息统计表</td></tr><tr><td>-t</td><td>显示TCP端口情况</td></tr><tr><td>-u</td><td>显示UDP端口情况</td></tr><tr><td>-v</td><td>显示命令执行过程</td></tr><tr><td>-V</td><td>显示版本信息</td></tr></tbody></table><p>示例</p><p><strong>显示所有端口，包括UDP、TCP</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -a|<span class="built_in">head</span> -4</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706190019433.png" alt="image-20230706190019433"></p><p><strong>显示所有TCP端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -at</span><br></pre></td></tr></table></figure><p><strong>显示所有UDP端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -au</span><br></pre></td></tr></table></figure><p><strong>所有TCP端口并显示对应的进程名称或进程号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -plnt</span><br></pre></td></tr></table></figure><p><strong>显示核心路由信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -r</span><br></pre></td></tr></table></figure><p><strong>显示网络接口列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -i</span><br></pre></td></tr></table></figure><h2 id="下载工具wget"><a href="#下载工具wget" class="headerlink" title="下载工具wget"></a><strong>下载工具wget</strong></h2><p>语法: <code>wget [参数] [软件地址]</code></p><p>参数：</p><ul><li>-b 后台执行</li><li>-nc 不覆盖原有文件</li><li>-c 断点续传</li></ul><p>举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://ftp.gnu.org/gnu/wget/wget-1.14.tar.g</span><br></pre></td></tr></table></figure><h1 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h1><p>Linux网络配置相关的文件根据不同的发行版目录名称有所不同，但大同小异， 主要有以下目录或文件。</p><p>1）<code>/etc/hostname</code>：主要功能在于修改主机名称。</p><p>2）<code>/etc/sysconfig/network-scrips/ifcfg-enoN</code>：是设置网卡参数的文 件，比如IP地址、子网掩码、广播地址、网关等，N为一串数字。</p><p>3）<code>/etc/resolv.conf</code>：此文件设置了DNS相关的信息，用于将域名解析到 IP。</p><p>4）<code>/etc/hosts</code>：计算机的IP对应的主机名称或域名对应的IP地址，通过设置&#x2F;etc&#x2F;nsswitch.conf中的选项可以选择是DNS解析优先还是本地设置优先。 </p><p>5）<code>/etc/nsswitch.conf</code>name service switch configuration，名字服务切换配置）：规定通过哪些途径，以及按照什么顺序通过这些途径来查找特定类型的信息。</p><h2 id="配置Linux系统的IP地址"><a href="#配置Linux系统的IP地址" class="headerlink" title="配置Linux系统的IP地址"></a>配置Linux系统的IP地址</h2><p>首先进入目录<code>cd /etc/sysconfig/network-scripts</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706191746849.png" alt="image-20230706191746849"></p><p>我们使用的网卡是ens33,所以<code>vim ifcfg-ens33</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706192002745.png" alt="image-20230706192002745" style="zoom: 50%;"><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td><strong>TYPE&#x3D;Ethernet</strong></td><td>类型，以太网</td></tr><tr><td>BOOTPROTO&#x3D;none</td><td>置为none禁止DHCP，设置为static启用静态IP地址，设置为dhcp开启DHCP服务</td></tr><tr><td>NETMASK&#x3D;255.255.255.0</td><td>子网掩码</td></tr><tr><td>PREFIX &#x3D; 24</td><td>子网掩码</td></tr><tr><td>NAME</td><td>设备名，此处对应网络接口为ens33</td></tr><tr><td>ONBOOT&#x3D;yes</td><td>是否开机自启</td></tr></tbody></table><p>自己可以添加的</p><table><thead><tr><th>BOOTPROTO&#x3D;none</th><th>设置为static启用静态IP地址</th></tr></thead><tbody><tr><td>**DNS1&#x3D;**8.8.8.8，DNS2&#x3D;(dns自行找最优的)</td><td>设置DNS1,DNS2</td></tr><tr><td>IPADDR&#x3D;</td><td>静态IP地址</td></tr><tr><td>GATEWAY&#x3D;</td><td>网关</td></tr></tbody></table><p>设置完ifcfg-ens33文件后，需要重启网络服务才能生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>ifconfig也可以设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 192.168.146.152 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>记得重启网络</p><h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><p>临时设置</p><p><code>hostname 名字</code>重新打开终端可以看见，重启失效</p><p>永久设置（直接写入）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname </span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706194105047.png" alt="image-20230706194105047"></p><h2 id="设置默认网关"><a href="#设置默认网关" class="headerlink" title="设置默认网关"></a>设置默认网关</h2><p>设置好IP地址以后，如果要访问其他的子网或Internet，用户还需要设置路 由，在此不做介绍，这里采用设置默认网关的方法。在Linux中，设置默认网关有两 种方法：</p><ul><li>第1种方法就是直接使用route命令，在设置默认网关之前，先用route – n命令查看路由表。执行如下命令设置网关。通常适用于临时测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add default gw 192.168.1.1</span><br></pre></td></tr></table></figure><ul><li>第2种方法是在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-接口文件中 添加如下字段：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure><p>必须重启网络服务来使设置生效，可执行下面 的命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h2 id="设置DNS服务器"><a href="#设置DNS服务器" class="headerlink" title="设置DNS服务器"></a>设置DNS服务器</h2><p>设置DNS服务器需修改<code>/etc/resolv.conf</code>文件即可</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706203553162.png" alt="image-20230706203553162" style="zoom:50%;"><p>其中192.168.3.1为第一名字服务器，192.168.3.2为第二名字服务器， option rotate选项指在这2个dns server之间轮询，option timeout:1表示解析超时时间1s（默认为5s），attempts表示解析域名尝试的次数。如需添加DNS服务器，可直接修改此文件，需要注意的是使用nameserver指定的DNS服务器只有前三条生效。</p><h2 id="Linux防火墙"><a href="#Linux防火墙" class="headerlink" title="Linux防火墙"></a>Linux防火墙</h2><p>在最新版的CentOS 7中，系统安装了两个防火墙<strong>firewalld</strong>和<strong>iptables</strong>，并且默认使用<strong>firewalld</strong>。本文使用firewalld。更多内容<a href="https://www.linuxprobe.com/basic-learning-08.html">iptables和firewalld详解</a>(本节内容基本选自LinuxProbe)</p><p>iptables与firewalld都不是真正的防火墙，它们都只是用来定义防火墙策略的防火墙管理工具而已；或者说，它们只是一种服务。iptables服务会把配置好的防火墙策略交由内核层面的netfilter网络过滤器来处理，而firewalld服务则是把配置好的防火墙策略交由内核层面的nftables包过滤框架来处理。</p><p>firewalld支持动态更新技术并加入了区域（zone）的概念。简单来说，区域就是firewalld预先准备了几套防火墙策略集合（策略模板）</p><table><thead><tr><th>区域</th><th>默认规则策略</th></tr></thead><tbody><tr><td>trusted</td><td>允许所有的数据包</td></tr><tr><td>home</td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许流量</td></tr><tr><td>internal</td><td>等同于home区域</td></tr><tr><td>work</td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、ipp-client与dhcpv6-client服务相关，则允许流量</td></tr><tr><td>public</td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许流量</td></tr><tr><td>external</td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量</td></tr><tr><td>dmz</td><td>拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量</td></tr><tr><td>block</td><td>拒绝流入的流量，除非与流出的流量相关</td></tr><tr><td>drop</td><td>拒绝流入的流量，除非与流出的流量相关</td></tr></tbody></table><h4 id="终端管理工具"><a href="#终端管理工具" class="headerlink" title="终端管理工具"></a>终端管理工具</h4><p>firewall-cmd是firewalld防火墙配置管理工具的CLI（命令行界面）版本。它的参数一般都是以“长格式”来提供的。能用Tab键自动补齐命令</p><p>​                        firewall-cmd命令中使用的参数以及作用</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–get-default-zone</td><td>查询默认的区域名称</td></tr><tr><td>–set-default-zone&#x3D;&lt;区域名称&gt;</td><td>设置默认的区域，使其永久生效</td></tr><tr><td>–get-zones</td><td>显示可用的区域</td></tr><tr><td>–get-services</td><td>显示预先定义的服务</td></tr><tr><td>–get-active-zones</td><td>显示当前正在使用的区域与网卡名称</td></tr><tr><td>–add-source&#x3D;</td><td>将源自此IP或子网的流量导向指定的区域</td></tr><tr><td>–remove-source&#x3D;</td><td>不再将源自此IP或子网的流量导向某个指定区域</td></tr><tr><td>–add-interface&#x3D;&lt;网卡名称&gt;</td><td>将源自该网卡的所有流量都导向某个指定区域</td></tr><tr><td>–change-interface&#x3D;&lt;网卡名称&gt;</td><td>将某个网卡与区域进行关联</td></tr><tr><td>–list-all</td><td>显示当前区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td>–list-all-zones</td><td>显示所有区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td>–add-service&#x3D;&lt;服务名&gt;</td><td>设置默认区域允许该服务的流量</td></tr><tr><td>–add-port&#x3D;&lt;端口号&#x2F;协议&gt;</td><td>设置默认区域允许该端口的流量</td></tr><tr><td>–remove-service&#x3D;&lt;服务名&gt;</td><td>设置默认区域不再允许该服务的流量</td></tr><tr><td>–remove-port&#x3D;&lt;端口号&#x2F;协议&gt;</td><td>设置默认区域不再允许该端口的流量</td></tr><tr><td>–reload</td><td>让“永久生效”的配置规则立即生效，并覆盖当前的配置规则</td></tr><tr><td>–panic-on</td><td>开启应急状况模式</td></tr><tr><td>–panic-off</td><td>关闭应急状况模式</td></tr></tbody></table><p>使用firewalld配置的防火墙策略默认为运行时（Runtime）模式，又称为当前生效模式，而且会随着系统的重启而失效。如果想让配置策略一直存在，就需要使用永久（Permanent）模式了，方法就是在用firewall-cmd命令正常设置防火墙策略时添加–permanent参数(注意：永久生效模式只有在<strong>系统重启之后才能自动生效</strong>)</p><p>如果想让配置的策略立即生效，需要手动执行<code>firewall-cmd --reload</code>命令。</p><p><strong>1．查看firewalld服务当前所使用的区域。</strong></p><p>这是一步非常重要的操作。在配置防火墙策略前，必须查看当前生效的是哪个区域，否则配置的防火墙策略将不会立即生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706204629315.png" alt="image-20230706204629315" style="zoom:50%;"><p><strong>2．查询指定网卡在firewalld服务中绑定的区域。</strong></p><p>在生产环境中，服务器大多不止有一块网卡。一般来说，充当网关的服务器有两块网卡，一块对公网，另外一块对内网，那么这两块网卡在审查流量时所用的策略肯定也是不一致的。因此，可以根据网卡针对的流量来源，为网卡绑定不同的区域，实现对防火墙策略的灵活管控。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-zone-of-interface=ens33</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706204735769.png" alt="image-20230706204735769" style="zoom:50%;"><p><strong>3．把网卡默认区域修改为external，并在系统重启后生效。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=external --change-interface=ens33</span><br><span class="line">firewall-cmd --permanent --get-zone-of-interface=ens33</span><br></pre></td></tr></table></figure><p><strong>4．把firewalld服务的默认区域设置为public。</strong></p><p>默认区域也叫全局配置，指的是对所有网卡都生效的配置，优先级较低。在下面的代码中可以看到，当前默认区域为public，而ens33网卡的区域为external。此时便是以网卡的区域名称为准。</p><p>通俗来说，默认区域就是一种通用的政策。例如，食堂为所有人准备了一次性餐具，而环保主义者则会自己携带碗筷。如果您自带了碗筷，就可以用自己的；反之就用食堂统一提供的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --set-default-zone=public</span><br><span class="line">firewall-cmd --get-default-zone </span><br><span class="line">firewall-cmd --get-zone-of-interface=ens33</span><br></pre></td></tr></table></figure><p><strong>5．启动和关闭firewalld防火墙服务的应急状况模式。</strong></p><p>如果想在1s的时间内阻断一切网络连接，有什么好办法呢？大家下意识地会说：“拔掉网线！”这是一个物理级别的高招。但是，如果人在北京，服务器在异地呢？panic紧急模式在这个时候就派上用场了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-on</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-off</span><br></pre></td></tr></table></figure><p><strong>6．查询SSH和HTTPS协议的流量是否允许放行。</strong></p><p>在工作中可以不使用–zone参数指定区域名称，firewall-cmd命令会自动依据默认区域进行查询，从而减少用户输入量。但是，如果默认区域与网卡所绑定的不一致时，就会发生冲突，因此规范写法的zone参数是一定要加的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-service=ssh</span><br><span class="line">firewall-cmd --zone=public --query-service=https</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706210924844.png" alt="image-20230706210924844" style="zoom:50%;"><p><strong>7．把HTTPS协议的流量设置为永久允许放行，并立即生效。</strong></p><p>默认情况下进行的修改都属于Runtime模式，即当前生效而重启后失效。因此在工作和考试中尽量避免使用。</p><p>而在使用–permanent参数时，则是当前不会立即看到效果，而在重启或重新加载后方可生效。于是，在添加了允许放行HTTPS流量的策略后，查询当前模式策略，发现依然是不允许放行HTTPS协议的流量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --zone=public --query-service=https</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706211424174.png" alt="image-20230706211424174" style="zoom:50%;"><p>不想重启服务器的话，就用–reload参数吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --zone=public --query-service=https</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706211500480.png" alt="image-20230706211500480" style="zoom:50%;"><p><strong>8．把HTTP协议的流量设置为永久拒绝，并立即生效。</strong></p><p>由于在默认情况下HTTP协议的流量就没有被允许，所以会有“Warning: NOT_ENABLED: http”这样的提示信息，因此对实际操作没有影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706211612560.png" alt="image-20230706211612560" style="zoom:50%;"><p><strong>9．把访问8080和8081端口的流量策略设置为允许，但仅限当前生效。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080-8081/tcp</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706211714664.png" alt="image-20230706211714664" style="zoom:50%;"><h4 id="图形管理工具"><a href="#图形管理工具" class="headerlink" title="图形管理工具"></a><strong>图形管理工具</strong></h4><p>在LinuxProbe:<a href="https://www.linuxprobe.com/basic-learning-08.html">iptables和firewalld</a></p><h1 id="Linux高级网络配置工具"><a href="#Linux高级网络配置工具" class="headerlink" title="Linux高级网络配置工具"></a>Linux高级网络配置工具</h1><p>目前很多Linux在使用之前的arp、ifconfig和route命令。虽然这些工具能够 工作，但它们在Linux 2.2和更高版本的内核上显得有一些落伍。无论对于Linux开 发者还是Linux系统管理员，网络程序调试时数据包的采集和分析是不可少的。</p><p>tcpdump是Linux中强大的数据包采集分析工具之一。本节主要介绍iproute2和 tcpdump的相关知识。</p><h3 id="高级网络管理工具iproute2"><a href="#高级网络管理工具iproute2" class="headerlink" title="高级网络管理工具iproute2"></a>高级网络管理工具iproute2</h3><p>安装<code>yum install -y iproute</code></p><p>检查安装<code>rpm -qa|grep iproute</code></p><p>版本<code>ip -V</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706213602972.png" alt="image-20230706213602972" style="zoom:33%;"><h4 id="ip查看网络配置"><a href="#ip查看网络配置" class="headerlink" title="ip查看网络配置"></a>ip查看网络配置</h4><p><strong>显示网卡参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr list</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706213917728.png" alt="image-20230706213917728" style="zoom:50%;"><p><strong>添加新的网络地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr add 192.168.128.140/24 dev ens33</span><br><span class="line">ip addr list</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706214213973.png" alt="image-20230706214213973" style="zoom:50%;"><p><strong>删除网络地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr del 192.168.128.140/24 dev ens33</span><br></pre></td></tr></table></figure><h3 id="网络数据采集与分析工具tcpdump"><a href="#网络数据采集与分析工具tcpdump" class="headerlink" title="网络数据采集与分析工具tcpdump"></a>网络数据采集与分析工具tcpdump</h3><p>tcpdump即dump traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。对于系统管理员来说，在网络性能急剧下降的时候，可 以通过tcpdump工具分析原因，找出造成网络阻塞的来源。对于程序开发者来说， 可以通过tcpdump工具来调试程序。<strong>tcpdump支持针对网络层、协议、主机、网络或端口的过滤</strong>，并提供and、or、not等逻辑语句过滤不必要的信息。</p><p>Linux系统下tcpdump普通用户是不能正常执行，<strong>一般通过root用户执行</strong>。</p><p>安装:<code> yum install -y tcpdump</code></p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ] [ -i 网络接口 ] [ -r 文件名] [ -s snaplen ] [ -T 类型 ] [ -w 文件名 ] [表达式 ]</span><br></pre></td></tr></table></figure><p>详细参数说明:<a href="https://www.runoob.com/linux/linux-comm-tcpdump.html">tcpdump-菜鸟教程</a></p><p><strong>简单使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any</span><br></pre></td></tr></table></figure><p>tcpdump会从系 统接口列表中搜寻编号最小的已配置好的接口，不包括loopback接口，一旦找到第 1个符合条件的接口，搜寻马上结束，并将获取的数据包打印出来。ctrl+c停止</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706215958506.png" alt="image-20230706215958506" style="zoom: 33%;"><p><strong>过滤</strong></p><p>tcpdump利用表达式作为过滤数据包的条件，表达式可以是正则表达式。如果数据包符合表达式，则数据包被截获；如果没有给出任何条件，则接口上所有的信息包将会被截获。</p><p>表达式中一般有如下几种关键字：</p><ul><li><p>第1种是关于类型的关键字，如<strong>host</strong>、<strong>net</strong>和<strong>port</strong>。例如host 192.168.16.150指明192.168.16.150为一台主机，而net 192.168.16.150则表 示192.168.16.150为一个网络地址。如果没有指定类型，默认的类型是host。 </p></li><li><p>第2种是确定数据包传输方向的关键字，包含src、dst、dst or src和 dst and src，这些关键字指明了数据包的传输方向。例如src 192.168.16.150 指明数据包中的源地址是192.168.16.150，而dst 192.168.16.150则指明数据包 中的目的地址是192.168.16.150。如果没有指明方向关键字，则默认是src or dst关键字。</p></li><li><p>第3种是协议的关键字，如指明是TCP还是UDP协议。</p></li><li><p>还有3种逻辑运算，取非运算 是“not”或“!”，与运算是“and”或“&amp;&amp;”，或运算是“or”或“||”。通过 这些关键字的组合可以实现复杂强大的条件。</p></li></ul><p>过滤主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any host 192.168.2.1</span><br></pre></td></tr></table></figure><p>过滤端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any port 80</span><br></pre></td></tr></table></figure><p>过滤某一网段:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any net 192.168.0.0/16</span><br></pre></td></tr></table></figure><p>过滤协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth1 arp/ip/tcp/udp/icmp</span><br></pre></td></tr></table></figure><p>指定20个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -c 20</span><br></pre></td></tr></table></figure><p>精简显示抓10个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -c 10 -q //精简模式显示 10个包</span><br></pre></td></tr></table></figure><p>tcpdump更多使用:<a href="https://zhuanlan.zhihu.com/p/74812069">Linux系统 tcpdump 抓包命令使用教程</a>,<a href="https://blog.csdn.net/mukouping82/article/details/116249400">抓包语法</a></p><h1 id="动态主机配置协议（DHCP）"><a href="#动态主机配置协议（DHCP）" class="headerlink" title="动态主机配置协议（DHCP）"></a>动态主机配置协议（DHCP）</h1><p>DHCP基于C&#x2F;S模式，主要用于 大型网络。DHCP提供一种动态指定IP地址和相关网络配置参数的机制。</p><h2 id="DHCP工作原理"><a href="#DHCP工作原理" class="headerlink" title="DHCP工作原理"></a>DHCP工作原理</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706223906646.png" alt="image-20230706223906646"></p><p>客户端请求IP地址和配置参数的过程有以下几个步骤：</p><ol><li><p>客户端需要寻求网络IP地址和其他网络参数，然后向网络中广 播，客户端发出的请求名称叫DHCPDISCOVER。如广播网络中有可以分配IP地址 的服务器，服务器会返回相应应答，告诉客户端可以分配，服务器返回包的名 称叫DHCPOFFER，包内包含可用的IP地址和参数。</p></li><li><p>如果客户在发出DHCPOFFER包后一段时间内没有接收到响应，会重新发送请求，如广播区域内有多于一台的DHCP服务器，由客户端决定使用哪个（一般是谁先回应就用谁的）。 </p></li><li><p>当客户端选定了某个目标服务器后，会广播DHCPREQUEST包，用以通知选定的DHCP服务器和未选定的DHCP服务器。</p></li><li><p>服务端收到DHCPREQUEST后会检查收到的包，如果包内的地址和所提供的地址一致，证明现在客户端接收的是自己提供的地址；如果不是，则说明自己提供的地址未被采纳。如被选定的服务器在接收到DHCPREQUEST包以 后，因为某些原因可能不能向客户端提供这个IP地址或参数，可以向客户端发送DHCPNAK包。</p></li><li><p>客户端在收到包后，检查内部的IP地址和租用时间，如发现有问题，则发包拒绝这个地址，然后重新发送DHCPDISCOVER包。如无问题，就接受 这个配置参数。</p></li></ol><h2 id="配置DHCP服务器"><a href="#配置DHCP服务器" class="headerlink" title="配置DHCP服务器"></a>配置DHCP服务器</h2><p>查看是否安装:<code>rpm -qa|grep dhcp</code></p><p>软件安装<code>yum install -y dhcp</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230706224524786.png" alt="image-20230706224524786"></p><p><strong>&#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</strong>为DHCP主配置文件。 <strong>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;dhcpd.service</strong> DHCP服务单元。</p><h3 id="DHCP服务端配置"><a href="#DHCP服务端配置" class="headerlink" title="DHCP服务端配置"></a>DHCP服务端配置</h3><p>编辑配置文件**&#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf**</p><p>本示例实现的功能为当前网络内的服务器分配指定IP段的IP地址，并 设置过期时间为2天。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定接收DHCP请求的网卡的子网地址，注意不是本机的IP地址。netmask为子网掩码</span></span><br><span class="line">subnet 192.168.2.0 netmask 255.255.255.0&#123;</span><br><span class="line"><span class="comment">#指定默认网关</span></span><br><span class="line">option routers 192.168.2.1;</span><br><span class="line"><span class="comment">#指定默认子网掩码</span></span><br><span class="line">option subnet-mask 255.255.255.0;</span><br><span class="line"><span class="comment">#指定最大租用周期</span></span><br><span class="line">max-lease-time 172800 ;</span><br><span class="line"><span class="comment">#此DHCP服务分配的IP地址范围</span></span><br><span class="line">range 192.168.2.2 192.168.2.240;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>subnet-mask 默认子网掩码和max-lease-time最大租用周期，单位是秒。需要特别说明的是，在本地须有一个网络接口的IP地址为192.168.2.0网络，DHCP服务才能启动。</p><p>启动服务<code>systemctl start dhcpd.service</code></p><p>如启动失败可以参考屏幕输出定位错误内容，或查看&#x2F;var&#x2F;log&#x2F;messages的内容</p><h3 id="配置DHCP客户端"><a href="#配置DHCP客户端" class="headerlink" title="配置DHCP客户端"></a>配置DHCP客户端</h3><p>当服务端启动成功后，客户端需要与服务端网络联通，然后做以下配置以便自 动获取IP地址。客户端网卡配置如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707004746333.png" alt="image-20230707004746333" style="zoom:50%;"><p>如需使用DHCP服务， BOOTPROTO&#x3D;dhcp表示将当前主机的网络IP地址设置为自动获取方式。需要说明的是DHCP客户端无须使用CentOS 7，使用其他版本的Linux 或Windows操作系统均可。</p><p>网络重启一下:<code>service network restart</code></p><h1 id="域名服务DNS"><a href="#域名服务DNS" class="headerlink" title="域名服务DNS"></a>域名服务DNS</h1><p>在使用域名访问网络应用时，DNS负责将域名解析为IP地址。</p><h2 id="DNS简介"><a href="#DNS简介" class="headerlink" title="DNS简介"></a>DNS简介</h2><p>DNS是一个<strong>分布式数据库系统</strong>，扩充性好，由于是分布式的存储，数据量的增长 并不会影响其性能。新加入的网络应用可以由DNS负责将新主机的信息传播到网络中 的其他部分。</p><p>域名查询有两种常用的方式：<strong>递归查询</strong>和<strong>迭代查询</strong>。（这两个概念很重要）</p><blockquote><p>递归查询由最初的域名服务器代替客户端进行域名查询。如该域名服务器不能 直接回答，则会在域中的各分支的上下进行递归查询，最终将返回查询结果给客户 端，在域名服务器查询期间，客户端将完全处于等待状态。</p><p>迭代查询则每次由客户端发起请求，如请求的域名服务器能提供需要查询的信 息则返回主机地址信息。如不能提供，则引导客户端到其他域名服务器查询。</p><p>如果不理解请网上找其他资料。</p></blockquote><p>DNS域名服务器的分类有高速缓存服务器、主DNS服务器和辅助DNS服务器。高 速缓存服务器将每次域名查询的结果缓存到本机，主DNS服务器则提供特定域的权威 信息，是可信赖的，辅助DNS服务器信息则来源于主DNS服务器。</p><h2 id="DNS规划"><a href="#DNS规划" class="headerlink" title="DNS规划"></a>DNS规划</h2><table><thead><tr><th>test1.daokun.com</th><th>192.168.2.100</th><th>A</th></tr></thead><tbody><tr><td>test2.daokun.com</td><td>192.168.2.101</td><td>A</td></tr><tr><td>test3.daokun.com</td><td>test2.daokun.com</td><td>CNAME</td></tr></tbody></table><h2 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h2><p>目前网络上的域名服务系统使用最多的为BIND（Berkeley Internet Name Domain）软件，该软件实现了DNS协议。</p><p>centos7安装:<code>yum install -y bind bind-utils</code>或<code>yum install -y bind*</code></p><blockquote><h2 id="ubuntu20-0安装"><a href="#ubuntu20-0安装" class="headerlink" title="ubuntu20.0安装"></a>ubuntu20.0安装</h2><p>ubuntu配置更多内容:<a href="https://www.jianshu.com/p/bf3f7011b9fe">Ubuntu Server 安装配置 bind9 - 简书 (jianshu.com)</a>)</p><p>在终端提示符下，输入以下命令安装 dns:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bind9</span><br></pre></td></tr></table></figure><p>dnsutils 软件包是测试和解决 DNS 问题非常有用的。 这些工具通常已经安装，但是要检查或安装 dnsutils，请输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dnsutils</span><br></pre></td></tr></table></figure></blockquote><p><strong>&#x2F;etc&#x2F;named.conf</strong>为DNS主配置文件 <strong>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;named.service</strong>为DNS服务控制单元</p><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><h4 id="编辑-x2F-etc-x2F-named-conf"><a href="#编辑-x2F-etc-x2F-named-conf" class="headerlink" title="编辑&#x2F;etc&#x2F;named.conf"></a>编辑&#x2F;etc&#x2F;named.conf</h4><p>配置文件如下所示，如需添加注释，可以以“#”、“&#x2F;&#x2F;”</p><p>了解一下name.conf:<code>cat /etc/named.conf</code></p><p>内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// 此配置文件删除了英文注释</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">options：是全局服务器的配置选项，即在options中指定的参数，对配置</span><br><span class="line">中的任何域都有效，如在服务器上要配置多个域如test1.com和test2.com，</span><br><span class="line">在option中指定的选项对这些域都生效。</span><br><span class="line">*/</span><br><span class="line">options &#123;</span><br><span class="line"> <span class="comment"># 端口是53，127.0.0.1是监听本机IP，此处换成any是接收所有主机连接</span></span><br><span class="line">        listen-on port 53 &#123; any; &#125;;</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># directory:指定named从/var/named目录下读取DNS数据文件,可以自行创建，但是目录所属组必须是named,否则无法读取</span></span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># dump-file:当执行导出命令时将DNS服务器的缓存数据存储到指定的文件中。</span></span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># statistics-file：指定named服务的统计文件。当执行统计命令时，会将内存中的统计信息追加到该文件中。</span></span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># allow-query：允许那些客户端可以访问DNS服务，此处“any”表示任意主机。</span></span><br><span class="line">        allow-query     &#123; any; &#125;;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        recursion <span class="built_in">yes</span>;</span><br><span class="line"></span><br><span class="line">        dnssec-enable <span class="built_in">yes</span>;</span><br><span class="line">        dnssec-validation <span class="built_in">yes</span>;</span><br><span class="line"></span><br><span class="line">        /* Path to ISC DLV key */</span><br><span class="line">        bindkeys-file <span class="string">&quot;/etc/named.root.key&quot;</span>;</span><br><span class="line"></span><br><span class="line">        managed-keys-directory <span class="string">&quot;/var/named/dynamic&quot;</span>;</span><br><span class="line"></span><br><span class="line">        pid-file <span class="string">&quot;/run/named/named.pid&quot;</span>;</span><br><span class="line">        session-keyfile <span class="string">&quot;/run/named/session.key&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;</span><br><span class="line">                file <span class="string">&quot;data/named.run&quot;</span>;</span><br><span class="line">                severity dynamic;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zone：每一个zone就是定义一个域的相关信息及指定了named服务从哪些文件中获得DNS各个域名的数据文件。</span></span><br><span class="line"></span><br><span class="line">zone <span class="string">&quot;.&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> hint;</span><br><span class="line">        file <span class="string">&quot;named.ca&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处是我们添加的内容,或者添加到 &quot;/etc/named.rfc1912.zones&quot;文件</span></span><br><span class="line"><span class="comment"># daokun.com正向解析成IP地址，文件是daokun.com.zone</span></span><br><span class="line">zone <span class="string">&quot;daokun.com&quot;</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">&quot;daokun.com.zone&quot;</span>;</span><br><span class="line">allow-update &#123; none;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向解析                                                       </span></span><br><span class="line">zone <span class="string">&quot;2.168.192.in-addr.arpa&quot;</span> IN&#123;                              </span><br><span class="line"><span class="built_in">type</span> master;                                              </span><br><span class="line">file <span class="string">&quot;2.168.192.zone&quot;</span>;                                     </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是区域文件，上面的添加可以放到这里</span></span><br><span class="line">include <span class="string">&quot;/etc/named.rfc1912.zones&quot;</span>;</span><br><span class="line">include <span class="string">&quot;/etc/named.root.key&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>可以选择在”&#x2F;etc&#x2F;named.rfc1912.zones”配置</p><p>抱歉，我这里有个错误，2.168.192.in-addr才是对的，需要有.</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707165009577.png" alt="image-20230707165009577" style="zoom:50%;"></blockquote><h4 id="配置解析文件-x2F-var-x2F-named-x2F-oa-com-zone"><a href="#配置解析文件-x2F-var-x2F-named-x2F-oa-com-zone" class="headerlink" title="配置解析文件&#x2F;var&#x2F;named&#x2F;oa.com.zone"></a>配置解析文件&#x2F;var&#x2F;named&#x2F;oa.com.zone</h4><ol><li>复制文件</li></ol><p>为了省事，自己少些一些内容，我们复制文件：</p><p>正向文件<code>cp  /var/named/named.localhost /var/named/daokun.com.zone</code> </p><p>反向文件<code>cp  /var/named/named.localhost /var/named/2.168.192.zone</code></p><blockquote><p>daokun.com.zone是自定义的，和上文有关。</p><p>在目录**&#x2F;var&#x2F;named**下有文件  <strong>named.localhost</strong></p></blockquote><ol start="2"><li>配置正向文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$TTL</span> 1D</span><br><span class="line"> <span class="comment"># 域名.　root.域名（注意空格）</span></span><br><span class="line"> <span class="comment">#　@       IN SOA  daokun.com.　root.也可以</span></span><br><span class="line">@       IN SOA  daokun.com.　root.daokun.com (</span><br><span class="line">                                        202307  ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">            NS    dns.daokun.com.</span><br><span class="line">dns   A     192.168.2.4 <span class="comment"># 本机ip</span></span><br><span class="line">test1 A     192.168.2.100</span><br><span class="line">test2 A     192.168.2.101</span><br><span class="line">test3 CNAME test2</span><br></pre></td></tr></table></figure><p>TTL：表示域名缓存周期字段，指定该资源文件中的信息存放在DNS缓存服务器的时间,</p><p>@：表示本域，SOA描述了一个授权区域</p><p>serial：表示该区域文件的版本号。<br>refresh：指定了从域名服务器将要检查主域名服务器的SOA记录的时间间隔，单位为秒。<br>retry：指定了从域名服务器的一个请求或一个区域刷新失败后，从服务器重新与主服务器联系的时间间隔，单位是秒。<br>expire：指在指定的时间内，如果从服务器还不能联系到主服务器，从服务器将丢去所有的区域数据。<br>Minimum：如果没有明确指定TTL的值，则minimum表示域名默认的缓存周期。 </p><p>A：表示主机记录，用于将一个主机名与一个或一组IP地址相对应。</p><p> NS：一条NS记录指向一个给定区域的主域名服务器，以及包含该服务器主 机名的资源记录。</p><p> CNAME：用来将一个域名和该域名的别名相关联，访问域名的别名和访问域 名的原始名字将解析到同样的主机地址。</p><blockquote><p>默认权限可能会阻止bind访问daokun.zone和2.168.192.zone文件，因由root用户使 用命令chgrp named daokun.com.zone修改文件所属的用户组。chgrp named 2.168.192.zone</p></blockquote><ol start="3"><li>配置反向文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line"><span class="comment"># daokun.com.后面需要空格，否则后续报错</span></span><br><span class="line">@       IN SOA  daokun.com. root.daokun.com. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">          NS  dns.daokun.com.</span><br><span class="line">4   PTR dns.daokun.com.</span><br><span class="line">100 PTR test1.daokun.com.</span><br><span class="line">101 PTR test2.daokun.com.</span><br><span class="line">101 PTR test3.daokun.com.</span><br></pre></td></tr></table></figure><p>检查文件有没有问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">named-checkconf -z /etc/named.conf</span><br></pre></td></tr></table></figure><blockquote><p>语法问题</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707172554119.png" style="zoom:50%;"></blockquote><h4 id="启动域名服务"><a href="#启动域名服务" class="headerlink" title="启动域名服务"></a>启动域名服务</h4><p>放行端口:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=53/tcp --zone=public</span><br><span class="line">firewall-cmd --permanent --add-port=53/udp --zone=public</span><br><span class="line">firewall-cmd --reload </span><br></pre></td></tr></table></figure><p>使用BIND软件提供的**&#x2F;etc&#x2F;init.d&#x2F;named**脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start named.service</span><br></pre></td></tr></table></figure><blockquote><p>如启动失败可以参考屏幕输出定位错误内容，或查看cat &#x2F;var&#x2F;log&#x2F;messages的内 容</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707175048290.png" alt="image-20230707175048290" style="zoom:50%;"><p>我这个情况是daokun.com. 没有空格，导致数字无效</p><p>daokun.com.  root.daokun.com或者@  root.daokun.com都可以</p></blockquote><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="DNS服务测试"><a href="#DNS服务测试" class="headerlink" title="DNS服务测试"></a>DNS服务测试</h4><p>DNS服务端已经部署完毕，客户端还需设置一些东西。</p><ol><li>配置&#x2F;etc&#x2F;resolv.conf</li></ol><p>客户端需要设置DNS服务器地址。</p><p>namesever 地址看自己情况</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707172157770.png" alt="image-20230707172157770" style="zoom:50%;"><p>重启一下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure><ol start="2"><li>域名测试</li></ol><p>域名测试可以使用ping、nslookup或dig命令。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707180033039.png" alt="image-20230707180033039" style="zoom:50%;"><p>可以看到正向解析有问题，反向解析是好的。大概率是区域配置库文件(也就是正、反向解析文件)的属主和属组的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/named</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707180447774.png" alt="image-20230707180447774" style="zoom:50%;"><p>果然是这个问题。我们自己定义的正向解析文件和反向解析文件的属组为 root 而DNS原配置文件的属组为 named 所以我们就要修改 正向、反向解析文件的属组，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> named 2.168.192.zone</span><br><span class="line"><span class="built_in">chgrp</span> named daokun.com.zone</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707180715282.png" alt="image-20230707180715282" style="zoom:50%;"><p>重启<code>systemctl restart named</code></p><p>这下应该没有问题了吧</p><p>果然</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707180916600.png" alt="image-20230707180916600" style="zoom: 50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707181507216.png" alt="image-20230707181507216" style="zoom:50%;"><blockquote><p>192.168.1.101(我手误)会报错是因为我们没配置，我们都是配置的192.168.2.xx。</p><p>192.168.2.4是我的dns服务器IP地址</p></blockquote><p>推荐一本更多更全的书籍(非广告)</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230707204611218.png" alt="image-20230707204611218" style="zoom: 33%;">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kvm的安装</title>
      <link href="/2023/07/05/kvm%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2023/07/05/kvm%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="云计算和虚拟化分类"><a href="#云计算和虚拟化分类" class="headerlink" title="云计算和虚拟化分类"></a>云计算和虚拟化分类</h2><p><strong>云计算的架构</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a666e7556e2f4b3dcea85103a847dc0f.png" alt="a666e7556e2f4b3dcea85103a847dc0f.png"></p><p><strong>云计算的模型</strong></p><p>云计算的模型是以服务为导向的，根据服务层次的不同，分为IaaS(Infrastructure as a Service),PaaS,SaaS。</p><p><img src="https://pic2.zhimg.com/80/v2-39b400aec8ef07159f8ee043637f8f29_1440w.webp"></p><p>虚拟化概述</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230628001203739.png" alt="image-20230628001203739"></p><p>最理想的虚拟化目标:</p><ul><li>客户机完全不知道自己在虚拟环境中，以为自己在原生环境里</li><li>完全不需要VMM介入客户机的运行过程</li></ul><p><strong>半虚拟化和全虚拟化</strong></p><ul><li>半虚拟化：纯软件的方式可以做到第一个目标，但是性能不是很好，而且软件设计的复杂度太大。所以放弃第一个目标，让系统知道是在虚拟环境中，例如VMware WorkStation，依赖于宿主操作系统，在其上构建出多个隔离的操作系统环境。</li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/v2-eec8f218c5f7f58edd53f68bc0a5b93b_1440w.webp" alt="img"></p><ul><li>全虚拟化：坚持第一个目标。直接凌驾于硬件之上，构建出多个隔离的操作系统环境。</li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/v2-e5d3d3f32e6ef8779a0efc880966c5e5_1440w.webp" alt="img"></p><h2 id="KVM原理"><a href="#KVM原理" class="headerlink" title="KVM原理"></a>KVM原理</h2><p>KVM是属于全虚拟化的。</p><h3 id="主流虚拟化架构"><a href="#主流虚拟化架构" class="headerlink" title="主流虚拟化架构"></a>主流虚拟化架构</h3><p><img src="https://pic3.zhimg.com/80/v2-b6afc784d755b9df1bf1238282a42512_1440w.webp" alt="img"></p><p>对比了几种主流虚拟化技术架构：ESXi、Xen与KVM，其主要差别在与各组件（CPU、内存、磁盘与网络IO）的虚拟化与调度管理实现组件有所不同。在ESXi中，所有虚拟化功能都在内核实现。Xen内核仅实现CPU与内存虚拟化， IO虚拟化与调度管理由Domain0（主机上启动的第一个管理VM）实现。KVM内核实现CPU与内存虚拟化，QEMU实现IO虚拟化，通过Linux进程调度器实现VM管理。</p><h3 id="KVM虚拟化架构"><a href="#KVM虚拟化架构" class="headerlink" title="KVM虚拟化架构"></a><strong>KVM虚拟化架构</strong></h3><p>KVM虚拟化有两个核心模块：</p><p><strong>1）KVM内核模块：</strong>主要包括KVM虚拟化核心模块KVM.ko，以及硬件相关的KVM_intel或KVM_AMD模块；负责CPU与内存虚拟化，包括VM创建，内存分配与管理、vCPU执行模式切换等。</p><p><strong>2）QEMU设备模拟：</strong>实现IO虚拟化与各设备模拟（磁盘、网卡、显卡、声卡等），通过IOCTL系统调用与KVM内核交互。KVM仅支持基于硬件辅助的虚拟化（如Intel-VT与AMD-V），在内核加载时，KVM先初始化内部数据结构，打开CPU控制寄存器CR4里面的虚拟化模式开关，执行VMXON指令将Host OS设置为root模式，并创建的特殊设备文件&#x2F;dev&#x2F;kvm等待来自用户空间的命令，然后由KVM内核与QEMU相互配合实现VM的管理。KVM会复用部分Linux内核的能力，如进程管理调度、设备驱动，内存管理等。</p><p><img src="https://pic4.zhimg.com/80/v2-7c9ca6efdc012803b13118b2bf2bb653_1440w.webp" alt="img"></p><h2 id="KVM安装"><a href="#KVM安装" class="headerlink" title="KVM安装"></a>KVM安装</h2><p>首先检查以下cpu是否支持虚拟化，不支持就休息了，下面不用看了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看CPU是否支持虚拟化</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep vmx</span><br></pre></td></tr></table></figure><p>有红色的vmx就说明支持</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230628010322936.png" alt="image-20230628010322936" style="zoom:33%;"><p><strong>安装KVM基本组件</strong></p><p>安装 GNOME 桌面环境 如果 Centos 装了图形界面可以不需要装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y <span class="string">&quot;GNOME Desktop&quot;</span></span><br></pre></td></tr></table></figure><p>KVM 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install qemu-kvm</span><br></pre></td></tr></table></figure><p>安装KVM 调试工具,可不安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install qemu-kvm-tools</span><br></pre></td></tr></table></figure><p>构建虚拟机的命令行工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install virt-install</span><br></pre></td></tr></table></figure><p>qemu 组件,创建磁盘、启动虚拟机等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install qemu-img</span><br></pre></td></tr></table></figure><p>网络支持工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bridge-utils</span><br></pre></td></tr></table></figure><p>虚拟机管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt</span><br></pre></td></tr></table></figure><p>图形界面管理虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install virt-manager</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下是上面安装的内容的汇总</span></span><br><span class="line">yum groupinstall -y <span class="string">&quot;GNOME Desktop&quot;</span></span><br><span class="line">yum -y install qemu-kvm</span><br><span class="line">yum -y install qemu-kvm-tools</span><br><span class="line">yum -y install virt-install</span><br><span class="line">yum -y install qemu-img</span><br><span class="line">yum -y install bridge-utils</span><br><span class="line">yum -y install libvirt</span><br><span class="line">yum -y install virt-manager</span><br></pre></td></tr></table></figure><blockquote><p>作用汇总</p><p>qemu-kvm：即qemu+kvm，kvm负责cpu和内存的虚拟化，而qemu负责IO设备，如网卡和磁盘等的虚拟化，才能真正实现服务器虚拟化。</p><p>libvirt：KVM管理工具，主要是收集虚拟机的监控数据，如cpu，内存等信息，为不同的虚拟机监视器提供了统一的接口。</p><p>libvirt-python：可通过python方式调用libvirt API来获取虚拟机的监控数据</p><p><strong>libguestfs-tools</strong>：虚拟机镜像管理工具，用来访问和修改虚拟机磁盘镜像</p><p><strong>virt-install</strong>：命令行工具，为KVM创建虚拟机并完成GuestOS安装</p><p><strong>virt-clone：</strong>用于克隆KVM虚拟机</p><p><strong>virt-manager：</strong>使用图形界面管理KVM虚拟环境的主要工具</p><p><strong>virt-viewer</strong>：用于显示虚拟机的图形控制台</p><p>bridge-utils：配置网桥</p></blockquote><p><strong>查看是否安装kvm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep kvm</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230628011109896.png" alt="image-20230628011109896"></p><blockquote><p>没有的话，手动加载模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe kvm</span><br><span class="line">modprobe kvm-intel</span><br></pre></td></tr></table></figure></blockquote><p><strong>设置开启启动界面的显示模式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure><h2 id="KVM网络"><a href="#KVM网络" class="headerlink" title="KVM网络"></a>KVM网络</h2><p>KVM网络的三种模式：</p><p>① NAT： 默认设置，数据包由 NAT 方式通过主机的接口进行传送，可以访问外网，但是无法从外部访问虚拟机网络。广泛用于个人虚拟化桌面。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230705094352324.png" alt="image-20230705094352324" style="zoom: 33%;"><p>② 桥接模式：这种模式允许虚拟机像一台独立的主机一样拥有网络，外部的机器可以直接访问到虚拟机内部，但需要网卡支持(一般有线网卡都支持)。一般用户服务器端虚拟化。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230705094812714.png" alt="image-20230705094812714" style="zoom:33%;"><p>③仅主机：一般用于超级大的服务厂商。</p><h2 id="KVM创建虚拟机"><a href="#KVM创建虚拟机" class="headerlink" title="KVM创建虚拟机"></a>KVM创建虚拟机</h2><p>查看虚拟机:<code>virsh list --all</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230705100834198.png" alt="image-20230705100834198" style="zoom:33%;"><blockquote><p>若是无法使用，找不到此命令,重新安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt</span><br></pre></td></tr></table></figure></blockquote><h3 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h3><p>网卡配置，也就是添加1个桥接网卡，主要是为了后续创建的虚拟机可以使用配置的网卡实现网络通信。</p><ol><li>进入文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入网卡配置文件夹下</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line"><span class="comment"># 复制ens33网卡配置文件，重命名为br0</span></span><br><span class="line"><span class="built_in">cp</span> ifcfg-ens33 ifcfg-br0</span><br><span class="line"><span class="comment"># 进入br0网卡配置文件中</span></span><br><span class="line">vim ifcfg-br0</span><br></pre></td></tr></table></figure><ol start="2"><li>修改</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 修改以下信息</span><br><span class="line"># Type类型修改为&quot;Bridge&quot; </span><br><span class="line">TYPE=Bridge</span><br><span class="line"># 修改名称，设备名为br0</span><br><span class="line">NAME=&quot;br0&quot;</span><br><span class="line">DEVICE=&quot;br0&quot;</span><br><span class="line"># UUID字段前添加#注释</span><br><span class="line">#UUID=&quot;xxxxxx&quot;</span><br><span class="line"></span><br><span class="line"># 添加以下信息</span><br><span class="line"># ip地址：物理机的IP地址</span><br><span class="line">IPADDR=&quot;192.168.xx.xx&quot;</span><br><span class="line"># 子网掩码参数：物理机的子网掩码</span><br><span class="line">PREFIX=&quot;24&quot;</span><br><span class="line"># 网关：物理机的网关地址</span><br><span class="line">GATEWAY=&quot;192.168.xx.xx&quot;</span><br><span class="line"># DNS地址</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-160f23e531098977f0a71400725248cd_1440w.webp" alt="img"></p><ol start="3"><li>重启网络</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>查看是否存在br0网卡：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ifconfig方式查看或者brctl show方式查看</span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"># 查看网卡信息</span><br><span class="line">brctl show</span><br></pre></td></tr></table></figure><h3 id="启动虚拟化"><a href="#启动虚拟化" class="headerlink" title="启动虚拟化"></a>启动虚拟化</h3><p>启动libvirt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable libvirtd</span><br><span class="line">systemctl start libvirtd</span><br></pre></td></tr></table></figure><p>启动后查看是否启动成功</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status libvirtd</span><br></pre></td></tr></table></figure><img src="https://pic1.zhimg.com/80/v2-a884980d7a7ca13f8520cac3dca72198_1440w.webp" alt="img" style="zoom: 33%;"><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>通过使用KVM工具virt-manager创建虚拟机，指定每台机器所需的资源（例如RAM、磁盘空间、CPU）。</p><p>打开virt-manager图形界面</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-manager</span><br></pre></td></tr></table></figure><img src="https://pic1.zhimg.com/80/v2-75157c35c91023b0be53d4eac2235704_1440w.webp" alt="img" style="zoom: 67%;"><p>创建虚拟机</p><img src="https://pic2.zhimg.com/80/v2-a4e7157fa4a1e0577cae2555c79d9659_1440w.webp" alt="img" style="zoom: 50%;"><p>点击本地浏览，这里iso镜像文件记得选择我们前面创建的&#x2F;mnt&#x2F;iso文件夹下的镜像，也请将镜像文件放置mnt&#x2F;iso文件夹下方便选取</p><img src="https://pic1.zhimg.com/80/v2-9273bba1c255237f8ec41aab099736b8_1440w.webp" alt="img" style="zoom:50%;"><img src="https://pic1.zhimg.com/80/v2-799721cada41ba35f2941abf881e9294_1440w.webp" alt="img" style="zoom:50%;"><img src="https://pic1.zhimg.com/80/v2-83ef45c85817299e367ca4c2fce3e1c4_1440w.webp" alt="img" style="zoom:50%;"><p>为每个虚拟机安装操作系统，就像为物理计算机安装操作系统一样。</p><img src="https://pic1.zhimg.com/80/v2-2fbb308046db7a74450b46242e45e3d8_1440w.webp" alt="img" style="zoom:50%;"><p>接下来就是镜像的安装过程，也就是操作系统centos的安装过程，就不赘述。</p><img src="https://pic2.zhimg.com/80/v2-c8d4c6d80b7d7fba86f2d3fcd1d1f1e9_1440w.webp" alt="img" style="zoom:50%;"><blockquote><p>上面的方式 </p><p>创建虚拟磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qemu-img create -f raw/qcow2 </span></span><br><span class="line"><span class="comment"># 创建row格式的,后缀和格式相对应，nat-test是磁盘名称，5G是大小</span></span><br><span class="line">qemu-img create -f raw /kvm/vdisks/nat-test.raw 5G</span><br></pre></td></tr></table></figure><p>raw相当于物理磁盘ssd，大小是完全指定，支持的虚拟化操作比较少；qcow2相当于机械磁盘，大小是弹性的，支持的虚拟化操作比较多(扩容，快照)</p></blockquote><p>部分图片来自:<a href="https://zhuanlan.zhihu.com/p/272202324">知乎</a>，<a href="https://zhuanlan.zhihu.com/p/616845079">一文搞定KVM安装部署 - 知乎 (zhihu.com)</a></p><p>kvm<a href="https://zhuanlan.zhihu.com/p/272202324">原理</a></p><p>kvm<a href="https://blog.csdn.net/panrenjun/article/details/114874873">安装</a></p><p>详细教程:<a href="https://www.server-world.info/en/note?os=CentOS_7&p=kvm&f=2">CentOS 7 : KVM : Create a Virtual Machine#1 : Server World (server-world.info)</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python获取系统基础信息</title>
      <link href="/2023/06/27/Python%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
      <url>/2023/06/27/Python%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="系统基础信息"><a href="#系统基础信息" class="headerlink" title="系统基础信息"></a>系统基础信息</h1><p>通过运用Python的第三方模块，获取服务关键运营指标。包括Linux基本性能，块设备，网卡接口，系统信息，网络地址库等信息。采集到这些数据后，我们可以了解服务的状态，再结合告警机制，可以在第一时间响应，将异常出现在苗头就处理了。</p><h2 id="系统性能信息模块psutil"><a href="#系统性能信息模块psutil" class="headerlink" title="系统性能信息模块psutil"></a>系统性能信息模块psutil</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>psutil版本：5.8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码安装</span></span><br><span class="line">wget https://pypi.python.org/packages/source/p/psutil/psutil-5.8.0.tar.gz</span><br><span class="line">tar zxvf psutil-5.8.0.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> psutil-5.8.0</span><br><span class="line">yum -y install python-devel  （如果提示缺少python.h头文件，执行此命令。）</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip 安装</span></span><br><span class="line">pip3 install psutil</span><br></pre></td></tr></table></figure><p>第一个程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">mem = psutil.virtual_memory()</span><br><span class="line"><span class="built_in">print</span>(mem.total,mem.used)</span><br></pre></td></tr></table></figure><h3 id="系统性能信息"><a href="#系统性能信息" class="headerlink" title="系统性能信息"></a>系统性能信息</h3><p>基本性能包括CPU,内存，磁盘，网络等，可以完整描述当前的系统的运行状态及质量。</p><h4 id="CPU信息"><a href="#CPU信息" class="headerlink" title="CPU信息"></a>CPU信息</h4><p>cpu利用率有以下几个部分:</p><ul><li><input disabled type="checkbox"> User Time,执行用户进程的时间百分比</li><li><input disabled type="checkbox"> System Time,执行内核进程和中断的时间百分比</li><li><input disabled type="checkbox"> Wait IO ,由于IO等待使cpu处于idle(空闲)状态的时间百分比</li><li><input disabled type="checkbox"> Idle,CPU处于idle状态的时间百分比</li></ul><p>我们用<code>psutil.cpu_times()</code>可以非常简单的得到这些信息。可以获取CPU的硬件相关信息，比如CPU的物理个数和逻辑个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取CPU完整信息，需要显示所有的逻辑CPU信息</span></span><br><span class="line">state = psutil.cpu_times()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单项数据，例如用户user的cpu时间比</span></span><br><span class="line"><span class="built_in">print</span>(state.user)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取CPU的逻辑个数，默认logical=4</span></span><br><span class="line"><span class="built_in">print</span>(psutil.cpu_count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取CPU物理个数</span></span><br><span class="line"><span class="built_in">print</span>(psutil.cpu_count(logical=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h4 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h4><p>Linux系统的内存利用率信息涉及<strong>total(内存总数)<strong>，</strong>used（已使用内存）</strong>，**free(空闲内存)<strong>，</strong>buffers(缓存使用)<strong>，</strong>cache(缓存使用)<strong>，</strong>swap(交换分区使用)**等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内存完整信息</span></span><br><span class="line">mem = psutil.virtual_memory()</span><br><span class="line"><span class="built_in">print</span>(mem)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内存总数</span></span><br><span class="line"><span class="built_in">print</span>(mem.total)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内存空余</span></span><br><span class="line"><span class="built_in">print</span>(mem.free)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换分区信息</span></span><br><span class="line"><span class="built_in">print</span>(psutil.swap_memory())</span><br></pre></td></tr></table></figure><h4 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><p>我们关注磁盘利用率及IO信息，磁盘利用率用<code>psutil.disk_usage</code>方法获取。磁盘IO信息包括<strong>read_count</strong>(读IO数)，<strong>write_count</strong>(写IO数),<strong>read_bytes</strong>(IO读字节数)，<strong>write_bytes</strong>(写字节数)，<strong>read_time</strong>(磁盘读时间)，<strong>write_time</strong>(磁盘写时间)。这些可以由<code>psutil.disk_io_counters()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取磁盘完整信息</span></span><br><span class="line">state = psutil.disk_partitions()</span><br><span class="line"><span class="built_in">print</span>(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取分区使用情况</span></span><br><span class="line"><span class="built_in">print</span>(psutil.disk_usage(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取硬盘的总IO个数，读写信息</span></span><br><span class="line"><span class="built_in">print</span>(psutil.disk_io_counters())</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 获取硬盘的单个分区，读写信息                                                                   </span></span><br><span class="line"><span class="built_in">print</span>(psutil.disk_io_counters(perdisk=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h4 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h4><p>主要是bytes_sent(发送字节数)，bytes_recv(接收字节数)</p><p>packets_sent(发送数据包数)，packets_recv(接收数据包数)</p><p>这些网络信息可以用<code>psutil.net_io_counters()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">state = psutil.net_io_counters()</span><br><span class="line"><span class="built_in">print</span>(state)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627173322352.png" alt="image-20230627173322352"></p><h4 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h4><p><strong>用户登录时间信息</strong></p><p><code>psutil.users()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">state = psutil.users()</span><br><span class="line"><span class="built_in">print</span>(state)<span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">state = psutil.users()</span><br><span class="line"><span class="built_in">print</span>(state)</span><br></pre></td></tr></table></figure><p><strong>开机时间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取开机时间，用Linux时间戳格式返回</span></span><br><span class="line">boot_time = psutil.boot_time()</span><br><span class="line"><span class="built_in">print</span>(boot_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这不习惯，换成自然时间格式</span></span><br><span class="line">butty_time = datetime.datetime.fromtimestamp(boot_time).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(butty_time)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627174554987.png" alt="image-20230627174554987"></p><h3 id="系统进程管理方法"><a href="#系统进程管理方法" class="headerlink" title="系统进程管理方法"></a>系统进程管理方法</h3><p>获取进程信息，可以让运维人员了解应用程序的运行状态，包括进程启动时间，查看或者设置cpu亲和度，内存使用率，IO信息，socket连接，线程数。</p><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><p><code>psutil.pids</code>获取所有的进程pid,使用<code>psutil.Process</code>获取单个进程的名称、路径、状态等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的进程PID</span></span><br><span class="line"><span class="built_in">print</span>(psutil.pids())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的进程随机取一个为例子</span></span><br><span class="line">p = psutil.Process(<span class="number">11388</span>)</span><br><span class="line">p.name() <span class="comment"># 进程名字</span></span><br><span class="line">p.exe()  <span class="comment"># 进程bin路径</span></span><br><span class="line">p.cwd()  <span class="comment"># 进程工作目录绝对路径</span></span><br><span class="line">p.status() <span class="comment"># 进程状态</span></span><br><span class="line">p.create_time <span class="comment"># 进程创建时间,时间戳格式</span></span><br><span class="line">p.uids()   <span class="comment"># 进程uid信息</span></span><br><span class="line">p.gid()</span><br><span class="line">p.cpu_times()  <span class="comment">#cpu时间信息，包括user,system两个时间</span></span><br><span class="line">p.cpu_affinity() <span class="comment"># get进程cpu亲和度，如果要设置亲和度，将CPU号设置为参数就行</span></span><br><span class="line">p.memory_info() <span class="comment"># 进程内存rss、vms信息</span></span><br><span class="line">p.io_counters()  <span class="comment"># 进程Io信息，包括读写和字节数</span></span><br><span class="line">p.connections() <span class="comment"># 返回打开进程的socket的namedutples列表</span></span><br><span class="line">p.num_threads() <span class="comment"># 进程开启的线程数</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627175535103.png" alt="image-20230627175535103"></p><h4 id="popen类的使用"><a href="#popen类的使用" class="headerlink" title="popen类的使用"></a>popen类的使用</h4><p><code>psutil</code>提供的popen类的作用是获取用户启动应用程序的进程信息，用来跟踪程序进程的运行状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> PIPE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跟踪应用程序</span></span><br><span class="line">p = psutil.Popen([<span class="string">&quot;/usr/bin/python&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;print(&#x27;hello&#x27;)&quot;</span>],stdout=PIPE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.name())</span><br><span class="line"><span class="built_in">print</span>(p.username())</span><br><span class="line"><span class="built_in">print</span>(p.communicate())</span><br><span class="line"><span class="built_in">print</span>(cpu_times())</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> PIPE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跟踪应用程序</span></span><br><span class="line">p = psutil.Popen([<span class="string">&quot;/usr/local/bin/python3&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;print(&#x27;hello&#x27;)&quot;</span>],stdout=PIPE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.name())</span><br><span class="line"><span class="built_in">print</span>(p.username())</span><br><span class="line"><span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>我的python3安装位置是</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627182548767.png" alt="image-20230627182548767"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627182623048.png" alt="image-20230627182623048"></p><h2 id="IP地址处理模块IPy"><a href="#IP地址处理模块IPy" class="headerlink" title="IP地址处理模块IPy"></a>IP地址处理模块IPy</h2><p>ip地址规划是网络设计的重要环节，规划的好坏会直接影响路由协议算法的效率、网络性能、可扩展性。在这个过程中，需要计算大量的IP地址，包括网段、网络掩码、广播地址、子网数、IP类型等。IPy可以很好的帮助我们。</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install IPy</span><br></pre></td></tr></table></figure><h3 id="IP地址、网段的基本处理"><a href="#IP地址、网段的基本处理" class="headerlink" title="IP地址、网段的基本处理"></a>IP地址、网段的基本处理</h3><ul><li><input disabled type="checkbox"> <strong>version方法区分IPv4和IPv6</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP(<span class="string">&#x27;10.0.0.0/8&#x27;</span>).version()</span><br><span class="line"></span><br><span class="line">IP(<span class="string">&#x27;10.0.0.0&#x27;</span>).version()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230627234602226.png" alt="image-20230627234602226"></p><ul><li><input disabled type="checkbox"> 输出网段IP个数和IP地址清单</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPy <span class="keyword">import</span> IP</span><br><span class="line"></span><br><span class="line">ip = IP(<span class="string">&#x27;192.168.1.0/24&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ip.<span class="built_in">len</span>())  <span class="comment"># 输出网段的个数</span></span><br><span class="line"><span class="keyword">for</span> per_ip <span class="keyword">in</span> ip:</span><br><span class="line">    <span class="built_in">print</span>(per_ip)</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> IP常见方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPy <span class="keyword">import</span> IP</span><br><span class="line"></span><br><span class="line">ip = IP(<span class="string">&#x27;192.168.1.2&#x27;</span>)</span><br><span class="line">ip.reverseNames() <span class="comment"># 反向地址解析</span></span><br></pre></td></tr></table></figure><h1 id="业务服务监控"><a href="#业务服务监控" class="headerlink" title="业务服务监控"></a>业务服务监控</h1><h1 id="定制业务质量报表"><a href="#定制业务质量报表" class="headerlink" title="定制业务质量报表"></a>定制业务质量报表</h1><h1 id="Python与系统安全"><a href="#Python与系统安全" class="headerlink" title="Python与系统安全"></a>Python与系统安全</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[用户] -- 垃圾投放 --&gt; B[智能垃圾桶]</span><br><span class="line">B -- 数据上传 --&gt; C[云服务平台]</span><br><span class="line">C -- 数据分析 --&gt; D[政府/运营商]</span><br><span class="line">C -- 数据调度 --&gt; E[智能垃圾回收车]</span><br><span class="line">E -- 垃圾回收 --&gt; B</span><br><span class="line">A -- 领取垃圾袋 --&gt; F[智能垃圾袋发放机]</span><br><span class="line">A -- 查询/兑换 --&gt; G[移动平台]</span><br><span class="line">G -- 数据交互 --&gt; C</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控报警Zabbix</title>
      <link href="/2023/06/25/%E7%9B%91%E6%8E%A7%E6%8A%A5%E8%AD%A6Zabbix/"/>
      <url>/2023/06/25/%E7%9B%91%E6%8E%A7%E6%8A%A5%E8%AD%A6Zabbix/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Zabbix介绍"><a href="#Zabbix介绍" class="headerlink" title="Zabbix介绍"></a>Zabbix介绍</h1><h2 id="什么是Zabbix"><a href="#什么是Zabbix" class="headerlink" title="什么是Zabbix?"></a>什么是Zabbix?</h2><ul><li>系统监控工具</li><li>网络监控工具</li><li>C&#x2F;S部署结构</li><li>分布式架构</li></ul><h2 id="Zabbix的特点"><a href="#Zabbix的特点" class="headerlink" title="Zabbix的特点"></a>Zabbix的特点</h2><ul><li>安装简单</li><li>监控方便</li><li>免费开源</li><li>自动化功能</li></ul><p><strong>Zabbix和Nagios比较</strong></p><ul><li>All In One的功能设计</li><li>多样的监控模板</li><li>自动发现，注册</li><li>强大美观的图表</li></ul><h2 id="Zabbix模块结构"><a href="#Zabbix模块结构" class="headerlink" title="Zabbix模块结构"></a>Zabbix模块结构</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230625234756290.png" alt="image-20230625234756290"></p><h2 id="Zabbix部署方式"><a href="#Zabbix部署方式" class="headerlink" title="Zabbix部署方式"></a>Zabbix部署方式</h2><ul><li>网络协议模式: server-client</li><li>Zabbix节点代理模式:server-proxy-client</li><li>C&#x2F;S架构Zabbix独立节点:master-node-client</li></ul><h2 id="Zabbix监控对象"><a href="#Zabbix监控对象" class="headerlink" title="Zabbix监控对象"></a>Zabbix监控对象</h2><ul><li>设备:包括主机设别，打印设备</li><li>软件:MySQL，tomcat等等</li><li>故障</li><li>主机:物理主机或者云主机</li></ul><h1 id="安装Zabbix"><a href="#安装Zabbix" class="headerlink" title="安装Zabbix"></a>安装Zabbix</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>安全需求:</p><ul><li>master-client架构</li><li>一个master,一个client</li><li>监控VM主机</li><li>确保你有mysql或者其他数据库</li></ul><p>环境需求:</p><ul><li>一台centos7</li><li>一台centos7作为master,且作为client</li><li>网络，开放端口</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开<a href="https://www.zabbix.com/cn/download">官网</a></p><p>选择对应的操作系统，版本，下面有教程。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230626000312800.png" alt="image-20230626000312800"></p><p>可能遇到的问题:</p><ul><li>Mariadb代替MySQL</li><li>关闭SeLinux,否则可能遇到cannot set resoure limit</li></ul><p><code>systemctl stop firewalld.service</code></p><p><code>setenforce 0</code></p><ul><li>默认使用httpd作为Web服务</li></ul><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230626171451154.png" alt="image-20230626171451154"></p><p>这个问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-complete-transaction</span></span><br><span class="line">yum install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行yum-complete-transaction</span></span><br><span class="line">yum-complete-transaction –cleanup-only</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出重复的包</span></span><br><span class="line">package-cleanup --dupes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除旧的重复包</span></span><br><span class="line">package-cleanup --cleandupes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除损坏的包</span></span><br><span class="line">package-cleanup --problems</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><p>实在不行，哪些有问题就直接移除吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove ansible-2.9.27-1.el7.noarch</span><br><span class="line">yum removetuned-2.11.0-12.el7_9.noarch</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230626172715930.png" alt="image-20230626172715930"></p><p>再不行的话: <a href="https://www.runoob.com/mysql/mysql-install.html">菜鸟教程</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Zabbix-Server配置"><a href="#Zabbix-Server配置" class="headerlink" title="Zabbix Server配置"></a>Zabbix Server配置</h3><ul><li>初始化MySQL数据库</li><li>启动Zabbix Server</li><li>启动Zabbix Web服务</li><li>修改防火墙策略</li></ul><h3 id="Zabbix-Client配置"><a href="#Zabbix-Client配置" class="headerlink" title="Zabbix Client配置"></a>Zabbix Client配置</h3><ul><li>&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</li><li>修改Server值</li><li>启动Zabbix Agent服务</li></ul><h3 id="Zabbix-Web配置"><a href="#Zabbix-Web配置" class="headerlink" title="Zabbix Web配置"></a>Zabbix Web配置</h3><p>打开 <a href="http://server的ip/zabbix">http://server的ip/zabbix</a></p><p>默认用户名:Admin</p><p>密码:zabbix</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB学习</title>
      <link href="/2023/06/22/MongoDB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/06/22/MongoDB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="阿里云特性"><a href="#阿里云特性" class="headerlink" title="阿里云特性"></a>阿里云特性</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142013329.png" alt="image-20230622142013329"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142125143.png" alt="image-20230622142125143"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142234416.png" alt="image-20230622142234416"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142337415.png" alt="image-20230622142337415"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142416539.png" alt="image-20230622142416539"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622142443072.png" alt="image-20230622142443072"></p><h2 id="MongoDB适合场景"><a href="#MongoDB适合场景" class="headerlink" title="MongoDB适合场景"></a>MongoDB适合场景</h2><p>传统的关系型数据库(MySQL),在数据的“三高”需求以及web2.0网站的需求，力不从心。</p><p>三高需求:</p><ul><li>高并发</li><li>高访问</li><li>高可扩展性&amp;&amp;高可用性</li></ul><p>具体的应用场景:</p><ul><li><p>社交场景:存储用户信息，以及用户发表的朋友圈，通过地理位置索引实现附近的人</p></li><li><p>物流场景:使用MongoDB存储订单信息，订单信息在运输工程中会不断更新</p></li><li><p>游戏场景，业务快速增长，数据结构动态变更</p></li><li><p>自动驾驶</p></li><li><p>物联网设备</p></li><li><p>视频直播，存储用户信息，点赞互动等</p></li></ul><p>上面的应用场景，数据操作方面的共同特点:</p><ol><li>数据量大</li><li>读写操作频繁</li><li>价值较低的数据，对于事务性要求不高</li></ol><h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><p>MongoDB是一个开源，高性能，无模式的文档型数据库，当初的设计就是为了简化开发和方便扩展，是最像关系型数据库的非关系型数据库。</p><p>它支持的数据结构非常松散，是一种类似于JSON格式的BSON，所以可以存储比较复杂的数据类型，又相当灵活。</p><p>MongoDB中的记录是一个文档，由字段和值对(filed:value)组成的数据结构。MongoDB的文档类似json,一个文档就认为是一个对象。</p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622151354641.png" alt="image-20230622151354641"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622151442226.png" alt="image-20230622151442226"></p><h1 id="MongoDB原理介绍"><a href="#MongoDB原理介绍" class="headerlink" title="MongoDB原理介绍"></a>MongoDB原理介绍</h1><p>MongoDB的存储引擎:<strong>WireTiger</strong></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623094539667.png" alt="image-20230623094539667"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623094900600.png" alt="image-20230623094900600"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623095022602.png" alt="image-20230623095022602"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623153141791.png" alt="image-20230623153141791"></p><h1 id="MongoDB开发"><a href="#MongoDB开发" class="headerlink" title="MongoDB开发"></a>MongoDB开发</h1><p>准备:公共数据集；github源码；mongoDB compass</p><p>利用MongoDB构建一个UFO观测记录网站。</p><ol><li><p>下载公共数据集(<a href="https://www.kaggle.com/datasets/NUFORC/ufo-sightings?select=scrubbed.csv">https://www.kaggle.com/datasets/NUFORC/ufo-sightings?select=scrubbed.csv</a>)</p></li><li><p>下载MongoDB compass(<a href="https://www.mongodb.com/try/download/shell">MongoDB Compass Download (GUI) | MongoDB</a>)</p></li><li><p>构建MongoDB数据库和表，并导入数据。</p></li><li><p>下载github源码，构建虚拟环境(<a href="https://github.com/getsendy/UFO-Spotter/tree/codespace-getsendy-ufo-spotter">https://github.com/getsendy/UFO-Spotter/tree/codespace-getsendy-ufo-spotter</a>)</p></li><li><p>修改代码，运行运用。</p></li></ol><p>功能:</p><p>可以选择城市，查询UFO记录</p><p>提交新的UFO数据</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p>详细查看<a href="https://developer.aliyun.com/article/1073999#slide-7">windows下的安装</a></p><h2 id="centos7-9安装"><a href="#centos7-9安装" class="headerlink" title="centos7.9安装"></a>centos7.9安装</h2><p>其他 Linux 版本可点击链接查看:<a href="https://www.mongodb.com/docs/manual/administration/install-on-linux/?spm=a2c6h.12873639.article-detail.7.a06a1292Os18iP">Install MongoDB Community Edition on Linux — MongoDB Manual</a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装前我们需要安装各个 Linux 平台依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install libcurl openssl</span><br></pre></td></tr></table></figure><h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h3><p>官网链接:<a href="https://www.mongodb.com/try/download/community">Download MongoDB Community Server | MongoDB</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622180216964.png" alt="image-20230622180216964"></p><p>我复制的地址是:<code>https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-6.0.6.tgz</code></p><p>使用<code>wget</code>：<code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-6.0.6.tgz</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>解压命令:<code>tar -zxvf 版本.tgz           </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-6.0.6.tgz</span><br></pre></td></tr></table></figure><p>移动到指定目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> mongodb-linux-x86_64-rhel70-6.0.6  /usr/local/mongodb4     </span><br></pre></td></tr></table></figure><p>MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 <strong>PATH</strong> 路径中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=&lt;mongodb安装路径&gt;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>例如我的安装路径 <strong>&#x2F;usr&#x2F;local&#x2F;mongodb4</strong></p><h3 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h3><ol><li>下载安装包</li></ol><p>可以选择在官网下载好安装包</p><p>或者<code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-6.0.2.tgz</code></p><p>查看下载好的安装包<code>ls</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622163753073.png" alt="image-20230622163753073"></p><ol start="2"><li>解压并将目录重命名为<code>mongodb</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf mongodb-linux-x86_64-rhel80-6.0.2.tgz </span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">mv</span> mongodb-linux-x86_64-rhel80-6.0.2 mongodb</span><br></pre></td></tr></table></figure><ol start="3"><li>进入安装包目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mongodb</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622163956967.png" alt="image-20230622163956967"></p><p>其中，<code>bin</code> 目录存放数据库提供的命令</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622164021179.png" alt="image-20230622164021179"></p><h3 id="MongoDB-Shell-安装"><a href="#MongoDB-Shell-安装" class="headerlink" title="MongoDB Shell 安装"></a>MongoDB Shell 安装</h3><ol><li>下载安装包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.mongodb.com/compass/mongosh-1.6.0-linux-x64.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>解压</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf mongosh-1.6.0-linux-x64.tgz  </span><br></pre></td></tr></table></figure><ol start="3"><li>重命名解压后的目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> mongosh-1.6.0-linux-x64.tgz mongosh</span><br></pre></td></tr></table></figure><p>在 <code>mongosh/bin</code> 目录下提供了 <code>mongosh</code> 命令用于连接到 MongoDB 数据库服务</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622164916797.png" alt="image-20230622164916797"></p><ol start="4"><li>将 bin 目录添加到 Path 中</li></ol><p>有两个bin目录:</p><ul><li>目前 <code>mongod</code> 命令所在目录路径是 <code>~/mongodb/bin</code> </li><li><code>mongosh</code> 命令所在目录路径是 <code>~/mongosh/bin</code></li></ul><p>需要将这两个路径添加到 Path 环境变量中。</p><p>使用 vim 编辑文件（<strong>临时生效</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=&lt;mongodb安装目录&gt;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>本次安装是<code>/root/mongodb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/root/mongodb/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>注:修改 &#x2F;etc&#x2F;profile 文件是所有用户，永久生效</p><p>在 <code>Path</code> 最后追加这两个目录，然后保存退出：</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230622170611053.png" alt="image-20230622170611053"></p><p>然后执行<code>source</code> 命令，重新加载环境变量，使刚才的配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>MongoDB 服务在<strong>启动时需要指定数据存储的目录</strong>。如果没有指定的话，默认会去找 <code>/data/db/</code> 目录。</p><p>如果<strong>数据目录不存在或不可写，那么服务器端将无法启动</strong>。因此在启动 MongoDB 服务之前，一定要确保数据目录存在且对该目录有写权限。</p><p>先建立两个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/mongodb/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mongodb/log</span><br></pre></td></tr></table></figure><p>使用 <code>mongod</code> 命令启动数据库服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod  --dbpath=/data/mongodb/data</span><br></pre></td></tr></table></figure><ul><li>–fork：在基于 Unix 的系统中，使用 fork 创建服务器进程，将 MongoDB 服务作为守护进程运行。如果指定了 –fork，则必须同时指定 –logpath。</li><li>–dbpath：指定存放 MongoDB 数据的目录，启动服务时必须指定。</li><li>–logpath：默认日志是打印在命令行中的，使用该选项指定日志输出的文件。如果对此目录有写权限且文件不存在，则会自动创建该文件。如果日志文件已经存在，默认会覆盖掉该文件，并删除所有旧的日志。如果希望保留旧的日志，除了使用 –logpath 之外，还应该使用 –logappend 选项。</li></ul><p>内容</p><p><a href="https://developer.aliyun.com/trainingcamp/83fa92f8ecf2498d9e31296738b7d706?spm=5176.8068049.0.0.d2c26d19vqxUSJ">阿里云MongoDB特色办公</a></p><p><a href="https://learn.mongodb.com/learning-paths">MongoDB官方培训</a></p><h1 id="阿里云云数据库MongoDB实践"><a href="#阿里云云数据库MongoDB实践" class="headerlink" title="阿里云云数据库MongoDB实践"></a>阿里云云数据库MongoDB实践</h1><p>先在阿里云创建云数据库<strong>MongoDB</strong></p><h2 id="登录云数据库MongoDB实例"><a href="#登录云数据库MongoDB实例" class="headerlink" title="登录云数据库MongoDB实例"></a>登录云数据库<strong>MongoDB</strong>实例</h2><ol><li>先进入MongoDB控制台</li><li>点击左侧的，副本实例列表</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175026024.png" alt="image-20230623175026024"></p><ol start="3"><li>切换资源所在地(选择你购买的所在地)</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175205574.png" alt="image-20230623175205574"></p><ol start="4"><li>在<strong>副本集实例列表</strong>进入实例</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175348069.png" alt="image-20230623175348069"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175412717.png" alt="image-20230623175412717"></p><ol start="5"><li><strong>重置密码</strong></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175545838.png" alt="image-20230623175545838"></p><ol start="6"><li><strong>设置白名单</strong></li></ol><p>更换成<code>0.0.0.0/0</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175931034.png" alt="image-20230623175931034"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623175950090.png" alt="image-20230623175950090"></p><ol start="7"><li>登录数据库</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623180321521.png" alt="image-20230623180321521"></p><p>8. </p><p>在登录实例对话框中，输入<strong>数据库账号</strong>和<strong>数据库密码</strong>，单击<strong>登录</strong>。如忘记密码，可以在账号管理页面进行重置密码。（上面有密码重置）</p><p><strong>参数说明：</strong></p><ol><li>数据库账号：输入云产品资源中创建的MongoDB数据库账号(我的是root)。</li><li>数据库密码：输入云产品资源中创建的MongoDB数据库密码(你自己设置的)。</li></ol><h2 id="创建数据库和用户"><a href="#创建数据库和用户" class="headerlink" title="创建数据库和用户"></a>创建数据库和用户</h2><ol><li>进入数据库管理</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623180718633.png" alt="image-20230623180718633"></p><p>然后</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623180816563.png" alt="image-20230623180816563"></p><ol start="2"><li>创建数据库</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623180927220.png" alt="image-20230623180927220"></p><ol start="3"><li>左侧导航，单击账号管理</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_02c54db2249e43c6a65d4e71e7f94e75.png"></p><ol start="4"><li>创建用户</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_a9fc1fb8d0a34bcca96e6042ac0304c1.png"></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_ca69212ba47d4b3fbf1be8458138df79.png"></p><ul><li>目标库：选择刚刚创建的数据库(阿里云的是mymonogdb，我的是daokunn)。</li><li>用户名：自定义用户名，本示例为mytest。</li><li>密码：自定义密码。</li><li>确认密码：再次输入密码。</li><li>普通操作角色：勾选read和readWrite</li></ul><ol start="5"><li>查看用户</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623181840980.png" alt="image-20230623181840980" style="zoom:33%;"><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统：Relational Database Management System）中的表格。集合存在于数据库中，集合没有固定的结构，这意味着您在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>这里是一些基础语法的学习。</p><p>在上面的步奏，我们创建了数据库账号、数据库名称和数据库密码。用这个作为测试。</p><ol><li>进入我们创建的数据库</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/e2239915e60545eb8f6e16cf5a75f00c.png"></p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d34489724a084fa6ac418f656826bfaa.png"></p><p>之后进入以下的界面</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623182431932.png" alt="image-20230623182431932"></p><ol start="2"><li>创建一个集合，名称为testcollection，单击执行</li></ol><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;testcollection&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230623185514872.png" alt="image-20230623185514872"></p><h2 id="文档操作的使用"><a href="#文档操作的使用" class="headerlink" title="文档操作的使用"></a>文档操作的使用</h2><p>文档是一组键值（key-value）对（即BSON）。MongoDB的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是MongoDB非常突出的特点。</p><ol><li>插入文档。使用insert()方法插入。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>COLLECTION_NAME：集合名称。</li><li>document：要写入的文档内容。</li></ul><p>实验中，我们写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.insert(&#123;title: &#x27;阿里云&#x27;, </span><br><span class="line">    description: &#x27;阿里云官网&#x27;,</span><br><span class="line">    by: &#x27;阿里云&#x27;,</span><br><span class="line">    url: &#x27;https://www.aliyun.com/&#x27;,</span><br><span class="line">    tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_17be65bbaa0f47698719c74b4cf22557.png"></p><p>点击确认</p><p>执行的结果如下，表示表示已经成功插入一条文档。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_6c99edc135334ca6a8d8e8e27501acef.png" alt="img"></p><ol start="2"><li>查询文档。使用find()方法。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query,projection);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>query：可选，使用查询操作符指定查询条件。</li><li>projection：可选，使用投影操作符指定返回的键。查询时如果您需要返回文档中所有键值，只需省略该参数即可（默认省略）。</li></ul><p>在SQLConsole中，输入如下SQL，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find();</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_81d74dfa8be64fd981258906a48da8e1.png" alt="img"></p><p>在下方执行结果中，您可以看到查询的返回结果。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_75fcb2e0d50a4792bead8a7be5808a75.png" alt="img"></p><ol start="3"><li>更新文档。使用方法update()来更新集合中的文档，语法格式如下。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">        &lt;query&gt;,</span><br><span class="line">        &lt;update&gt;,</span><br><span class="line">        &#123;</span><br><span class="line">            upsert:&lt;boolean&gt;,</span><br><span class="line">            multi:&lt;boolean&gt;,</span><br><span class="line">            writeConcern:&lt;document&gt;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>query：必填， update的查询条件，类似sql update查询内where后面的条件。</li><li>update：必填，update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的部分。</li><li>upsert：可选，该参数表示，如果不存在update的记录，是否插入objNew。取值：true（表示插入）|false（默认，表示不插入）。</li><li>multi：可选，该参数表示，是否更新按条件查询到的全部记录。取值：true（表示更新查询到的全部记录）| false（默认，表示只更新查询到的第一条记录）。</li><li>writeConcern：可选，抛出异常的级别。</li></ul><p>a. 在SQLConsole中，输入如下SQL，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.update(&#123;&#x27;title&#x27;:&#x27;阿里云&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;aliyun阿里云官方网站&#x27;&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_cb14045ce68b486695ed132b0a25d765.png" alt="img"></p><p>b. 在执行确认对话框中，单击确认。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_402e4595f81c41238cb8115a36e9139e.png" alt="img"></p><p>下方的执行结果中，您可以看到已经成功更新一条文档。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_fafe975c60db4968bad7bec9ff410cca.png" alt="img"></p><p>c. 在SQLConsole中，输入如下SQL，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find();</span><br></pre></td></tr></table></figure><p>在下方的执行结果中，您可以看到文档的title已经被更新了。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_ec51f34840d9409182d4bd5c8f395c99.png" alt="img"></p><ol start="4"><li>删除文档。使用deleteMany()方法来删除文档，语法如下。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.deleteMany(</span><br><span class="line">   &lt;filter&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">      writeConcern: &lt;document&gt;,</span><br><span class="line">      collation: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>filter：表示过滤条件，用于规定一个查询规则，筛选出符合该查询条件的所有文档。删除操作将作用于经过该查询条件筛选之后的文档，类似于关系型数据库的where后面的过滤条件。如果要删除集合中的所有文档，请传入一个空文档（{ }）。</li><li>writeConcern：可选参数，写入关注，其值为一个文档。</li><li>collation：可选参数，指定用于操作的collation。collation允许用户指定特定语言的字符串进行比较规则。</li></ul><p>a. 在SQLConsole中，输入如下SQL，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.deleteMany(&#123; title : &quot;aliyun阿里云官方网站&quot; &#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_b75c29e8dde44d9caacf5a08d43a2730.png" alt="img"></p><p>b. 在执行确认对话框中，单击确认。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_2c2ed9c72e1c47febebd619f565efc7c.png" alt="img"></p><p>在下方的执行结果中，您可以看到已经成功删除一条文档。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_19272781f299448d83c560a753788055.png" alt="img"></p><p>c. 在SQLConsole中，输入如下SQL，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find();</span><br></pre></td></tr></table></figure><p>在下方的执行结果中，您可以看到runoob集合中没有文档。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_b5ac3012b6d54603912111fc716b9bb9.png" alt="img"></p><h2 id="MongoDB-条件操作符的使用"><a href="#MongoDB-条件操作符的使用" class="headerlink" title="MongoDB 条件操作符的使用"></a>MongoDB 条件操作符的使用</h2><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p><p>MongoDB中条件操作符有：</p><ul><li>大于：$gt</li><li>小于：$lt</li><li>大于等于：$gte</li><li>小于等于：$lte</li></ul><ol><li>在SQLConsole中，输入如下三条插入文档SQL，单击执行。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.insert(&#123;</span><br><span class="line">    title: &#x27;阿里云官网&#x27;, </span><br><span class="line">    description: &#x27;阿里云官方网址。&#x27;,</span><br><span class="line">    by: &#x27;阿里云&#x27;,</span><br><span class="line">    url: &#x27;https://www.aliyun.com/&#x27;,</span><br><span class="line">    tags: [&#x27;aliyun1&#x27;],</span><br><span class="line">    likes: 200</span><br><span class="line">&#125;);</span><br><span class="line">db.testcollection.insert(&#123;title: &#x27;帮助中心&#x27;, </span><br><span class="line">    description: &#x27;阿里云帮助中心网址。&#x27;,</span><br><span class="line">    by: &#x27;阿里云&#x27;,</span><br><span class="line">    url: &#x27;https://help.aliyun.com/&#x27;,</span><br><span class="line">    tags: [&#x27;aliyun2&#x27;],</span><br><span class="line">    likes: 150</span><br><span class="line">&#125;);</span><br><span class="line">db.testcollection.insert(&#123;title: &#x27;体验实验室&#x27;, </span><br><span class="line">    description: &#x27;体验实验室网址&#x27;,</span><br><span class="line">    by: &#x27;阿里云&#x27;,</span><br><span class="line">    url: &#x27;https://developer.aliyun.com/&#x27;,</span><br><span class="line">    tags: [&#x27;aliyun3&#x27;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_7dd5d175612b400ca2fd9bab801997ef.png" alt="img"></p><ol start="2"><li>在执行sql过程中，会出现三次执行确认对话框，需要三次单击确认，。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_3baac4da7191418aaa778e283dbd07c0.png" alt="img"></p><p>下方的执行结果中，您可以看到已经成功插入三条文档。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_da8bdeaf22a846479157e053533a41f4.png" alt="img"></p><ol start="3"><li>使用大于操作符（$gt）。</li></ol><p>在SQLConsole中，输入如下SQL，获取testcollection集合中 “likes” 大于100的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find(&#123;likes : &#123;$gt : 100&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_76c83e31ad734242aeb0992844c97c0c.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_9d0749e742854ff2a704e997017bec09.png" alt="img"></p><ol start="4"><li>使用大于等于操作符（$gte）。</li></ol><p>在SQLConsole中，输入如下SQL，获取testcollection集合中 “likes” 大于等于100的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find(&#123;likes : &#123;$gte : 100&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_8a3dc286421a44aea411ab07ff26e0a3.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_297870c6074b49a0a88e443217d33104.png" alt="img"></p><ol start="5"><li>使用小于操作符（$lt）。</li></ol><p>在SQLConsole中，输入如下SQL，获取testcollection集合中 “likes” 小于150的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find(&#123;likes : &#123;$lt : 150&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_4c051ee6c690401884253f5b00771fd5.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_19edb7445f6142fa8c105daa075a633e.png" alt="img"></p><ol start="6"><li>使用小于等于操作符（$lte）。</li></ol><p>在SQLConsole中，输入如下SQL，获取testcollection集合中 “likes” 小于等于150的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find(&#123;likes : &#123;$lte : 150&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_4761af6e702040538061d1cfa0898224.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_40bfb018b9f04476ad0a62f57e2d2498.png" alt="img"></p><h2 id="MongoDB条件操作符-type的使用"><a href="#MongoDB条件操作符-type的使用" class="headerlink" title="MongoDB条件操作符$type的使用"></a>MongoDB条件操作符$type的使用</h2><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p><p>在SQLConsole中，输入如下SQL，获取testcollection集合中“title”为String的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find(&#123;&quot;title&quot; : &#123;$type : &#x27;string&#x27;&#125;&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_350251b60d5f4bc8affe17ed28cc0978.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_e83145a275694d539d83293ffd538c9f.png" alt="img"></p><h2 id="MongoDB的limit与skip方法"><a href="#MongoDB的limit与skip方法" class="headerlink" title="MongoDB的limit与skip方法"></a>MongoDB的limit与skip方法</h2><ol><li>MongoDB的limit()方法。limit()方法用于MongoDB中读取指定数量的数据。limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</li></ol><p>limit()方法基本语法如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER);</span><br></pre></td></tr></table></figure><p>在SQLConsole中，输入如下SQL，查询文档中的两条数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find().limit(2);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_1921f380fb7f451d86963635c5810202.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_1e054303277d49f4825173938e7376d7.png" alt="img"></p><ol start="2"><li>MongoDB的skip()方法。我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER);</span><br></pre></td></tr></table></figure><p>在SQLConsole中，输入如下SQL，查询文档中的指定的一条并跳过一条的数据，单击执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.testcollection.find().limit(1).skip(1);</span><br></pre></td></tr></table></figure><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_cc583f5baedb4bdb9df598156d533e37.png" alt="img"></p><p>执行结果如下。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_0a8f228f59bb4319a89a263c9fa72291.png" alt="img"></p><h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><ul><li><p>如果您不需要继续使用，请及时清理测试数据和试用资源</p></li><li><p><strong>云数据库 MongoDB</strong>资源清理</p></li></ul><p>登录<a href="https://mongodb.console.aliyun.com/replicate/cn-hangzhou/instances">云数据库 MongoDB控制台</a>，单击<strong>云数据库 MongoDB</strong>实例右侧的<strong>更多</strong>&gt;<strong>退订</strong>，单击<strong>确定</strong>。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_53d244a542544036944e77916910bd17.png" alt="img"></p><ul><li><strong>【重要】</strong>如若您通过试用领取的资源：<strong>云数据库 MongoDB</strong>（3个月内）试用，具有时长限制，使用完请及时清理相关资源。</li></ul><p>地址:<a href="https://developer.aliyun.com/adc/scenario/exp/0e15a033eb794bbfb6f69821f84edb2b?spm=a2c6h.26504196.trainingCamp.6.4b4a2e6bKzqnXb">MongoDB实验地址</a></p><h1 id="阿里云云数据库MongoDB-快速备份恢复"><a href="#阿里云云数据库MongoDB-快速备份恢复" class="headerlink" title="阿里云云数据库MongoDB 快速备份恢复"></a>阿里云云数据库MongoDB 快速备份恢复</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>备份有<strong>自动备份</strong>和<strong>手动备份</strong>两种。</p><h3 id="设置自动备份"><a href="#设置自动备份" class="headerlink" title="设置自动备份"></a>设置自动备份</h3><ol><li>在目标实例页面的左侧导航栏，单击<strong>备份与恢复</strong>，单击<strong>全量备份</strong>页签，点击<strong>备份设置</strong>。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_51babdb4425c46cdb33070e687e45378.png" alt="img" style="zoom:33%;"><ol start="2"><li>在备份设置面板，根据业务需求设置以下参数。</li></ol><ul><li>全量备份保留天数：设置全量备份数据保留天数，取值范围为7~730天。默认为30天。</li><li>备份时间：设置数据备份时间。以小时为单位选择任意时段，建议您将备份时间设置为业务低峰期的某个时段。</li><li>星期：设置每周数据备份的频率，默认为7次&#x2F;周。</li><li>日志备份：选择是否需要打开日志备份开关，默认打开。如果后续需要按时间点恢复功能，需要打开日志备份。</li><li>日志备份保留天数：当打开日志备份开关时，您需要设置日志备份保留的天数，取值范围为7~730天，默认为7天。</li></ul><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_3833157fbb75402f94d24aed6980a6d0.png" alt="img" style="zoom:33%;"><ol start="3"><li>单击确定，完成自动备份设置，后续就会根据设置好的参数进行自动备份。</li></ol><h3 id="手动备份"><a href="#手动备份" class="headerlink" title="手动备份"></a>手动备份</h3><ol><li>在目标实例页面的左侧导航栏，单击备份与恢复。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_c3c4d998f09e4af3a4069b3c2c8254b7.png" alt="img" style="zoom: 25%;"><ol start="2"><li>在目标实例页面右上方，单击备份实例。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_160fa5fc6b6d469787341baff1db0f85.png" alt="img" style="zoom:25%;"><ol start="3"><li>在备份实例 面板，选择备份方法-快照备份 。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_9241148e8b01418098509f354aa80e7b.png" alt="img" style="zoom:25%;"><ol start="4"><li>单击确定后，会开启备份，备份完成后，在备份列表部分，会列出备份完成的备份集。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_658229fba69649b4bf01343ef76d97db.png" alt="img" style="zoom:25%;"><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><h3 id="按备份点将备份数据恢复至新建实例"><a href="#按备份点将备份数据恢复至新建实例" class="headerlink" title="按备份点将备份数据恢复至新建实例"></a>按备份点将备份数据恢复至新建实例</h3><ol><li>在备份列表部分，点击从备份点创建实例。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_34f67492492e4e998ac8b586537890a7.png" alt="img" style="zoom: 25%;"><ol start="2"><li>选择要恢复的数据库。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_cd27abaaa7414719952d5baf4e485d3b.png" alt="img" style="zoom:25%;"><ol start="3"><li>单击确定后，跳转到克隆实例页面，勾选对应的参数后，点击立即购买，即可将数据按备份集恢复到新的实例。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_c8797482eca6445ebe00ff99e6014e72.png" alt="img" style="zoom:25%;"><h3 id="按时间点将备份数据恢复至新建实例"><a href="#按时间点将备份数据恢复至新建实例" class="headerlink" title="按时间点将备份数据恢复至新建实例"></a>按时间点将备份数据恢复至新建实例</h3><ol><li>在备份列表部分，点击按时间点创建实例。</li></ol><p><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_5ffb8c571aa24a9b8c46838465c26ac3.png" alt="img"></p><ol start="2"><li>选择要恢复的时间点和数据库。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/stgomecigc6ee_232ce35361574f4da0e09c026a2551e3.png" alt="img" style="zoom: 33%;"><ol start="3"><li>单击确定后，跳转到克隆实例页面，勾选对应的参数后，点击立即购买，即可将数据按备份集恢复到新的实例。</li></ol><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_993874b2aa8a4c96b1166698b70c30e3.png" alt="img" style="zoom: 25%;"><h2 id="清理-释放数据库"><a href="#清理-释放数据库" class="headerlink" title="清理(释放数据库)"></a>清理(释放数据库)</h2><ul><li><strong>云数据库 MongoDB</strong>资源清理</li></ul><p>登录<a href="https://mongodb.console.aliyun.com/replicate/cn-hangzhou/instances">云数据库 MongoDB控制台</a>，单击<strong>云数据库 MongoDB</strong>实例右侧的<strong>更多</strong>&gt;<strong>退订</strong>，单击<strong>确定</strong>。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/knxposbsxxvbo_53d244a542544036944e77916910bd17.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用云监控和弹性伸缩实现弹性架构设计</title>
      <link href="/2023/06/19/%E4%BD%BF%E7%94%A8%E4%BA%91%E7%9B%91%E6%8E%A7%E5%92%8C%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E5%AE%9E%E7%8E%B0%E5%BC%B9%E6%80%A7%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/06/19/%E4%BD%BF%E7%94%A8%E4%BA%91%E7%9B%91%E6%8E%A7%E5%92%8C%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E5%AE%9E%E7%8E%B0%E5%BC%B9%E6%80%A7%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h1><p>需要创建2台部署了云监控插件的ECS实例。</p><ol><li><p>配置负载均衡实例的监听配置，创建ECS实例的自定义镜像。</p></li><li><p>在创建弹性伸缩服务，配置报警任务，将已创建的ECS实例加入伸缩组和负载均衡实例后端。最后，增加ECS的CPU使用率达到100%，通过弹性伸缩服务，自动新建ECS实例并添加到负载均衡实例后端。</p></li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/intro/f5b61d01652e41a1a23e406f9eea4c14/images/course-f5b61d01652e41a1a23e406f9eea4c14-intro-image-1471571422748-vt3u8A" alt="示意图"></p><h1 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h1><p>完成此实验后，可以掌握的能力有：</p><ol><li><p>创建弹性伸缩组；</p></li><li><p>创建报警任务；在CPU达到指定范围时，自动弹出ECS实例；</p></li><li><p>弹性伸缩服务与负载均衡服务和云监控的结合应用。</p></li></ol><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>视频公司，游戏公司，电商公司，经常会遇到如下的场景：</p><p>节假日热门节目，播放点击率很高；<br>在商品特卖，或者促销活动中，大量客户访问量，无法预估业务负载情况；<br>游戏公测期间，无法预估客户访问量；<br>面对如上的场景，需要一个可以根据用户的业务需求，自动调整其弹性资源的管理服务。在业务需求高峰期增长时，无需停止服务，无缝的增加计算资源。在业务量下降时，可以自动减少计算资源，从而节约成本。</p><p>阿里云提供弹性伸缩服务，该产品可以对根据客户的业务需求，对ECS实例进行增减。用户无需提前预估业务高峰期，或者突增的业务访问量，就可以自动的分配资源。</p><h1 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h1><p>关于阿里云的弹性伸缩服务，其涉及的术语如下：</p><p>伸缩组：具有相同应用场景的ECS实例的集合。伸缩组定义了组内ECS实例数的最大值，最小值及其相关的SLB和RDS实例等属性；<br>伸缩配置：定义了弹性伸缩的ECS实例的配置信息；<br>伸缩规则：定义了具体的扩展或收缩操作，例如：移入或移出N个ECS实例；<br> 伸缩活动：伸缩规则成功出发后，就会产生一条伸缩活动。伸缩活动主要描述伸缩组内ECS实例的变化情况；<br>伸缩触发任务：用于触发伸缩规则的任务，如定时任务，云监控的报警任务；</p><p>冷却时间：在同一伸缩组内，一个伸缩活动执行完成后的一段锁定时间。在这段锁定时间，该伸缩组不执行其他的伸缩活动。</p><h1 id="实验步奏"><a href="#实验步奏" class="headerlink" title="实验步奏"></a>实验步奏</h1><h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p>添加2个ECS(我手贱，多创建了一台)</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618212756300.png" alt="image-20230618212756300" style="zoom: 33%;"><p>1） 后端协议［端口］：“HTTP”；80</p><p>2） 开启监听带宽限速：输入 1 M</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/c1c33ee06c2137c18af954ef6fb34b07e1d0fc.png" alt="阿里云1+X云计算开发与运维实战——使用云监控和弹性伸缩实现弹性架构设计_管理控制_08" style="zoom: 50%;"><p>后端服务器中选择默认服务器组，点击继续添加，选择平台创建好的ECS实例，配置端口：80   权重：50，90.100，完成监听配置。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/a78e84d63ea265e028f178f7add86d7ff130fd.png" alt="阿里云1+X云计算开发与运维实战——使用云监控和弹性伸缩实现弹性架构设计_管理控制_09" style="zoom: 50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618213310681.png" alt="image-20230618213310681" style="zoom: 33%;"><h2 id="配置弹性伸缩服务"><a href="#配置弹性伸缩服务" class="headerlink" title="配置弹性伸缩服务"></a>配置弹性伸缩服务</h2><p>本实验使用阿里云提供的“整体方案创建管理”的功能，该功能通过向导模式，创建整体伸缩方案。</p><p>创建完整的弹性伸缩方案，需要通过如下4步完成：</p><ol><li>创建伸缩组，添加ECS实例；</li><li>创建伸缩配置；</li><li>创建报警任务。</li></ol><h3 id="创建伸缩组-顺带添加ECS实例"><a href="#创建伸缩组-顺带添加ECS实例" class="headerlink" title="创建伸缩组(顺带添加ECS实例)"></a>创建伸缩组(顺带添加ECS实例)</h3><ol><li>点击页面顶部的“<strong>产品与服务</strong>”，在弹出的服务列表中，依次选择“<strong>弹性计算</strong>”，“<strong>弹性伸缩</strong>”服务。进入<strong>弹性伸缩服务管理控制台</strong>。</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618222937583.png" alt="image-20230618222937583"></p><p>注意负载均衡要选上</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/67a0ab0335f209fe66b519ebc5bfaa09cc6f2e.png"></p><p>查看实例列表</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618223427621.png" alt="image-20230618223427621"></p><h3 id="伸缩配置"><a href="#伸缩配置" class="headerlink" title="伸缩配置"></a>伸缩配置</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618223523089.png" alt="image-20230618223523089"></p><h3 id="创建报警任务"><a href="#创建报警任务" class="headerlink" title="创建报警任务"></a>创建报警任务</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618223627376.png" alt="image-20230618223627376"></p><h4 id><a href="#" class="headerlink" title></a></h4><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>安装测试工具<code>yum install -y stress</code></p><p>然后执行压力测试命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10m</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618224737811.png" alt="image-20230618224737811" style="zoom:50%;"><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618224336501.png" alt="image-20230618224336501"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云监控初体验</title>
      <link href="/2023/06/18/%E4%BA%91%E7%9B%91%E6%8E%A7%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2023/06/18/%E4%BA%91%E7%9B%91%E6%8E%A7%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="云监控介绍"><a href="#云监控介绍" class="headerlink" title="云监控介绍"></a>云监控介绍</h1><p>云监控CMS(Cloud monitor System)是一个开放性监控平台，可用实时监控站点和服务器，并且提供多种告警方式(短信，旺旺，邮件)。</p><h2 id="云监控CMS的应用场景"><a href="#云监控CMS的应用场景" class="headerlink" title="云监控CMS的应用场景"></a>云监控CMS的应用场景</h2><ul><li>帮助运维人员<strong>实时</strong>了解网络状况，获取监控指标</li><li>网络升级后，监控SLB的<strong>负载均衡是否实现</strong></li><li>监控到的数据可用作为<strong>弹性伸缩服务ESS的触发条件</strong></li></ul><h2 id="云监控的相关概念"><a href="#云监控的相关概念" class="headerlink" title="云监控的相关概念"></a>云监控的相关概念</h2><ul><li>监控项:用户设置或者系统默认的监控数据类型。例如站点监控的http监控有两个监控项<code>http.responseTime</code>和<code>http.status</code></li><li>监控点:是一个监控项的实例。</li><li>维度:定位监控项数据位置的维度。（这个没理解）</li><li>规则:如果”CPU使用率&gt;80%”报警，那么”CPU使用率&gt;80%”是规则。</li><li>报警组:一组报警联系人，可以包含一个或者多个联系人</li><li>报警方式:出现异常通知用户的手段</li></ul><h2 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h2><p>本实验会自动创建一台已部署Nginx的ECS实例和一台负载均衡SLB实例。</p><ol><li><p>使用阿里云云监控的 <strong>云服务监控</strong> 服务，配置并查看ECS实例和SLB实例的监控数据。</p></li><li><p>设置ECS实例的报警规则，并验证报警规则生效。</p></li><li><p>使用 <strong>站点监控</strong> 服务，监控已部署Nginx的站点的状态，并设置站点报警规则，验证报警规则。</p></li><li><p>清理云监控中的监控资源。</p></li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/intro/1566f3b63bfa4df3880bcf5a30e27215/images/course-1566f3b63bfa4df3880bcf5a30e27215-intro-image-1471517119129-FrApNa"></p><p>这里主要是对CPU，和http状态监控。</p><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>完成此实验后，可以掌握的能力有：</p><ol><li><p>使用云监控的管理控制台，监控ECS等阿里云产品</p></li><li><p>创建报警规则，及时获取阿里云服务或站点的异常状态；</p></li><li><p>使用站点监控，对网站进行监控。</p></li><li><p>清理云监控中的监控资源</p></li></ol><h1 id="实验步奏"><a href="#实验步奏" class="headerlink" title="实验步奏"></a>实验步奏</h1><p>本实验主要实现对ECS和负载均衡实例的基本监控。</p><p>首先，在负载均衡实例中创建监听，然后，在ECS实例中安装云监控插件。</p><p>说明：使用云监控对负载均衡实例进行监控时，不需要安装监控插件。但是，负载均衡实例中必须有监听。否则，云监控将无法对负载均衡实例进行监控。</p><h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><p>　Nginx是一款轻量级的网页服务器、反向代理服务器。相较于Apache、lighttpd具有占有内存少，稳定性高等优势。它最常的用途是提供反向代理服务。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Nginx的安装依赖于以下三个包，意思就是在安装Nginx之前首先必须安装一下的三个包，注意安装顺序如下：</p><ul><li><p>SSL功能需要openssl库，直接通过yum安装: #<code>yum install openssl</code></p></li><li><p>gzip模块需要zlib库，直接通过yum安装: #<code>yum install zlib</code></p></li><li><p>rewrite模块需要pcre库，直接通过yum安装: #<code>yum install pcre</code></p></li></ul><h3 id="安装nginx依赖项和Nginx"><a href="#安装nginx依赖项和Nginx" class="headerlink" title="安装nginx依赖项和Nginx"></a>安装nginx依赖项和Nginx</h3><ul><li>使用yum安装nginx需要包括Nginx的库，安装Nginx的库</li></ul><p><code>rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></p><ul><li><p>使用下面命令安装nginx :  <code>yum install nginx</code></p></li><li><p>启动Nginx : <code>service nginx start</code></p></li><li><p>直接浏览器访问<strong>IP地址</strong>就会出现Nginx的欢迎界面表示你安装成功了，否则就是安装失败了(默认的80端口，其他端口，请检查放开)</p></li></ul><p>　　默认80端口加入防火墙访问白名单中：<code>firewall-cmd --permanent --zone=public --add-port=80/tcp</code></p><p>　　使用<code>firewall-cmd --reload</code>命令使其生效</p><p>出现问题</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618190150243.png" alt="image-20230618190150243"></p><blockquote><p>需要开启防火墙即可</p><p>开启防火墙：systemctl start firewalld</p><p>关闭防火墙：systemctl stop firewalld</p><p>查看防火墙状态：systemctl status firewalld</p></blockquote><p>部署成功</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618191244571.png" alt="image-20230618191244571" style="zoom: 25%;"><ul><li>配置Nginx</li></ul><p>CentOS安装Nginx后，安装在了 &#x2F;etc&#x2F;nginx&#x2F;目录下，你可以打开&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default&#x2F;conf查看里面的配置，包括监听端口，域名和nginx访问的根目录</p><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>以上安装方法nginx的配置文件位于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>非此办法，而不一致可以查询<code>whereis nginx</code></p><p>Nginx配置文件常见结构的从外到内依次是「http」「server」「location」等等，缺省的继承关系是从外到内，也就是说内层块会自动获取外层块的值作为缺省值。</p><h2 id="配置负载均衡实例"><a href="#配置负载均衡实例" class="headerlink" title="配置负载均衡实例"></a>配置负载均衡实例</h2><ol><li>进入负载均衡控制中心</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618203448193.png" alt="image-20230618203448193" style="zoom:33%;"><ol start="2"><li>添加<strong>监听</strong></li></ol><p>在 基本配置 页面中，输入如下参数：前端协议 选择 HTTP，端口 设为 80；后端协议 HTTP的端口也设为 80；带宽峰值 为 1M。其余为默认设置。完成后，点击 下一步。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618203530772.png" alt="image-20230618203530772" style="zoom:33%;"><p>最后如图</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618203846668.png" alt="image-20230618203846668" style="zoom: 50%;"><h2 id="云监控"><a href="#云监控" class="headerlink" title="云监控"></a>云监控</h2><h3 id="主机监控"><a href="#主机监控" class="headerlink" title="主机监控"></a>主机监控</h3><ol><li>点击阿里云管理控制台的左上角 <strong>产品与服务</strong>，在弹出的下拉列表中，依次选择 <strong>云计算基础服</strong>务—<strong>监控与管理</strong>—<strong>云监控</strong>，进入云监控的管理控制台。</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618204244069.png" alt="image-20230618204244069" style="zoom: 33%;"><ol start="2"><li>点击左侧栏 <strong>主机监控</strong> 。点击<strong>批量安装或升级插件</strong>进行插件的安装。</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618204508563.png" alt="image-20230618204508563" style="zoom:50%;"><p>说明：若ECS实例没有安装云监控插件，则无法使用云监控对ECS实例进行监控。</p><ol start="3"><li>查看此台ECS实例的监控数据。点击ECS实例右侧的 监控图表，实时查看更新的监控数据。</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/05f29f3738a10139e6f6770d40707c48c38907.png" alt="阿里云1+X云计算开发与运维实战——云监控初体验_负载均衡_22" style="zoom:50%;"><h3 id="云服务监控"><a href="#云服务监控" class="headerlink" title="云服务监控"></a>云服务监控</h3><p>这个就是负载均衡界面的</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618205256956.png" alt="image-20230618205256956" style="zoom:33%;"><h3 id="创建报警任务"><a href="#创建报警任务" class="headerlink" title="创建报警任务"></a>创建报警任务</h3><p>在<strong>云监控</strong>界面中</p><ol><li>设置报警联系人</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618205505262.png" alt="image-20230618205505262" style="zoom:67%;"><ol start="2"><li>设置<strong>报警规则</strong></li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618205843332.png" alt="image-20230618205843332" style="zoom:50%;"><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>基本是大功告成了，我们测试一下。</p><p>安装测试工具<code>yum install -y stress</code></p><p>然后执行压力测试命令</p><p><code>stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10m</code></p><p>观察云监控，没有动静</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618210332555.png" alt="image-20230618210332555" style="zoom:50%;"><p>等几分钟</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618210611275.png" alt="image-20230618210611275"></p><p>最后，恢复正常也会发信息。</p><p>非阿里的产品也可以安装阿里的云监控！！支持Linux和windows系统。</p><p>实验地址:<a href="https://edu.aliyun.com/lab/courses/1566f3b63bfa4df3880bcf5a30e27215/detail?purchaseRecordId=null">云监控初体验</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本操作:磁盘操作</title>
      <link href="/2023/06/17/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/06/17/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><img src="https://img-blog.csdnimg.cn/20210418224626979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xYV2FsYXoxczFz,size_16,color_FFFFFF,t_70#pic_center"></p><p>为了区分存储内容的不同，以及快速定位寻址文件，也需要采取分区的形式。</p><h1 id="硬盘分区和文件系统"><a href="#硬盘分区和文件系统" class="headerlink" title="硬盘分区和文件系统"></a>硬盘分区和文件系统</h1><h2 id="分区标准"><a href="#分区标准" class="headerlink" title="分区标准"></a>分区标准</h2><p>最重要的是<strong>分区表</strong>。分区表用于记录硬盘怎么分的一张表。</p><p>现在的主流标准是<strong>MBR</strong>和<strong>GPT</strong>。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617180625050.png" alt="image-20230617180625050"></p><h3 id="MBR分区"><a href="#MBR分区" class="headerlink" title="MBR分区"></a><strong>MBR</strong>分区</h3><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617180831611.png" alt="image-20230617180831611" style="zoom: 50%;"><p>MBR的分区表存储在硬盘最开始的512字节，但是还有别的东西，例如系统启动加载器。MBR真正能用的是64字节。所以最多只有四个分区。</p><p>随着硬盘容量变大，人们需要更多的分区，但是最多只有四个分区。这个时候，拿出其中一个分区作为扩展部分，分区表里面不再记录分区信息，而是记录另一张分区表的信息。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617181515947.png" alt="image-20230617181515947" style="zoom:33%;"><p>为了避免原先分区和扩展部分的分区混淆，之前的叫做主分区，扩展的叫做扩展分区。因为有了之前64字节的坑，所以扩展分区可以记录无数的分区，这些新的分区，就叫做逻辑分区。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617181531893.png" alt="image-20230617181531893"></p><p>缺点:无法支持2TB的大硬盘。</p><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a><strong>GPT</strong></h3><p>GPT舒服的多，没有那么多乱七八糟的分区，只有一种分区——主分区。</p><p>分区数量没有限制，支持2TB以上的。</p><p>GPT是UEFI的一部分，使用GUID或者Linux中的UUID来定义分区和分区类型。</p><p>GPT会分出一个ESP分区，用来做系统引导启动。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>分好区之后，需要格式化，格式化的时候，需要选择一个文件系统。</p><p>文件系统是操作系统用于明确存储设备（常见的是磁盘，也有基于NAND Flash的<a href="https://so.csdn.net/so/search?q=%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98&spm=1001.2101.3001.7020">固态硬盘</a>）或分区上的文件的方法和数据结构，即在存储设备上组织文件的方法。</p><p>常见的文件系统类型</p><p><strong>FAT</strong></p><p>在Win 9X下，FAT16支持的分区最大为2GB。我们知道计算机将信息保存在硬盘上称为“簇”的区域内。使用的簇越小，保存信息的效率就越高。在FAT16的情况下，分区越大簇就相应的要大，存储效率就越低，势必造成存储空间的浪费。并且随着计算机硬件和应用的不断提高，FAT16文件系统已不能很好地适应系统的要求。在这种情况下，推出了增强的文件系统FAT32。</p><p><strong>NTFS</strong></p><p>NTFS文件系统是一个基于安全性的文件系统，是Windows NT所采用的独特的文件系统结构，它是建立在保护文件和目录数据基础上，同时照顾节省存储资源、减少磁盘占用量的一种先进的文件系统。使用非常广泛的Windows NT 4.0采用的就是NTFS 4.0文件系统，相信它所带来的强大的系统安全性一定给广大用户留下了深刻的印象。Win 2000采用了更新版本的NTFS文件系统NTFS 5.0，它的推出使得用户不但可以像Win 9X那样方便快捷地操作和管理计算机，同时也可享受到NTFS所带来的系统安全性。</p><p><strong>exFAT</strong></p><p>全称Extended File Allocation Table File System，扩展FAT，即扩展文件分配表，是Microsoft在Windows Embeded 5.0以上（包括Windows CE 5.0、6.0、Windows Mobile5、6、6.1）中引入的一种适合于闪存的文件系统，为了解决FAT32等不支持4G及其更大的文件而推出。</p><p><strong>RAW</strong></p><p>RAW文件系统是一种磁盘未经处理或者未经格式化产生的文件系统，一般来说有这几种可能造成正常文件系统变成RAW文件系统：没有格式化、格式化中途取消操作、硬盘出现坏道、硬盘出现不可预知的错误、毒所致。</p><p>解决RAW文件系统的最快的方法是立即格式化，并且使用杀毒软件全盘杀毒。当然，如果文件很重要的话可以用迷你兔数据恢复软件先救出数据，然后再格式化和杀毒。</p><p><strong>Ext</strong></p><p>Ext2：Ext是GNU&#x2F;Linux 系统中标准的文件系统，其特点为存取文件的性能极好，对于中小型的文件更显示出优势，这主要得利于其簇快取层的优良设计。</p><p>Ext3：是一种日志式文件系统，是对ext2系统的扩展，它兼容ext2。日志式文件系统的优越性在于：由于文件系统都有快取层参与运作，如不使用时必须将文件系统卸下，以便将快取层的资料写回磁盘中。因此每当系统要关机时，必须将其所有的文件系统全部shutdown后才能进行关机。</p><p>Ext4：Linux kernel 自 2.6.28 开始正式支持新的文件系统 Ext4。Ext4 是 Ext3 的改进版，修改了 Ext3 中部分重要的数据结构，而不仅仅像 Ext3 对 Ext2 那样，只是增加了一个日志功能而已。Ext4 可以提供更佳的性能和可靠性，还有更为丰富的功能。</p><p><strong>HFS</strong></p><p>分层文件系统（Hierarchical File System，HFS）是一种由苹果电脑开发，并使用在Mac OS上的文件系统。最初被设计用于软盘和硬盘，同时也可以在在只读媒体如CD-ROM上见到。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617182229744.png" alt="image-20230617182229744" style="zoom:50%;"><h1 id="Linux的存储结构"><a href="#Linux的存储结构" class="headerlink" title="Linux的存储结构"></a>Linux的存储结构</h1><p>Linux的根目录是’&#x2F;‘</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617182843459.png" alt="image-20230617182843459" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617182917364.png" alt="image-20230617182917364" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618113456182.png" alt="image-20230618113456182" style="zoom: 67%;"><h1 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h1><p>上面也介绍过文件的作用。文件系统就是如何对磁盘空间管理，如何组织和如何访问的方式。</p><p>Linux支持的文件有很多，常见的有:</p><ol><li><strong>Ext家族</strong></li></ol><ul><li>Ext2:Linux第一个商业级文件系统，最早在1992年。因为不包含日志读写功能，数据丢失的可能性很大，所以能不用就不用</li><li>Ext3：一款日志文件系统。会把整个硬盘写入动作的细节预先记录下来，然后再实际操作，这样的话，宕机后可以回溯追踪到被中断的部分。但是硬盘容量很大的时候，修复时间会很长，有风险。</li><li>Ext4:在Ext3的基础上，解决大容量问题。支持的存储容量高达1EB（1，043，741，824GB），无限多的子目录。批量分配block(块)，提高读写效率。</li></ul><ol start="2"><li><strong>XFS</strong></li></ol><p>这个是一个高性能的日志文件系统，比Ext4厉害。官方说宕机之后可以快速修复，而且强大的日志功只花费很低的系统资源，最高支持18EB那么牛逼。刘遄老师测试过，性能并没有比Ext4压倒性优势，读者可以去实测一下。</p><h1 id="Linux挂载硬件设备"><a href="#Linux挂载硬件设备" class="headerlink" title="Linux挂载硬件设备"></a>Linux挂载硬件设备</h1><p>流程:</p><ol><li>首先要有硬件设备，确认硬件设备，可以是设备名字，或者UUID</li><li>使用挂载命令，让Linux系统识别</li></ol><h2 id="确认硬件设备"><a href="#确认硬件设备" class="headerlink" title="确认硬件设备"></a>确认硬件设备</h2><p>直接看<strong>设备名字</strong></p><p>如果是网络设备，名字变来变去，不如直接使用“身份证”——<strong>UUID</strong>。</p><p>查看UUID: <code>blkid [设备名]</code>    (<code>blkid</code>是block id缩写)</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618115942779.png" alt="image-20230618115942779" style="zoom:33%;"><p>或者使用<code>lsblk -f</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618120113714.png" alt="image-20230618120113714" style="zoom:33%;"><h2 id="使用挂载命令"><a href="#使用挂载命令" class="headerlink" title="使用挂载命令"></a>使用挂载命令</h2><p>确认好硬件设备之后，我们开始挂载。</p><h4 id="临时挂载-重启失效-mount-硬件设备-挂载目录"><a href="#临时挂载-重启失效-mount-硬件设备-挂载目录" class="headerlink" title="临时挂载(重启失效):mount  硬件设备 挂载目录"></a><strong>临时挂载</strong>(重启失效):<code>mount  硬件设备 挂载目录</code></h4><p>(其实还有好多参数，读者可以百度一下)</p><ol><li>设别名字挂载</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618121058776.png" alt="image-20230618121058776" style="zoom:33%;"><ol start="2"><li>UUID挂载</li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618121231484.png" alt="image-20230618121231484" style="zoom:33%;"><h4 id="永久挂载-mount-a"><a href="#永久挂载-mount-a" class="headerlink" title="永久挂载:mount -a"></a><strong>永久挂载</strong>:<code>mount -a</code></h4><ol><li>先要在<code>/etc/fstab</code>写入信息</li></ol><p>格式:<code>设备文件 挂载目录 格式类型 权限选项 是否备份 是否自检</code></p><ul><li>设备文件:一般是设备路径+设备名称，也可以是UUID</li><li>挂载目录:指定挂载位置，要提前创建好</li><li>格式类型:文件系统，可以是Ext4,Ext3,XFS等等</li><li>权限设置: defaults就好</li><li>是否备份:1表示开机用dump备份，0不备份</li><li>是否自检:1开机自检，0不自检</li></ul><p>这些记不住没关系，写的时候上面有提示</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618122157130.png" alt="image-20230618122157130" style="zoom:33%;"><p>写完不会立即生效，需要<code>mount -a</code></p><ol start="2"><li>使用<code>mount -a 设备 挂载路径</code></li></ol><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618122614105.png" alt="image-20230618122614105" style="zoom: 33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618122634340.png" alt="image-20230618122634340" style="zoom:50%;"><p>读者朋友注意: Ext4会报错，直接写ext4就好(Centos7.9测试)</p><h4 id="FAT32挂载"><a href="#FAT32挂载" class="headerlink" title="FAT32挂载"></a>FAT32挂载</h4><p>这里是属于其他文件系统挂载,以FAT3举例。FAT32是windows系统使用，在Linux系统，你可以不需要驱动，工具，直接挂载即可。</p><p><code>mount -t ntfs /dev/sda1 /home/disk #/dev/sda1需替换为自己的硬盘名</code></p><blockquote><p> 参数-t是指定文件系统，mount有很多参数，我不想长篇大论，所以在具体场景中使用一下。</p><p>ext2 ：linux目前常用的文件系统</p><p>msdos ： MS-DOS的fat，就是fat16</p><p>vfat ： windows98常用的fat32</p><p>nfs ： 网络文件系统</p><p>iso9660 ：CD-ROM光盘标准文件系统</p><p>ntfs ： windows NT&#x2F;2000&#x2F;XP的文件系统</p><p>auto ：自动检测文件系统</p></blockquote><h4 id="卸载设备"><a href="#卸载设备" class="headerlink" title="卸载设备"></a>卸载设备</h4><p>命令:<code>umount  设备名字/UUID/挂载目录</code>(三选一即可)</p><h1 id="Linux磁盘操作命令"><a href="#Linux磁盘操作命令" class="headerlink" title="Linux磁盘操作命令"></a>Linux磁盘操作命令</h1><h2 id="查看磁盘空间使用df"><a href="#查看磁盘空间使用df" class="headerlink" title="查看磁盘空间使用df"></a>查看磁盘空间使用df</h2><p>命令:<code>df</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618123842006.png" alt="image-20230618123842006" style="zoom: 33%;"><p>看的让人懵逼，加一个参数<code>-h</code></p><p>再来<code>df -h</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618123943903.png" alt="image-20230618123943903" style="zoom:33%;"><p>舒服多了</p><p><code>fdisk  -l 磁盘</code>(后面有提)是看硬盘信息，和<code>df</code>区别，大家看图理解。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618152715721.png" alt="image-20230618152715721" style="zoom:33%;"><h2 id="查看占用大小du"><a href="#查看占用大小du" class="headerlink" title="查看占用大小du"></a>查看占用大小du</h2><p>这个命令用来查看分区或者目录所占磁盘容量的大小，建议带上参数</p><p>与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看</p><p><code>du -sh 目录名称/分区</code></p><p>eg: <code>du -sh /* </code>查看Linux系统根目录下所有一级目录分别占用的空间大小</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618124418022.png" alt="image-20230618124418022" style="zoom:33%;"><h2 id="新硬盘格式化"><a href="#新硬盘格式化" class="headerlink" title="新硬盘格式化"></a>新硬盘格式化</h2><p>注意:格式化的时候，<strong>不能在挂载状态！</strong></p><p>新来的硬盘空盘一般不能用，硬盘要先分区，还要格式化。</p><h3 id="fdisk分区"><a href="#fdisk分区" class="headerlink" title="fdisk分区"></a><strong>fdisk分区</strong></h3><p><code>fdisk</code>用来新建，修改，转换分区以及删除磁盘分区表信息，全称”format disk”</p><p>语法格式:<code>fdisk 磁盘名称</code></p><p>参数如下</p><ul><li>-m : 查看全部可用参数</li><li>-n  : 添加新的分区</li><li>-d  : 删除分区</li><li>-l   : 列出所有可用分区</li><li>-t  : 改变分区的类型</li><li>-p : 查看分区表信息</li><li>-w : 保存并退出</li><li>-q  : 直接退出，不保存</li></ul><p>分区信息如果没有同步给Linux内核，可用使用<code>partprobe</code>,再用<code>file 文件名</code>查看信息 。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618154018113.png" alt="image-20230618154018113" style="zoom:33%;"><h3 id="硬盘格式化"><a href="#硬盘格式化" class="headerlink" title="硬盘格式化"></a>硬盘格式化</h3><p>格式化命令:<code>mkfs.xxx 设备名称</code> </p><p>例如: <code>mkfs.xfs /dev/sdb</code></p><h3 id="添加硬盘实践"><a href="#添加硬盘实践" class="headerlink" title="添加硬盘实践"></a>添加硬盘实践</h3><p><code>fdisk /dev/sdb</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618152900867.png" alt="image-20230618152900867" style="zoom:33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618153007835.png" alt="image-20230618153007835" style="zoom:33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618154018113.png" style="zoom:33%;"><p>如果在挂载，<code>umount /dev/sdb</code>,然后如下</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618154336852.png" alt="image-20230618154336852" style="zoom:33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230618154549020.png" alt="image-20230618154549020" style="zoom:33%;"><p>如果有错误或者更好的建议，请朋友们不吝赐教！</p><p>最后感谢：</p><p><a href="https://blog.csdn.net/wsmzyzdw/article/details/82908736">什么是文件系统</a></p><p><a href="https://www.bilibili.com/video/BV1Tb411t7Fc/?spm_id_from=333.880.my_history.page.click&vd_source=197cd9faf9dfebb5668cf8cff4737d21">硬盘分区和文件系统</a></p><p><a href="https://www.linuxprobe.com/basic-learning-06.html">Linuxprobe-[第6章 存储结构与管理硬盘]</a></p><p><a href="https://blog.csdn.net/qq_41084756/article/details/129183007">挂载ntfs</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡实现https与http的混合访问</title>
      <link href="/2023/06/17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0https%E4%B8%8Ehttp%E7%9A%84%E6%B7%B7%E5%90%88%E8%AE%BF%E9%97%AE/"/>
      <url>/2023/06/17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0https%E4%B8%8Ehttp%E7%9A%84%E6%B7%B7%E5%90%88%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><p>互联网巨头雅虎官方对外发布消息，承认在2014年的一次黑客袭击中，至少5亿用户的数据信息遭窃。此次事件让我们再次意识到网站安全的重要性，网站加密防护的必要性。</p><p>因为http协议是不加密的，所以用户使用的时候，并不安全。https是加密的，能够保护用户的信息。<strong>但是现在有一个问题</strong>:用户习惯直接输入域名，会直接使用HTTP协议。那么我们在云端需要做一个转换。</p><p>  本实验使用负载均衡配置监听，利用Nginx实现HTTP请求向HTTPS请求的转化，从而完成HTTP和HTTPS的混合访问。</p><p>HTTP请求转化为HTTPS请求架构图</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/a3a8f9e7dc164da69104f3d81fc47aaf/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-intro-image-1501645276490-Edr7UB"></p><h1 id="补充-HTTPS和HTTP"><a href="#补充-HTTPS和HTTP" class="headerlink" title="补充:HTTPS和HTTP"></a>补充:HTTPS和HTTP</h1><p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p><ul><li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容，用户号容易没。</li><li><strong>篡改风险</strong>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。</li><li><strong>冒充风险</strong>，比如冒充淘宝网站，用户钱容易没。</li></ul><p>HTTPS是增加了SSL&#x2F;TLS</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/19-HTTPS%E4%B8%8EHTTP.png" alt="HTTPS与HTTP"></p><h1 id="实验步奏"><a href="#实验步奏" class="headerlink" title="实验步奏"></a>实验步奏</h1><h2 id="配置监听"><a href="#配置监听" class="headerlink" title="配置监听"></a>配置监听</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617140138698.png" alt="image-20230617140138698" style="zoom: 33%;"><p>添加 <strong>负载均衡</strong> 的 HTTPS 协议的监听。</p><p>在 <strong>基本配置</strong> 页面，配置如下信息：</p><ul><li><strong>前端协议［端口］</strong>：选择 <strong>HTTPS</strong> ，并填写端口号为 <strong>443</strong> ；</li></ul><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/bb0992b836ae494a90d726755efae812/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-bb0992b836ae494a90d726755efae812-content-image-1589858251382-baBY42" style="zoom:50%;"><p>添加组</p><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/bb0992b836ae494a90d726755efae812/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-bb0992b836ae494a90d726755efae812-content-image-1589858341298-cUkv1k" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617140459241.png" alt="image-20230617140459241" style="zoom:50%;"><p>添加 <strong>负载均衡</strong> 的 HTTP 协议的监听</p><ul><li><strong>前端协议［端口］</strong>：选择 <strong>HTTP</strong> ，并填写端口号为 <strong>80</strong> ；</li></ul><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/bb0992b836ae494a90d726755efae812/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-bb0992b836ae494a90d726755efae812-content-image-1589858729234-mcfprF" style="zoom:50%;"><p>后端服务器组，选择默认服务器组</p><ul><li>后端协议［端口］：默认使用 HTTP ，填写端口号为 88 ；</li><li>其余配置信息保持默认，完成如上配置后，点击 <strong>下一步</strong> 。</li></ul><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/bb0992b836ae494a90d726755efae812/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-bb0992b836ae494a90d726755efae812-content-image-1554706608240-15p1vW" style="zoom:50%;"><p><strong>说明</strong>：本实验中使用 88 端口进行判定和转发的，在真实的工作环境中，用户请根据实际情况设置端口信息。</p><h2 id="验证监听"><a href="#验证监听" class="headerlink" title="验证监听"></a>验证监听</h2><h3 id="验证-HTTP-协议监听"><a href="#验证-HTTP-协议监听" class="headerlink" title="验证 HTTP 协议监听"></a>验证 HTTP 协议监听</h3><p>在浏览器中新建一个页面，输入 <strong>实验资源</strong> 提供的 <strong>负载均衡</strong> 的 <strong>IP地址</strong> 。此时，页面提示 <strong>502</strong> 错误。证明 HTTP 协议监听开启，但是无法正常访问网站。（注意不是ECS的地址，而是负载均衡的地址）</p><p><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/b70ad1f01d6d464bb916ff4450c0b7fd/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-b70ad1f01d6d464bb916ff4450c0b7fd-content-image-1484121662108-Dk0Fj1"></p><h3 id="验证-HTTPS-协议监听"><a href="#验证-HTTPS-协议监听" class="headerlink" title="验证 HTTPS 协议监听"></a>验证 HTTPS 协议监听</h3><p>1）在浏览器中，新建页面，并输入 <strong><a href="https://xxx.xxx.xxx.xxx/">https://xxx.xxx.xxx.xxx</a></strong> （其中 <strong>xxx.xxx.xxx.xxx</strong> 为 <strong>实验资源</strong> 提供的 <strong>负载均衡</strong> 的 <strong>IP地址</strong> ）。</p><p><strong>注意</strong>：必须输入 <strong>https:&#x2F;&#x2F;</strong> ，否则会出现访问错误。</p><p><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/b70ad1f01d6d464bb916ff4450c0b7fd/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-b70ad1f01d6d464bb916ff4450c0b7fd-content-image-1484121734284-wgRGxB"></p><h2 id="HTTP请求转化为HTTPS请求"><a href="#HTTP请求转化为HTTPS请求" class="headerlink" title="HTTP请求转化为HTTPS请求"></a>HTTP请求转化为HTTPS请求</h2><p>通过重定向的方式将来自 HTTP 请求转发到 HTTPS。直接修改nginx的配置。</p><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>进入ECS实例1 </p><p>修改 Nginx 配置文件：将所有 88 端口请求，都转发到<strong>负载均衡的 HTTPS 协议的 IP 访问地址</strong>。</p><p>1）输入如下命令，进入 Nginx 配置文件的编辑页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>2）键盘输入 <strong>i</strong> ，进入 <strong>编辑</strong> 模式<strong>。</strong></p><p>3）清空 85 行到 94 行的注释 <strong>#</strong> ，如下图所示：</p><p><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/a3e87aff3bbe499188502fea1f203f3b/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-a3e87aff3bbe499188502fea1f203f3b-content-image-1484122960647-wcDcT0"></p><p>4）修改 <strong>rewrite</strong> 的参数信息，将 <strong>xxx.xxx.xxx.xxx</strong> 替换为 <strong>实验资源</strong> 提供的 <strong>负载均衡</strong> 的 <strong>IP地址</strong> 。</p><p>5）保存并且退出。</p><p>６）重启 Nginx 服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>ECS实例２同样操作。</p><h2 id="证书购买和上传"><a href="#证书购买和上传" class="headerlink" title="证书购买和上传"></a>证书购买和上传</h2><img src="https://edu.aliyun.com/lab/files/courses/a3a8f9e7dc164da69104f3d81fc47aaf/sections/b70ad1f01d6d464bb916ff4450c0b7fd/content/images/course-a3a8f9e7dc164da69104f3d81fc47aaf-section-b70ad1f01d6d464bb916ff4450c0b7fd-content-image-1484121734284-wgRGxB" style="zoom:33%;"><p>因为浏览器会有提示，要解决这个问题，必须购买证书并非上传，请自行百度或者查看原文链接。</p><p>原文:<a href="https://edu.aliyun.com/lab/courses/a3a8f9e7dc164da69104f3d81fc47aaf/detail?purchaseRecordId=null">http和https混合访问</a></p><p>感谢:<a href="https://xiaolincoding.com/network/2_http/http_interview.html#http-%E4%B8%8E-https-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB">小林-图解网络</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡使用初体验</title>
      <link href="/2023/06/17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2023/06/17/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h1><p>  拥有大量用户的企业，经常会面临如下的难题：在高并发的情况下，经常会导致服务器响应速度慢，严重的情况会直接导致服务器停止服务。此时，会导致企业的业务中断，影响客户的正常访问。</p><p>  本实验通过使用阿里云负载均衡SLB以及对负载均衡SLB后端服务器ECS的权重进行修改，可以快速解决上述的问题。</p><p><img src="https://edu.aliyun.com/lab/files/courses/intro/11bc5c2e31a3429082a2b012fe08034d/images/course-11bc5c2e31a3429082a2b012fe08034d-intro-image-1501646995770-ezxsMY"></p><h1 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h1><p>  完成此实验后，可以掌握的能力有：</p><ol><li><p>配置负载均衡SLB的监听规则，并将ECS实例部署到SLB后端；</p></li><li><p>通过设置负载均衡SLB后端服务器ECS的权重值，分配用户访问后端ECS实例的比例。</p></li></ol><h1 id="阿里云负载均衡"><a href="#阿里云负载均衡" class="headerlink" title="阿里云负载均衡"></a>阿里云负载均衡</h1><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>负载均衡服务主要有三个核心概念：</p><p><strong>负载均衡实例</strong> （Server Load Balancer instances）</p><p>一个负载均衡实例是一个运行的负载均衡服务，用来接收流量并将其分配给后端服务器。要使用负载均衡服务，您必须创建一个负载均衡实例，并至少添加一个监听和两台ECS实例。</p><p><strong>监听</strong> （Listeners）</p><p>监听用来检查客户端请求并将请求转发给后端服务器。监听也会对后端服务器进行健康检查。</p><p><strong>后端服务器</strong>（Backend Servers）</p><p>一组接收前端请求的ECS实例。您可以单独添加ECS实例到服务器池，也可以通过虚拟服务器组或主备服务器组来批量添加和管理。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1482739463577-BaRBx3"></p><p>特点:</p><p>1）负载均衡服务通过设置虚拟服务地址（IP），将位于同一地域（Region）的多台云服务器（Elastic Compute Service，简称ECS）资源虚拟成一个高性能、高可用的应用服务池；根据应用指定的方式，将来自客户端的网络请求分发到云服务器池中。</p><p>2）负载均衡服务会检查云服务器池中ECS的健康状态，自动隔离异常状态的ECS，从而解决了单台ECS的<strong>单点问题</strong>，同时提高了应用的整体服务能力。在标准的负载均衡功能之外，负载均衡服务还具备<strong>TCP与HTTP抗DDoS攻击的特性</strong>，增强了应用服务器的防护能力。</p><p>3）负载均衡服务是ECS面向多机方案的一个配套服务，需要同ECS结合使用</p><h3 id="阿里云负载均衡基础架构"><a href="#阿里云负载均衡基础架构" class="headerlink" title="阿里云负载均衡基础架构"></a>阿里云负载均衡基础架构</h3><p>负载均衡采用集群部署，可实现会话同步，以消除服务器单点故障，提升冗余，保证服务的稳定性。</p><p>阿里云当前提供四层（TCP协议和UDP协议）和七层（HTTP和HTTPS协议）的负载均衡服务。</p><ul><li>四层采用开源软件LVS（Linux Virtual Server）+ keepalived的方式实现负载均衡，并根据云计算需求对其进行了个性化定制。</li><li>七层采用Tengine实现负载均衡。Tengine是由淘宝网发起的Web服务器项目，它在Nginx的基础上，针对有大访问量的网站需求，添加了很多高级功能和特性</li></ul><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1541389955758-2RtYaM"></p><p>如下图所示，各个地域的四层负载均衡实际上是由<strong>多台LVS机器部署成一个LVS集群</strong>来运行的。采用集群部署模式极大地保证了异常情况下负载均衡服务的可用性、稳定性与可扩展性。</p><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/8c47d7f310214b3184714b66c75b88d2/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-8c47d7f310214b3184714b66c75b88d2-content-image-1541390115823-zXMyaq"></p><p>LVS集群内的每台LVS都会进行会话，通过组播报文同步到该集群内的其它LVS机器上，从而实现LVS集群内各台机器间的会话同步。如下图所示，当客户端向服务端传输三个数据包后，在LVS1上建立的会话A开始同步到其它LVS机器上。图中实线表示现有的连接，图中虚线表示当LVS1出现故障或进行维护时，这部分流量会走到一台可以正常运行的机器LVS2上。因而负载均衡集群支持<strong>热升级</strong>，并且在机器故障和集群维护时最大程度对用户透明，不影响用户业务。</p><h1 id="实验步奏"><a href="#实验步奏" class="headerlink" title="实验步奏"></a>实验步奏</h1><h2 id="访问两台服务器"><a href="#访问两台服务器" class="headerlink" title="访问两台服务器"></a>访问两台服务器</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617112423356.png" alt="image-20230617112423356"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617112435617.png" alt="image-20230617112435617"></p><h2 id="进入负载均衡界面"><a href="#进入负载均衡界面" class="headerlink" title="进入负载均衡界面"></a>进入负载均衡界面</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230617113400713.png" alt="image-20230617113400713"></p><p>配置监听规则的<strong>基本信息</strong></p><ol><li>在弹出的页面中，选择负载均衡协议为<strong>HTTP</strong>，<strong>监听端口</strong>为 <strong>80</strong>；然后点击<strong>高级配置</strong>右侧的<strong>修改</strong>按钮：</li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683224137-1jr4Xw"></p><ol start="2"><li>在展开的<strong>高级配置</strong>中，查看到默认<strong>会话保持</strong>的状态为<strong>关闭</strong>。不做任何修改，直接点击<strong>下一步；</strong></li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1640683245756-UeojUO"></p><ol start="3"><li>选择<strong>默认服务器</strong>下方的<strong>继续添加</strong>，将两台已创建的ECS实例添加到SLB后端。</li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034113289-nKBF4q"></p><ol start="4"><li>在弹出的页面中勾选两台已创建的ECS实例，并点击<strong>下一步</strong>；</li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034179806-kxeSd9"></p><ol start="5"><li>在弹出的页面点击<strong>添加</strong>；</li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034229137-XGOhp5"></p><ol start="6"><li>选择已添加的ECS实例的端口为 <strong>80</strong>，并点击<strong>下一步</strong>：</li></ol><p><img src="https://edu.aliyun.com/lab/files/courses/11bc5c2e31a3429082a2b012fe08034d/sections/16cb4667b34a44b79846106d231a75f5/content/images/course-11bc5c2e31a3429082a2b012fe08034d-section-16cb4667b34a44b79846106d231a75f5-content-image-1585034414783-3vO2Bi"></p><ol start="7"><li><p>在<strong>健康检查</strong> 配置中，不做任何修改，保持健康检查<strong>开启状态</strong>，点击<strong>下一步</strong>。</p></li><li><p>提交。</p></li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li><strong>验证负载均衡的工作原理；</strong></li><li><strong>验证通过配置不同后端服务器权重，将用户的请求按比例分发到不同后端服务器；</strong></li><li><strong>验证在一台后端服务器开启会话请求时，请求在会话开启的时间内只会分发到这一台服务器</strong></li></ul><p>本文是实验记录，源地址:<a href="https://edu.aliyun.com/lab/courses/11bc5c2e31a3429082a2b012fe08034d/detail?purchaseRecordId=da64b402991240baa6ff1897e66b4a07">负载均衡使用初体验</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习记录</title>
      <link href="/2023/06/16/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/06/16/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h1><h2 id="传统物理服务器的部署的缺点"><a href="#传统物理服务器的部署的缺点" class="headerlink" title="传统物理服务器的部署的缺点"></a>传统物理服务器的部署的缺点</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616095224893.png" alt="image-20230616095224893"></p><h2 id="虚拟机的部署"><a href="#虚拟机的部署" class="headerlink" title="虚拟机的部署"></a>虚拟机的部署</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616095516846.png" alt="image-20230616095516846"></p><p>虚拟机也是有局限性的，每一个虚拟机都是完整的操作系统，要分配系统资源，虚拟机太多的时候，宿主机的本身资源消耗。</p><p>KVM</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616101047380.png" alt="image-20230616101047380"></p><h2 id="了解Docker"><a href="#了解Docker" class="headerlink" title="了解Docker"></a>了解Docker</h2><p>docker是谷歌公司的Golang语言开发而来的，是居于Linux内核的Cgroups,NameSpace等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术</strong>。</p><p>由于隔离的进程独立于宿主机和其他隔离的进程，也称为<strong>容器</strong>。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616102003416.png" alt="image-20230616102003416"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616102212501.png" alt="image-20230616102212501"></p><p>综合上面的图，我们可以得到：</p><ol><li>容器可以提供宿主机的性能，而kvm是分配宿主机的资源，性能弱</li><li>同样配置的宿主机，开启10个虚拟机的资源可以开启100个容器。</li><li>kvm需要开机流程，比较耗时。容器几秒钟就搞定了。</li><li>kvm需要硬件CPU的虚拟化支持，而容器不要。</li></ol><h1 id="Docker的基础组件"><a href="#Docker的基础组件" class="headerlink" title="Docker的基础组件"></a>Docker的基础组件</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616102832901.png" alt="image-20230616102832901"></p><ul><li>image镜像:用来构建容器</li><li>Container,容器(应用程序就是部署在这里)</li><li>镜像仓库(dockerhub)</li></ul><h1 id="Docker平台组成"><a href="#Docker平台组成" class="headerlink" title="Docker平台组成"></a>Docker平台组成</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616103058853.png" alt="image-20230616103058853"></p><h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><p>以Centos 7.9为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备</span></span><br><span class="line"></span><br><span class="line">Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</span><br><span class="line">通过 <span class="built_in">uname</span> -r 命令查看你当前的内核版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum包更新到最新(可选)</span></span><br><span class="line">yum -y update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详细步奏</span></span><br><span class="line"><span class="comment"># 设置yum源(选择一个可用的就行)</span></span><br><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br><span class="line"> </span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#  安装docker(选择稳定版本)</span></span><br><span class="line"><span class="comment"># yum -y install docker-ce-版本号.ce</span></span><br><span class="line"><span class="comment"># yum -y install docker-ce-18.09.6-3.el7 docker-ce-cli-18.09.6-3.el7</span></span><br><span class="line">yum -y install docker-ce-18.09.6-3.el7</span><br><span class="line"></span><br><span class="line"><span class="comment">#  查看docker版本，验证是否成功</span></span><br><span class="line">docker -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步如果出现Peer’s Certificate has expired</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616154920866.png" alt="image-20230616154920866"></p><p>能是系统时间的问题；于是就查询了一下当前系统的时间，用命令<code>date</code>试一下。</p><p>同步时间:<code>yum install -y ntp</code></p><p><code>ntpdate time.apple.com</code></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616160815880.png" alt="image-20230616160815880" style="zoom: 50%;"><h1 id="配置Docker镜像加速器"><a href="#配置Docker镜像加速器" class="headerlink" title="配置Docker镜像加速器"></a>配置Docker镜像加速器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://8jljbmiq.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h2 id="Docker服务相关命令"><a href="#Docker服务相关命令" class="headerlink" title="Docker服务相关命令"></a>Docker服务相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload //重载系统服务</span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span> service //查看全部服务命令</span><br><span class="line">systemctl status docker  // 查看docker服务状态</span><br><span class="line">systemctl <span class="built_in">enable</span> docker //设置docker开机自启动</span><br><span class="line">systemctl <span class="built_in">disable</span> docker // 关闭docker开机启动</span><br><span class="line">systemctl start docker // 启动docker服务</span><br><span class="line">systemctl stop docker // 停止docker服务</span><br><span class="line">systemctl restart docker // 重启docker服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h2><p>镜像的原理</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616190735740.png" alt="image-20230616190735740"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616192716418.png" alt="image-20230616192716418"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616212055132.png" alt="image-20230616212055132"></p><p>总结：</p><ul><li>当一个image启动容器时，docker在该image的最顶层，添加一个读写文件系统作为容器，然后运行该容器</li><li>docker镜像的本质是基于UnionFS管理的分层文件系统。</li><li>docker镜像为什么才几百兆？</li></ul><p>答：因为docker镜像只提供rootfs和其他镜像层，共用宿主机的Linux内核(bootfs),因此很小</p><ul><li>为什么下载docker的nginx镜像133MB？nginx安装包不是才几兆吗？</li></ul><p>答：因为docker的nginx镜像是分层的，但是一个用于运行nginx的镜像文件，依赖于父进程和基础镜像(发行版)。通俗的说：这个是软件，依赖操作系统。</p><ol><li>查看镜像（本地）</li></ol><p><code>docker images</code></p><ol start="2"><li>搜索镜像(远程)</li></ol><p><code>docker serach XXX</code></p><p>例如:<code>docker redis</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616162814793.png" alt="image-20230616162814793"></p><ol start="3"><li>拉取镜像(远程)</li></ol><p><code>docker pull redis:[版本号]</code></p><p>不写版本号，默认是最新的</p><p><a href="https://hub.docker.com/">Docker Hub Container Image Library | App Containerization</a></p><ol start="4"><li>删除镜像(本地)</li></ol><p><code>docker rmi 镜像id</code></p><h2 id="Docker容器相关命令"><a href="#Docker容器相关命令" class="headerlink" title="Docker容器相关命令"></a>Docker容器相关命令</h2><ol><li>创建容器</li></ol><p><code>docker run -it --name=test1 centos:版本</code>i代表持久，t代表有终端，退出就不运行</p><p><code>docker run -id --name=test2 centos:版本</code>退出会运行</p><p><code> docker run -it --name=test1 centos /bin/bash</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616164608316.png" alt="image-20230616164608316"></p><ol start="2"><li><p>退出容器</p><p><code>exit</code></p></li><li><p>查看容器</p></li></ol><p>查看正在运行的容器: <code>docker ps</code></p><p>查看容器信息:<code>docker inspect 容器</code></p><p>查看所有的容器: <code>docker ps -a</code></p><ol start="4"><li>进入容器</li></ol><p><code>docker exec -it test2(名字) /bin/bash</code></p><ol start="5"><li>启动容器</li></ol><p><code>docker start 容器名字</code></p><ol start="6"><li>停止容器</li></ol><p><code>docker stop 容器名字</code></p><ol start="7"><li>删除容器</li></ol><p><code>docker rm 容器名字/容器ID</code></p><h2 id="Docker容器的数据卷"><a href="#Docker容器的数据卷" class="headerlink" title="Docker容器的数据卷"></a>Docker容器的数据卷</h2><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>是宿主机的一个目录或者文件</p><p>当容器目录和数据卷目录绑定之后，对方的修改会立即同步。</p><p>一个数据卷可以被多个容器目录绑定。一个容器也可以绑定多个数据卷。</p><p>所以得出数据卷的作用：</p><ul><li>容器数据的持久保存</li><li>外部机器和容器的间接通信</li><li>容器之间的数据交换</li></ul><h3 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h3><p>只需要在创建容器的时候，加入参数<code>-v  宿主机目录:容器目录</code></p><p><code>docker run -v</code></p><p>目录必须是绝对路径</p><p>如果目录不在，会自动创建</p><p>例子:<code>docker run -it --name=c1 -v /root/daokun:/daokun centos bash</code></p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多容器进行数据交换：</p><ul><li>多个容器挂载同一个数据卷</li><li>数据卷容器(专门存放数据的容器)</li></ul><ol><li>创建启动C3数据卷容器，使用-v 参数</li></ol><p>命令：<code>docker run -it --name=c3 -v /volume centos:7 /bin/bash</code></p><ol start="2"><li>创建启动c1,c2容器，使用<code>--volumes-from  参数</code>设置</li></ol><p><code>docker run -it --name=c1 --volumes-from c3 centos:7 /bin/bash</code></p><p><code>docker run -it --name=c2 --volumes-from c3 centos:7 /bin/bash</code>  </p><p>查看容器信息:<code>docker inspect 容器名字</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616195658761.png" alt="image-20230616195658761"></p><h1 id="docker应用部署"><a href="#docker应用部署" class="headerlink" title="docker应用部署"></a>docker应用部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><p>需求；在docker部署MySQL,并且通过外部MySQL客户端操作MySQL sever</p><p>实现步奏：</p><ul><li>搜索MySQL镜像</li><li>拉取MySQL镜像</li><li>创建容器</li><li>操作容器中的MySQL</li></ul><p>外部机器不能和容器直接通信，但是外部机器可以和宿主机通信。</p><p>用容器端口映射到宿主机。</p><p>具体实现:</p><ul><li>搜索镜像:<code>docker search mysql</code></li><li>拉取镜像:<code>docker pull mysql:5.6</code></li><li>创建容器，设置端口映射，目录映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/root下创建MySQL目录用于存储MySQL的数据信息</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/mysql</span><br><span class="line"><span class="built_in">cd</span> ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=test_mysql \</span><br><span class="line">-v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \</span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \</span><br><span class="line">-v <span class="variable">$PWD</span>/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=12345 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><p>说明:</p><p><code>-p 3307:3306</code>:将容器的3306映射到宿主机3307</p><p><code>--name=test_mysql</code>:设置名字</p><p><code>-v $PWD/conf:/etc/mysql/conf.d </code>:挂载配置目录</p><p><code>-v $PWD/logs:/logs</code>主机当前目录下的logs目录挂载到容器的logs</p><p><code>-v $PWD/data:/var/lib/mysql </code>:将数据目录挂载到容器</p><p>进入mysql容器:<code>docker exec -it test_mysql /bin/bash</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616204214494.png" alt="image-20230616204214494"></p><p>登录mysql:<code>mysql -uroot -p123456</code>(安全期间，到p就回车)</p><h2 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h2><ol><li>搜索镜像</li></ol><p><code>docker search tomcat</code></p><ol start="2"><li>拉取tomcat镜像</li></ol><p><code>docker pull tomcat</code></p><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><p><code>mkdir ~/tomcat</code></p><p><code>cd ~/tomcat</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name=test_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v <span class="variable">$PWD</span>:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><p>在浏览器输入我的宿主机IP地址</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616210339854.png" alt="image-20230616210339854"></p><p>加上8080端口</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616210422057.png" alt="image-20230616210422057"></p><p>创建test目录，创建index.html文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;h1&gt;</span>hello daokun !&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616211216969.png" alt="image-20230616211216969"></p><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><ol><li>搜索Nginx镜像</li></ol><p><code>docker search Nginx</code></p><ol start="2"><li>拉取redis镜像</li></ol><p><code>docker pull Nginx</code></p><ol start="3"><li>创建挂载目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建挂载目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/nginx/conf</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/nginx/log</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/nginx/html</span><br></pre></td></tr></table></figure><p> 创建，并且把文件复制过来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成容器</span></span><br><span class="line">docker run --name nginx -p 9001:80 -d nginx</span><br><span class="line"><span class="comment"># 将容器nginx.conf文件复制到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf ~/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 将容器conf.d文件夹下内容复制到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d ~/nginx/conf/conf.d</span><br><span class="line"><span class="comment"># 将容器中的html文件夹复制到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html ~/nginx/</span><br></pre></td></tr></table></figure><ol start="4"><li>删除刚才的容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接执行docker rm nginx或者以容器id方式关闭容器</span></span><br><span class="line"><span class="comment"># 找到nginx对应的容器id</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 关闭该容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"><span class="comment"># 删除该容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除正在运行的nginx容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f nginx</span><br></pre></td></tr></table></figure><ol start="5"><li>重新创建，然后设置端口映射</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name=test_nginx \</span><br><span class="line">-p 9001:80 \</span><br><span class="line">-v ~/nginx/conf/conf.d:/etc/nginx/nginx.conf.d \</span><br><span class="line">-v ~/nginx/log:/var/log/nginx \</span><br><span class="line">-v ~/nginx/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616215201113.png" alt="image-20230616215201113"></p><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><ol><li>搜索redis镜像</li></ol><p><code>docker search redis</code></p><ol start="2"><li>拉取redis镜像</li></ol><p><code>docker pull redis:5.0</code></p><ol start="3"><li>创建容器，设置端口映射</li></ol><p><code>docker run -id --name=test_redis -p 6379:6379 redis:5.0</code></p><ol start="4"><li>使用外部机器连接redis</li></ol><p><code>./redis-cli.exe -h 192.168.31.87 -p 6369</code></p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><ol><li>容器转换为镜像</li></ol><p><code>docker commit 容器id 镜像名称:版本号</code></p><p>镜像再转换成压缩文件:<code>docker save -o 压缩文件名称 镜像名称:版本号</code></p><p>解压:<code>docker load -i 压缩文件名称</code></p><ol start="2"><li>dockerfile</li></ol><h2 id="Dockerfile的概念"><a href="#Dockerfile的概念" class="headerlink" title="Dockerfile的概念"></a>Dockerfile的概念</h2><ul><li>是一个文本文件</li><li>包含一条条指令</li><li>每一条指令构建一层，基于基础镜像</li></ul><p>镜像是多层存储的，每一层都在前一层的基础进行修改。</p><p>dockerfile的主要组成部分:</p><blockquote><p>基础镜像信息 FROM centsos:7.9</p><p>制作镜像操作指令RUN yum install openssh-server -y</p><p>容器启动时执行命令CMD [“&#x2F;bin&#x2F;bash”]</p></blockquote><h3 id="dockerfile指令"><a href="#dockerfile指令" class="headerlink" title="dockerfile指令"></a>dockerfile指令</h3><blockquote><p>FROM这个镜像的妈妈是谁？（指定基础镜像）</p><p>MAINTAINER 告诉别人，谁负责养它（维护者信息，可以没有）</p><p>RUN 你想让它干嘛（命令前面加RUN就行）</p><p>ADD 给他一点创业资金(添加宿主机的文件到文件内，会自动解压)</p><p>COPY 和ADD一样，但是不会自动解压</p><p>WORKDIR 我是cd（设置当前工作目录）</p><p>VOLUME给它一个存放行李的地方</p><p>EXPOSE 它要打开的门是啥(指定对外端口)</p><p>CMD 奔跑吧，兄弟！(指定容器启动后要干的事情)</p></blockquote><h3 id="dockerfile实践1"><a href="#dockerfile实践1" class="headerlink" title="dockerfile实践1"></a>dockerfile实践1</h3><p>需求:通过dockefile,构建nginx镜像，且运行容器后，生成的页面是”道坤刚入门docker”</p><ol><li>创建Dockerfile文件，注意文件名，必须是这个</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;&lt;meta charset=utf8&gt;道坤入门Docker&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><ol start="2"><li><p>当前目录执行<code>docker build .</code></p></li><li><p>查看镜像:<code>docker images</code></p></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616231312299.png" alt="image-20230616231312299"></p><p>可以看到tag这一类都是空的。</p><p>我们可以进行修改<code>docker tag  容器id 容器tag</code></p><p>实例:<code>docker tag  011c7be2ab my-nginx</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616231649399.png" alt="image-20230616231649399"></p><ol start="4"><li>运行镜像</li></ol><ul><li>先查看有没有端口占用<code>netstat -tunlp</code></li></ul><p><code>docker run -d -p 9003:80 my-nginx</code></p><p>(9003是宿主机的端口)</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616231819387.png" alt="image-20230616231819387"></p><p>正确运行会返回一个id</p><p>最终结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230616232116715.png" alt="image-20230616232116715"></p><p>感谢:</p><ul><li><p><a href="https://www.bilibili.com/video/BV1nR4y127bT?p=25&vd_source=197cd9faf9dfebb5668cf8cff4737d21">Docker学习1</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1CJ411T7BK/?p=20&spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=197cd9faf9dfebb5668cf8cff4737d21">黑马程序员_Docker</a></p></li><li><p><a href="https://www.bookstack.cn/">书栈网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程案例</title>
      <link href="/2023/06/15/Shell%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/06/15/Shell%E7%BC%96%E7%A8%8B%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h1><p>主要讨论一下Shell编程的基本数值运算，包括:</p><ul><li>数值（包括整数和浮点数）间的加、减、乘、除、求幂、求模等</li><li>产生指定范围的随机数</li><li>产生指定范围的数列</li></ul><p>Shell 本身可以做整数运算，复杂一些的运算要通过外部命令实现，比如 <code>expr</code>，<code>bc</code>，<code>awk</code> 等。另外，可通过 <code>RANDOM</code> 环境变量产生一个从 0 到 32767 的随机数，一些外部工具，比如 <code>awk</code> 可以通过 <code>rand()</code> 函数产生随机数。而 <code>seq</code> 命令可以用来产生一个数列。</p><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><ol><li>对一个数+1</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自加,效率最高</span></span><br><span class="line">i=0</span><br><span class="line">((i++))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用let，其次</span></span><br><span class="line"><span class="built_in">let</span> i++</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用expr(注意要空格分开，乘法运算要转义)</span></span><br><span class="line"><span class="built_in">expr</span> <span class="variable">$i</span> + 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#awk</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span> 1 | awk <span class="string">&#x27;&#123;printf $1+$2&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>从1加到某个数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=0;</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt 10000 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure><p><code>(())</code> 的运算效率最高。而 <code>let</code> 作为 Shell 内置命令，效率也很高，但是 <code>expr</code>，<code>bc</code>，<code>awk</code> 的计算效率就比较低。</p><ol start="3"><li>求模</li></ol><p><code>let</code>，<code>expr</code>，<code>bc</code> 都可以用来求模，运算符都是 <code>%</code>，而 <code>let</code> 和 <code>bc</code> 可以用来求幂，运算符不一样，前者是 <code>**</code>，后者是 <code>^</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> 5 % 2</span><br><span class="line"><span class="comment">#ans: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> i=5%2</span><br><span class="line"><span class="comment">#ans:1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 5 %2 | bc</span><br><span class="line"><span class="comment">#ans: 1</span></span><br><span class="line"></span><br><span class="line">((i=<span class="number">5</span>%<span class="number">2</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="comment">#ans:1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>求幂</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> i=5**2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">((i=<span class="number">5</span>**<span class="number">2</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;5^2&quot;</span> | bc</span><br><span class="line"></span><br><span class="line"><span class="comment">#ans:25</span></span><br></pre></td></tr></table></figure><ol start="5"><li>进制转换</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 八进制的11转换成十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash内置</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">8#11</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用bc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;obase=10;ibase=8;11&quot;</span></span><br></pre></td></tr></table></figure><h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2><ol start="6"><li>求 1 除以 13，保留 3 位有效数字</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=3;1/13&quot;</span> | bc</span><br><span class="line"><span class="comment">#bc 在进行浮点运算时需指定精度，否则默认为 0，即进行浮点运算时，默认结果只保留整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ans:.076</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1 13&quot;</span> | awk <span class="string">&#x27;&#123;printf(&quot;%0.3f\n&quot;,$1/$2)&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ans:0.077</span></span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><ol start="7"><li>有一组数据，求人均收入最高的家庭</li></ol><p>在这里随机产生了一组测试数据，文件名为 <code>income.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 3 4490</span><br><span class="line">2 5 3896</span><br><span class="line">3 4 3112</span><br><span class="line">4 4 4716</span><br><span class="line">5 4 4578</span><br><span class="line">6 6 5399</span><br><span class="line">7 3 5089</span><br><span class="line">8 6 3029</span><br><span class="line">9 4 6195</span><br><span class="line">10 5 5145</span><br></pre></td></tr></table></figure><p>说明：上面的三列数据分别是家庭编号、家庭人数、家庭月总收入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">[ <span class="variable">$#</span> -lt 1 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;请输入收入文件&quot;</span> &amp;&amp; <span class="built_in">exit</span> -1</span><br><span class="line"><span class="comment"># $#是Shell中传入的个数</span></span><br><span class="line"></span><br><span class="line">[ ! -f <span class="variable">$1</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>不是一个文件&quot;</span> &amp;&amp; <span class="built_in">exit</span> -1</span><br><span class="line"></span><br><span class="line">income=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      printf(&quot;%d %0.2f\n&quot;,$1,$3/$2);</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span> <span class="variable">$income</span> | <span class="built_in">sort</span> -k 2 -n -r</span><br><span class="line"><span class="comment"># 保留两位小数，-k 2是awk结果的第二列，-n是按照数字排序，-r是递减顺序</span></span><br></pre></td></tr></table></figure><ol start="8"><li>随机数</li></ol><p>环境变量 <code>RANDOM</code> 产生从 0 到 32767 的随机数，而 <code>awk</code> 的 <code>rand()</code> 函数可以产生 0 到 1 之间的随机数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> | awk <span class="string">&#x27;&#123;srand();printf(&quot;%f&quot;,rand());&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>随机生成0-255之间的数字</p><p>可以通过 <code>RANDOM</code> 变量的缩放和 <code>awk</code> 中 <code>rand()</code> 的放大来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span> / 128</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> | awk <span class="string">&#x27;&#123;srand();printf(&quot;%f&quot;,rand()*255);&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="文件系统的操作"><a href="#文件系统的操作" class="headerlink" title="文件系统的操作"></a>文件系统的操作</h1><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/Linux_FileSystem_Architecture.jpg"></p><h2 id="硬件管理和设备驱动"><a href="#硬件管理和设备驱动" class="headerlink" title="硬件管理和设备驱动"></a>硬件管理和设备驱动</h2><p>Linux 系统通过设备驱动管理硬件设备。如果添加了新的硬件设备，那么需要编写相应的硬件驱动来管理它。对于一些常见的硬件设备，系统已经自带了相应的驱动，编译内核时，选中它们，然后编译成内核的一部分或者以模块的方式编译。如果以模块的方式编译，那么可以在系统的 <code>/lib/modules/$(uname -r)</code>目录下找到对应的模块文件。</p><h3 id="查找驱动文件"><a href="#查找驱动文件" class="headerlink" title="查找驱动文件"></a>查找驱动文件</h3><p>更新文件索引数据库:<code>updatedb</code></p><p>查找scsi相关驱动:<code>locate scsi*.ko</code></p><p>查找usb相关驱动:<code>locate usb*.ko</code></p><p>查看内核中已加载的各个模块的状态:</p><p><code>lsmod</code>或者<code>cat /proc/modules</code></p><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><p><code>insmod 模块</code> </p><h3 id="卸载驱动"><a href="#卸载驱动" class="headerlink" title="卸载驱动"></a>卸载驱动</h3><p><code>rmmod 模块</code></p><h1 id="Linux下的网络”实战”"><a href="#Linux下的网络”实战”" class="headerlink" title="Linux下的网络”实战”"></a>Linux下的网络”实战”</h1><h2 id="通过dhclient获取IP地址"><a href="#通过dhclient获取IP地址" class="headerlink" title="通过dhclient获取IP地址"></a>通过dhclient获取IP地址</h2><p>如果所在的局域网有DHCP服务器，可用使用dhclient,<code>N</code>是设备名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dhclient ethN</span><br><span class="line"><span class="comment"># 我的centos 7.9是ens33</span></span><br></pre></td></tr></table></figure><h2 id="静态配置IP"><a href="#静态配置IP" class="headerlink" title="静态配置IP"></a>静态配置IP</h2><p><code>ip_address</code> 是本地主机的 <code>IP</code> 地址，<code>gw_ip_address</code> 是接入网络的网关的 <code>IP</code> 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 192.168.31.87 on</span><br><span class="line">route add default gw 192.168.31.1</span><br></pre></td></tr></table></figure><p>如果上面不工作，记得通过 <code>ifconfig/mii-tool/ethtool</code> 等工具检查网卡是否有被驱动起来，然后通过 <code>lspci/dmesg</code> 等检查网卡类型（或者通过主板手册和独立网卡自带的手册查看），接着安装或者编译相关驱动，最后把驱动通过 <code>insmod/modprobe</code> 等工具加载到内核中</p><h2 id="用-Linux-搭建网桥"><a href="#用-Linux-搭建网桥" class="headerlink" title="用 Linux 搭建网桥"></a>用 Linux 搭建网桥</h2><p>网桥工作在 <code>OSI</code> 模型的第二层，即数据链路层，它只需要知道目标主机的 <code>MAC</code> 地址就可以工作。 Linux 内核在 <code>2.2</code> 开始就已经支持了这个功能，具体怎么配置看看后续<a href="http://www.ibm.com/developerworks/cn/linux/kernel/l-netbr/index.html">参考资料</a>吧。如果要把 Linux 主机配置成一个网桥，至少需要两个网卡。</p><p>网桥的作用相当于一根网线，用户无须关心里头有什么东西，把它的两个网口连接到两个主机上就可以让这两个主机支持相互通信。不过它比网线更厉害，如果配上防火墙，就可以隔离连接在它两端的网段（注意这里是网络，因为它不识别 <code>IP</code>），另外，如果这个网桥有多个网口，那么可以实现一个功能复杂的交换机，而如果有效组合多个网桥，则有可能实现一个复杂的可实现流量控制和负载平衡的防火墙系统。</p><h2 id="用-Linux-做路由"><a href="#用-Linux-做路由" class="headerlink" title="用 Linux 做路由"></a>用 Linux 做路由</h2><p>路由工作在 <code>OSI</code> 模型的第三层，即网络层，通过 <code>router</code> 可以配置 Linux 的路由，当然，Linux 下也有很多工具支持动态路由的。相关的资料在网路中铺天盖地，由于时间关系，这里不做介绍。</p><h2 id="用-Linux-搭建各种常规的网络服务"><a href="#用-Linux-搭建各种常规的网络服务" class="headerlink" title="用 Linux 搭建各种常规的网络服务"></a>用 Linux 搭建各种常规的网络服务</h2><p>需要什么网络服务呢？</p><ul><li>给局域网弄个 <code>DHCP</code> 服务器，那就弄个 <code>dhcpd</code>，看看<a href="http://tldp.org/HOWTO/DHCP/">参考资料</a>；</li><li>如果想弄个邮件发送服务器，那就安装个 <code>sendmail</code> 或者 <code>exim4</code> ；</li><li>如果再想弄个邮件列表服务器呢，那就装个 <code>mailman</code> ；</li><li>如果想弄个接收邮件的服务器呢，那就安装个 <code>pop3</code> 服务器；</li><li>如果想弄个 <code>web</code> 站点，那就弄个 <code>apache</code> 或者 <code>nginx</code> 服务器；</li><li>如果想弄上防火墙服务，那么通过 <code>iptables</code> 工具配置 <code>netfilter</code> 就可以</li></ul><h2 id="Linux-下网络问题诊断与维护"><a href="#Linux-下网络问题诊断与维护" class="headerlink" title="Linux 下网络问题诊断与维护"></a>Linux 下网络问题诊断与维护</h2><p>如果出现网络问题，不要惊慌，逐步检查网络的各个层次：物理链接、链路层、网络层直到应用层，熟悉使用各种如下的工具，包括 <code>ethereal/tcpdump</code>，<code>hping</code>，<code>nmap</code>，<code>netstat</code>，<code>netpipe</code>，<code>netperf</code>，<code>vnstat</code>，<code>ntop</code> 等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择优质CF的反代,上网速度飞起!</title>
      <link href="/2023/06/09/%E9%80%89%E6%8B%A9%E4%BC%98%E8%B4%A8CF%E7%9A%84%E5%8F%8D%E4%BB%A3-%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E8%B5%B7/"/>
      <url>/2023/06/09/%E9%80%89%E6%8B%A9%E4%BC%98%E8%B4%A8CF%E7%9A%84%E5%8F%8D%E4%BB%A3-%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>1.获取优质的反代了CloudFlare的ip，可以让你拥有Pro版的待遇，专线速度！</p><p>【<a href="https://github.com/ip-scanner/cloudflare">点击获取</a>】</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609194926009.png" alt="image-20230609194926009"></p><p>下载并解压</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609194903744.png" alt="image-20230609194903744"></p><p>在地址栏输入<code>cmd</code></p><p><code>type *.txt &gt;&gt; out.txt</code>把所有的txt合并到一起</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609195124294.png" alt="image-20230609195124294"></p><p>2.下载CF反代ip的优选工具，开源于Github</p><p>【<a href="https://github.com/XIU2/CloudflareSpeedTest">点击下载</a>】</p><p>对合并的ip进行精选，因为很多都是不可用的。</p><p>把刚才out.txt的内容复制到ip.txt.</p><p>cmd运行这个程序<code>\CloudflareST.exe</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609195632309.png" alt="image-20230609195632309"></p><p>出现错误，说明这个地址合并出错的，去修改一下或者删除</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609195802828.png" alt="image-20230609195802828"></p><p>继续运行</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609195929189.png" alt="image-20230609195929189"></p><p>3.注册一个免费的域名，如果你自己有域名可以跳过</p><p>【<a href="https://www.freenom.com/zh/index.html?lang=zh">免费域名</a>】</p><p>4.安装XUI面板，开源于Github【<a href="https://github.com/vaxilu/x-ui">开源项目</a>】</p><p>一键安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><p>注意：安装之前最好把防火墙给先关闭了，否则安装后打不开，关闭命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署微软New Bing AI 聊天机器人!无需翻墙,国内轻松自如使用</title>
      <link href="/2023/06/09/%E9%83%A8%E7%BD%B2%E5%BE%AE%E8%BD%AFNew%20Bing%20AI%20%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA!%E6%97%A0%E9%9C%80%E7%BF%BB%E5%A2%99,%E5%9B%BD%E5%86%85%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%A6%82%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/06/09/%E9%83%A8%E7%BD%B2%E5%BE%AE%E8%BD%AFNew%20Bing%20AI%20%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA!%E6%97%A0%E9%9C%80%E7%BF%BB%E5%A2%99,%E5%9B%BD%E5%86%85%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%A6%82%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>建议使用在线搭建，更加的方便。</p><p>我的new bing :</p><table><thead><tr><th>replit</th><th align="center">[daokunn.eu.org](<a href="https://newbinggogo-web.exhausr.repl.co/web/NewBingGoGo.html">NewBingGoGo:聊天啦啦啦啦 (exhausr.repl.co)</a>)</th></tr></thead><tbody><tr><td>Railway</td><td align="center"><a href="ai.fun.com">ai.daokunn.fun</a></td></tr></tbody></table><h1 id="在线搭建"><a href="#在线搭建" class="headerlink" title="在线搭建"></a>在线搭建</h1><h2 id="replit搭建"><a href="#replit搭建" class="headerlink" title="replit搭建"></a>replit搭建</h2><p>利用免费服务器容器+免费域名，搭建一款在线的New bing gpt4.0的智能机器人，搭建方法非常简单，无需chatgpt账号，无需梯子，没有任何使用限制！</p><p>思路如下:</p><p>创建机器人 :用replit项目创建机器人</p><p>监视机器人:这个机器人搭建成功之后，如果5分钟没有访问的，就会“销户”，所以我们需要一个“监视”。</p><p>添加域名: 虽然可以永久运行，但是国内是无法访问的，所以我们要域名。申请一个免费的域名，然后用cloudflare免费加速</p><h3 id="创建机器人"><a href="#创建机器人" class="headerlink" title="创建机器人"></a>创建机器人</h3><p>先注册账号: <a href="https://replit.com/">replit</a></p><p>项目代码: <a href="https://replit.com/@jianjianai/NewBingGoGo-Web">NewBingGoGo-Web - Replit</a></p><ol><li>点击项目代码右上角的 <code>Fork</code></li></ol><p>​       耐心等待</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609161544801.png" alt="image-20230609161544801"></p><ol start="2"><li>完事之后，进入一个界面，点击<code>run</code></li></ol><p>​      等待5-10分钟</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609161740488.png" alt="image-20230609161740488"></p><ol start="3"><li>会在右上角生成一个网址，复制并访问</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609162206261.png" alt="image-20230609162206261"></p><p><a href="https://newbinggogo-web.exhausr.repl.co/">https://newbinggogo-web.exhausr.repl.co</a></p><h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><ol start="4"><li>进行”监视”</li></ol><p>​      先去<a href="https://uptimerobot.com/">监视网站</a>注册账号。</p><p>​      邮箱验证成功后，点击我的设置，修改时区</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609163319239.png" alt="image-20230609163319239"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609163519977.png" alt="image-20230609163519977"></p><ol start="5"><li>在左上角<code>添加新监视器</code></li></ol><p>​      按照下图填入</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609163859236.png" alt="image-20230609163859236"></p><p>查看所有活动是否如下图，有的需要等个两三分钟，注意耐心。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609164647853.png" alt="image-20230609164647853"></p><p>弄好之后，机器人就会永久的监视。</p><h3 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h3><ol start="6"><li>注册eu.org账号</li></ol><p>永久免费域名申请：<a href="https://nic.eu.org/">https://nic.eu.org</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609165143104.png" alt="image-20230609165143104"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609165236389.png" alt="image-20230609165236389"></p><p>DNS域名：<br>dempsey.dnspod.net<br>edmund.dnspod.net</p><p>域名没问题是这样的</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609165321909.png" alt="image-20230609165321909"></p><p>报错自己去换域名，成功之后，需要等5-20天的审核。</p><p>未完待续<a href="https://www.youtube.com/watch?v=sDntYnFl7BU">https://www.youtube.com/watch?v=sDntYnFl7BU</a></p><p>所有工具</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">免费服务器：https://replit.com/</span><br><span class="line"></span><br><span class="line">源码地址：https://replit.com/@jianjianai/NewBingGoGo-Web</span><br><span class="line"></span><br><span class="line">监视网站：https://uptimerobot.com/</span><br><span class="line"></span><br><span class="line">永久免费域名申请：https://nic.eu.org</span><br><span class="line"></span><br><span class="line">DNS域名：</span><br><span class="line">dempsey.dnspod.net</span><br><span class="line">edmund.dnspod.net</span><br><span class="line"></span><br><span class="line">地址生成器：https://www.meiguodizhi.com/</span><br><span class="line"></span><br><span class="line">解析网站：https://www.cloudflare.com/</span><br></pre></td></tr></table></figure><h2 id="Railway"><a href="#Railway" class="headerlink" title="Railway"></a>Railway</h2><p>这个一个月不能超过500个小时。</p><p>一键部署，点这里 &#x3D;&gt; <a href="https://railway.app/template/uIckWS?referralCode=BBs747"><img src="https://camo.githubusercontent.com/081df3dd8cff37aab35044727b02b94a8e948052487a8c6253e190f5940d776d/68747470733a2f2f7261696c7761792e6170702f627574746f6e2e737667" alt="Deploy on Railway"></a></p><p>路径：docker&#x2F;Dockerfile</p><p>端口：8080</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609175931092.png" alt="image-20230609175931092"></p><p>我的地址<a href="https://go-proxy-bingai-production-3757.up.railway.app/web/#/">https://go-proxy-bingai-production-3757.up.railway.app/web/#/</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609180838838.png" alt="image-20230609180838838"></p><p>设置自定义域名可用在国内访问，我的是<a href="ai.daokunn.fun">ai.daokunn.fun</a></p><h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>GitHub 免费开源项目：</p><h2 id="go-proxy-bing"><a href="#go-proxy-bing" class="headerlink" title="go-proxy-bing"></a>go-proxy-bing</h2><p>这款开源程序是基于微软 New Bing 用 Vue3 和 Go 定制的微软 New Bing 演示站点，拥有一致的 UI 体验，支持 ChatGPT 提示词，无需翻墙，国内可用，不再重定向 CN ！兼容微软 Bing AI 几乎所有功能，无需登录即可畅聊。</p><p>A.本地部署方式：</p><p><strong>1.下载 开源项目：go-proxy-bing 【<a href="https://github.com/adams549659584/go-proxy-bingai/releases/tag/v1.8.7">点击下载</a>】- 【注意：部分杀毒软件会误报，建议使用后面的方法进行安装】</strong></p><p><strong>2.Cloudflare 免费部署聊天服务器</strong></p><ul><li><a href="https://dash.cloudflare.com/sign-up">注册 Cloudflare 账号</a></li><li>核心代码 <a href="https://github.com/adams549659584/go-proxy-bingai/blob/master/cloudflare/worker.js">worker.js</a></li><li>创建 Worker 服务，复制 <a href="https://github.com/adams549659584/go-proxy-bingai/blob/master/cloudflare/worker.js">worker.js</a> 全部代码，粘贴至创建的服务中，保存并部署。</li><li>触发器 中自定义访问域名或者使用默认的</li></ul><p>具体步奏如下</p><p>选择<code>Workers和Pages</code> —&gt; <code>概述</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609172444793.png" alt="image-20230609172444793"></p><p>选择<code>创建应用程序</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609172713061.png" alt="image-20230609172713061"></p><p>名称随意，点击部署</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609173014626.png" alt="image-20230609173014626"></p><p>点击编辑代码</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609173038840.png" alt="image-20230609173038840"></p><p>删除所有代码，填充以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SYDNEY_ORIGIN</span> = <span class="string">&#x27;https://sydney.bing.com&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KEEP_REQ_HEADERS</span> = [</span><br><span class="line">  <span class="string">&#x27;accept&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;accept-encoding&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;accept-language&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;connection&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cookie&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;upgrade&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-websocket-extensions&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-websocket-key&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sec-websocket-version&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;x-request-id&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;content-length&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;content-type&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;access-control-request-headers&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;access-control-request-method&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IP_RANGE</span> = [</span><br><span class="line">  [<span class="string">&#x27;3.2.50.0&#x27;</span>, <span class="string">&#x27;3.5.31.255&#x27;</span>], <span class="comment">//192,000</span></span><br><span class="line">  [<span class="string">&#x27;3.12.0.0&#x27;</span>, <span class="string">&#x27;3.23.255.255&#x27;</span>], <span class="comment">//786,432</span></span><br><span class="line">  [<span class="string">&#x27;3.30.0.0&#x27;</span>, <span class="string">&#x27;3.33.34.255&#x27;</span>], <span class="comment">//205,568</span></span><br><span class="line">  [<span class="string">&#x27;3.40.0.0&#x27;</span>, <span class="string">&#x27;3.63.255.255&#x27;</span>], <span class="comment">//1,572,864</span></span><br><span class="line">  [<span class="string">&#x27;3.80.0.0&#x27;</span>, <span class="string">&#x27;3.95.255.255&#x27;</span>], <span class="comment">//1,048,576</span></span><br><span class="line">  [<span class="string">&#x27;3.100.0.0&#x27;</span>, <span class="string">&#x27;3.103.255.255&#x27;</span>], <span class="comment">//262,144</span></span><br><span class="line">  [<span class="string">&#x27;3.116.0.0&#x27;</span>, <span class="string">&#x27;3.119.255.255&#x27;</span>], <span class="comment">//262,144</span></span><br><span class="line">  [<span class="string">&#x27;3.128.0.0&#x27;</span>, <span class="string">&#x27;3.247.255.255&#x27;</span>], <span class="comment">//7,864,320</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机整数 [min,max)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">min</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">max</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getRandomInt</span> = (<span class="params">min, max</span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ip 转 int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ip</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ipToInt</span> = (<span class="params">ip</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ipArr = ip.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  result += +ipArr[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">  result += +ipArr[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">  result += +ipArr[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  result += +ipArr[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int 转 ip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">intIP</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">intToIp</span> = (<span class="params">intIP</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;(intIP &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>&#125;</span>.<span class="subst">$&#123;(intIP &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>&#125;</span>.<span class="subst">$&#123;(intIP &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>&#125;</span>.<span class="subst">$&#123;intIP &amp; <span class="number">255</span>&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getRandomIP</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> randIndex = <span class="title function_">getRandomInt</span>(<span class="number">0</span>, <span class="variable constant_">IP_RANGE</span>.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">const</span> startIp = <span class="variable constant_">IP_RANGE</span>[randIndex][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> endIp = <span class="variable constant_">IP_RANGE</span>[randIndex][<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> startIPInt = <span class="title function_">ipToInt</span>(startIp);</span><br><span class="line">  <span class="keyword">const</span> endIPInt = <span class="title function_">ipToInt</span>(endIp);</span><br><span class="line">  <span class="keyword">const</span> randomInt = <span class="title function_">getRandomInt</span>(startIPInt, endIPInt);</span><br><span class="line">  <span class="keyword">const</span> randomIP = <span class="title function_">intToIp</span>(randomInt);</span><br><span class="line">  <span class="keyword">return</span> randomIP;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * home</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">pathname</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">home</span> = <span class="keyword">async</span> (<span class="params">pathname</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> baseUrl = <span class="string">&#x27;https://raw.githubusercontent.com/adams549659584/go-proxy-bingai/master/&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> url;</span><br><span class="line">  <span class="comment">// if (pathname.startsWith(&#x27;/github/&#x27;)) &#123;</span></span><br><span class="line">  <span class="keyword">if</span> (pathname.<span class="title function_">indexOf</span>(<span class="string">&#x27;/github/&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">    url = pathname.<span class="title function_">replace</span>(<span class="string">&#x27;/github/&#x27;</span>, baseUrl);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url = baseUrl + <span class="string">&#x27;cloudflare/index.html&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">const</span> newRes = <span class="keyword">new</span> <span class="title class_">Response</span>(res.<span class="property">body</span>, res);</span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    newRes.<span class="property">headers</span>.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy&#x27;</span>);</span><br><span class="line">    newRes.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newRes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * fetch</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Request</span>&#125; <span class="variable">request</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">env</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">ctx</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request, env, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="comment">// if (currentUrl.pathname === &#x27;/&#x27; || currentUrl.pathname.startsWith(&#x27;/github/&#x27;)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (currentUrl.<span class="property">pathname</span> === <span class="string">&#x27;/&#x27;</span> || currentUrl.<span class="property">pathname</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/github/&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">home</span>(currentUrl.<span class="property">pathname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> targetUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable constant_">SYDNEY_ORIGIN</span> + currentUrl.<span class="property">pathname</span> + currentUrl.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line">    request.<span class="property">headers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(`old : $&#123;key&#125; : $&#123;value&#125;`);</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">KEEP_REQ_HEADERS</span>.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">        newHeaders.<span class="title function_">set</span>(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;host&#x27;</span>, targetUrl.<span class="property">host</span>);</span><br><span class="line">    newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;origin&#x27;</span>, targetUrl.<span class="property">origin</span>);</span><br><span class="line">    newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;referer&#x27;</span>, <span class="string">&#x27;https://www.bing.com/search?q=Bing+AI&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> randIP = <span class="title function_">getRandomIP</span>();</span><br><span class="line">    <span class="comment">// console.log(&#x27;randIP : &#x27;, randIP);</span></span><br><span class="line">    newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;X-Forwarded-For&#x27;</span>, randIP);</span><br><span class="line">    <span class="keyword">const</span> oldUA = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;user-agent&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> isMobile = oldUA.<span class="title function_">includes</span>(<span class="string">&#x27;Mobile&#x27;</span>) || oldUA.<span class="title function_">includes</span>(<span class="string">&#x27;Android&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">      newHeaders.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 15_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.7 Mobile/15E148 Safari/605.1.15 BingSapphire/1.0.410427012&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;user-agent&#x27;</span>, <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// newHeaders.forEach((value, key) =&gt; console.log(`$&#123;key&#125; : $&#123;value&#125;`));</span></span><br><span class="line">    <span class="keyword">const</span> newReq = <span class="keyword">new</span> <span class="title class_">Request</span>(targetUrl, &#123;</span><br><span class="line">      <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">      <span class="attr">headers</span>: newHeaders,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// console.log(&#x27;request url : &#x27;, newReq.url);</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(newReq);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>保存并部署</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609173902920.png" alt="image-20230609173902920"></p><p>我的地址为<a href="https://hello-bing.daokun.workers.dev/">BingAI - 聊天 (daokun.workers.dev)</a>，在浏览器打开如下:</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609173939797.png" alt="image-20230609173939797"></p><p>接下来打开下载的工具</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609174142545.png" alt="image-20230609174142545" style="zoom:50%;"><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609174226404.png" alt="image-20230609174226404"></p><p>在浏览器输入<code>127.0.0.1:8080</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609174325700.png" alt="image-20230609174325700"></p><p>聊天服务器设置 –&gt; 自定义 —&gt; 复制链接<a href="https://hello-bing.daokun.workers.dev/">BingAI - 聊天 (daokun.workers.dev)</a>，检测是否可用</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609174638277.png" alt="image-20230609174638277"></p><p>这个域名在国内是无法使用的，回到下图位置，点击触发器</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609174806754.png" alt="image-20230609174806754"></p><p>go-proxy-bing参考文章:<a href="https://www.freedidi.com/9627.html">零度解说</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> New Bing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费搭建自己的ChatGPT网站,Chatbot UI,结合Vercel一键部署</title>
      <link href="/2023/06/09/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt%E7%BD%91%E7%AB%99-Chatbot-UI-%E7%BB%93%E5%90%88Vercel%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/06/09/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ChatGpt%E7%BD%91%E7%AB%99-Chatbot-UI-%E7%BB%93%E5%90%88Vercel%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Chatbot-ui"><a href="#Chatbot-ui" class="headerlink" title="Chatbot-ui"></a>Chatbot-ui</h1><h2 id="来到chatbot-ui"><a href="#来到chatbot-ui" class="headerlink" title="来到chatbot-ui"></a>来到chatbot-ui</h2><p><a href="https://github.com/mckaywrigley/chatbot-ui">chatbot-ui</a></p><p>点击蓝色的<code>Deploy</code>,跳转到<a href="https://vercel.com/">https://vercel.com/</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609153257604.png" alt="image-20230609153257604"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609153433636.png" alt="image-20230609153433636"></p><h2 id="创建一个仓库，名字随意"><a href="#创建一个仓库，名字随意" class="headerlink" title="创建一个仓库，名字随意"></a>创建一个仓库，名字随意</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609153538411.png" alt="image-20230609153538411"></p><h2 id="等待完成"><a href="#等待完成" class="headerlink" title="等待完成"></a>等待完成</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609153930220.png" alt="image-20230609153930220"></p><p>点击右上角的继续</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609154016996.png" alt="image-20230609154016996"></p><p>点击<code>visit</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609154049408.png" alt="image-20230609154049408"></p><h2 id="输入API-KEY"><a href="#输入API-KEY" class="headerlink" title="输入API-KEY"></a>输入API-KEY</h2><p><a href="https://platform.openai.com/account/api-keys">openai api key</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609154512751.png" alt="image-20230609154512751"></p><p>我的:</p><p><a href="https://chat-umber-eta.vercel.app/">https://chat-umber-eta.vercel.app/</a></p><h1 id="ChatGPT替代品—-Kamiya-GPT"><a href="#ChatGPT替代品—-Kamiya-GPT" class="headerlink" title="ChatGPT替代品—-Kamiya GPT"></a><strong>ChatGPT替代品—-Kamiya GPT</strong></h1><p>打开Kamiya GPT的官网：<a href="https://chat.kamiya.dev/">https://chat.kamiya.dev/</a> </p><p>自己注册就可以使用，这里是不说废话了。</p><h1 id="附-免费的chatGPT"><a href="#附-免费的chatGPT" class="headerlink" title="附:免费的chatGPT"></a>附:免费的chatGPT</h1><p><a href="https://chat-umber-eta.vercel.app/">道坤</a>（3.5）</p><p><a href="https://chat.forefront.ai/">forefront</a></p><p><a href="https://ora.ai/">奥拉</a>;内置了很多角色</p><p><a href="https://huggingface.co/spaces/ysharma/ChatGPT4">huggingface</a>：你只需要注册这个网站的账号，对于没有openai账号很友好</p><p><a href="https://www.microsoft.com/zh-cn/edge/launch/newBinginEdge">new bing</a></p><p><a href="https://play.google.com/store/apps/details?id=com.touchtype.swiftkey.beta&hl=en_US">安卓软件:微软 SwiftKey 测试版</a></p><p>chat镜像<br><a href="https://chat.aidutu.cn/">https://chat.aidutu.cn/</a></p><p><a href="https://gpt1.tool00.com/">https://gpt1.tool00.com/</a></p><p><a href="https://mirrorchat.extkj.cn/">https://mirrorchat.extkj.cn</a></p><p><a href="https://mirrorchat.extkj.cn/">https://mirrorchat.extkj.cn</a><br><a href="https://texttools.cn/">https://texttools.cn/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel免费容器一键部署Hexo轻量级的博客</title>
      <link href="/2023/06/09/Vercel%E5%85%8D%E8%B4%B9%E5%AE%B9%E5%99%A8%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Hexo%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/06/09/Vercel%E5%85%8D%E8%B4%B9%E5%AE%B9%E5%99%A8%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Hexo%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="账号准备"><a href="#账号准备" class="headerlink" title="账号准备"></a>账号准备</h3><p><strong>请注册好：</strong><a href="https://github.com/">Github 账号 </a></p><p>再前往<a href="https://vercel.com/">Vercel 网站 </a><strong>使用Github账号</strong>注册一个账号。这样注册好以后 Vercel里面就可以看到你 Github 里面的项目了。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609151542780.png" alt="image-20230609151542780"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230609151839099.png" alt="image-20230609151839099"></p><h3 id="创建-Hexo-项目"><a href="#创建-Hexo-项目" class="headerlink" title="创建 Hexo 项目"></a>创建 Hexo 项目</h3><p>创建 Hexo 项目直达链接：</p><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/EvanNotFound/vercel-hexo-template/tree/main&template=hexo"> Deploy</a></p><p>这时候就到了创建 Hexo 项目的页面了。</p><p>左边的 <code>Git Scope</code> 是你的 Github 账号，右边 <code>REPOSITORY NAME</code> 是你账号下 Hexo 博客仓库的名字，你的博客源文件就存放在这里，名称可以<strong>自选</strong></p><p>项目可见性就保持 <code>Private</code>，这样别人就看不到你 Hexo 仓库的各种机密信息了，有效保持版权和隐私</p><p>最简单的方式：直接点击【**<a href="https://vercel.com/new/clone?repository-url=https://github.com/EvanNotFound/vercel-hexo-template/tree/main&template=hexo">一键部署Hexo</a>**】</p><p>最后成功以后，会给你一个二级域名，这个二级域名是属于你的，不会回收，建议可以调试的时候临时使用。</p><p>部署完成后，它就和你刚刚所填写的仓库绑定了，一旦你的仓库有什么变化，它就会自动同步部署，全过程大概 5 分钟可以完成部署。</p><p>你现在可以点击那个二级域名，就可以看到你的 Hexo 博客了。</p><p>我的是<a href="https://daokunn-github-io.vercel.app/">https://daokunn-github-io.vercel.app/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32智能小车课程设计</title>
      <link href="/2023/06/04/STM32%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/06/04/STM32%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>​                                                            《STM32智能小车课程设计》</p><p>教学内容主要围绕如下几个方面展开：掌握项目开发的完整流程；掌握高效的项目概要框架设计方法，会进行科学的技术模块设计；掌握缜密的项目详细技术设计思想，根据数据流设计完善的程序接口；掌握项目开发的核心调试方法，能快速定位缺陷并及时修复；掌握前沿的嵌入式开发技术，将学过的知识灵活实践在项目开发用中；掌握KEIL4的使用，能对市场上大部分的单片机进行编程调试开发；灵活运用GPIO、中断、总线、网络通信等技术为智能小车系统提供稳定高效的功能；掌握传感器的外设使用，学会看时序图，帮助文档等参考资料；掌握主流无线通信技术，实现远程智能小车控制。</p><h2 id="STM32智能小车开发环境搭建"><a href="#STM32智能小车开发环境搭建" class="headerlink" title="STM32智能小车开发环境搭建"></a>STM32智能小车开发环境搭建</h2><p>1.1 STM32CubeIDE 介绍</p><p>STM32CubeIDE集成了STM32CubeMX的STM32配置与项目创建功能，以便提供一体化工具体验，并节省安装与开发时间。用户可以通过所选板卡或示例选择一个空的STM32 MCU或MPU，或者预配置微控制器或微处理器之后，将创建项目并生成初始化代码。在开发过程的任何时间，用户均可返回外设或中间件的初始化和配置阶段，并重新生成初始化代码，期间不会影响用户代码<br> 。              </p><p>STM32CubeIDE包含相关构建和堆栈分析仪，能够为用户提供有关项目状态和内存要求的有用信息。它还具有标准和高级调试功能，其中包括CPU内核寄存器、存储器和外设寄存器以及实时变量查看、串行线传输监测器接口或故障分析器的视图。所有功能都可通过STM32CubeMX来集成服务：STM32微控制器、微处理器、开发平台和示例项目选择引脚排列、时钟、外设和中间件配置项目创建和初始化代码生成。</p><p>STM32CubeIDE支持集成数以百计的现有插件，正是这些插件使Eclipse&#x2F;CDT的功能趋于完整。它还包括STM32MP1系列支持OpenSTLinux项目、Linux支持、其他高级调试功能包括CPU内核、外设寄存器和内存视图实时变量查看视图系统分析与实时跟踪(SWV)CPU故障分析工具支持RTOS感知调试，包括Azure和ST-LINK(意法半导体)和J-Link (SEGGER)调试探头。</p><p>总之，STM32CubeIDE是一款功能强大的开发工具，可以帮助开发人员快速有效地开发STM32系列微控制器应用程序。</p><p>1.2 STM32CubeIDE下载及安装</p><p><strong>STM32CubeIDE</strong>下载</p><p>官网<a href="https://www.st.com/zh/development-tools/stm32cubeide.html">https://www.st.com/zh/development-tools/stm32cubeide.html#documentation</a>下载STM32CubeIDE</p><p><strong>STM32CubeIDE</strong>安装：</p><p>1.选择自己系统对应的软件安装包，解压完成之后进行安装，注意选择的安装路径不能带有中文名称，否则有可能导致安装失败</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604151831815.png" alt="image-20230604151831815"></p><p>图 1.2.1选择安装路径</p><p>2.点击下一步，此时会出现是否选择安装烧写器驱动，第一个选项为 J-LINK，第二个为 ST-LINK，用户可以根据自己的烧写器进行选择，建议全部勾选上，单击install完成安装</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173254631.png" alt="image-20230604173254631"></p><p>图1.2.2 勾选烧写驱动</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173433562.png" alt="image-20230604173433562"></p><p>图1.2.3完成安装</p><p>1.3创建STM32工程：</p><p>1.创建工作空间</p><p>2.点击File-&gt;New-&gt;STM32 Project程序会自动打开内置的目标选择器</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173505816.png" alt="image-20230604173505816"></p><p>图1.3.1新建工程</p><p>3.在 Part Number 中输入 STM32F103C，芯片列表会自动筛选出符合条件的芯片，选择 STM32F103C8</p><p>4.点击 Next，将工程名字命名为 test_STM32F103C8，目标语言为 C 语言</p><p>5.然后点击 Next，进入包选择页面，一般选择最新的包即可，然后代产生选项选择只拷贝必要的库，点击Finish</p><p>6.在.ioc文件界面，点击 System Core 中的 SYS 选项，Debug 中选择 Serial Wire 选项，点击“generate code”选项，就会生成基础配置的代码，完成工程创建</p><p>1.4使用JFlash烧写.hex文件入小车芯片：</p><p>1.将主机与STM32F103C8智能小车相连</p><p>2.打开JFlash选择Options -&gt;project settings…</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173524857.png" alt="image-20230604173524857"></p><p>图1.4.1JFlash工程设置</p><p>target interface选择SWD并选择Auto seletions </p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173541112.png" alt="image-20230604173541112"></p><p>图1.4.2 选择SWD接口</p><p>CPC选择STM32F103C8</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173553167.png" alt="image-20230604173553167"></p><p>图1.4.3 选择CPU</p><p>3.打开文件选择烧写的.hex文件</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173602355.png" alt="image-20230604173602355"></p><p>图1.4.4 选择.hex文件</p><p>4.在Target选项卡中先点击connect连接USB，再点击Auto将文件烧写入芯片</p><h2 id="STM32智能小车硬件及原理图分析"><a href="#STM32智能小车硬件及原理图分析" class="headerlink" title="STM32智能小车硬件及原理图分析"></a>STM32智能小车硬件及原理图分析</h2><h3 id="STM32智能小车硬件分析"><a href="#STM32智能小车硬件分析" class="headerlink" title="STM32智能小车硬件分析"></a>STM32智能小车硬件分析</h3><p>基于STM32F103C8芯片的智能小车硬件设计主要包括以下几个部分：</p><p>1.电源模块：STM32F103C8芯片内置了一个内部电源模块，可以为芯片内部的各个部件提供稳定的电压和电流。同时，该芯片还具有外部电源接口，可以通过外部电源为小车提供电能。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173613891.png" alt="image-20230604173613891"></p><p>图2.1.1 电源模块</p><p>2.传感器模块：小车上安装了多个传感器，用于感知周围环境，如速度传感器、角速度传感器、加速度传感器等。这些传感器可以通过STM32F103C8芯片内置的ADC接口进行采样，并将采样数据传输到芯片内部进行处理。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173624163.png" alt="image-20230604173624163"></p><p>图2.1.2 传感模块</p><p>3.控制模块：STM32F103C8芯片内置了多个外设，如PWM、定时器、ADC等，可以实现对小车的控制。同时，该芯片还具有USB接口和串口，可以通过外部设备对小车进行控制。</p><p>4.通信模块：STM32F103C8芯片内置了蓝牙、WiFi、Zigbee等通信模块，可以实现小车与外部设备的通信。同时，该芯片还具有UART接口，可以通过串口与外部设备进行通信。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173632049.png" alt="image-20230604173632049"></p><p>图2.1.3 通信模块</p><p>5.硬件电路设计：小车的硬件电路设计主要包括电源线、数据线、控制线等，需要根据实际需求进行设计。</p><p>综上所述，基于STM32F103C8芯片的智能小车硬件设计相对比较简单，主要包括电源模块、传感器模块、控制模块和通信模块等部分。通过这些模块的协同工作，可以实现小车的智能控制和感知功能。</p><p>2.2STM32芯片原理图</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173645233.png" alt="image-20230604173645233"></p><p>图2.2.1 STM32F103C8T6核心板原理图</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173658526.png" alt="image-20230604173658526"></p><p>图2.2.2 母板模块及接口标注：</p><h2 id="STM32智能小车手机蓝牙无线操控"><a href="#STM32智能小车手机蓝牙无线操控" class="headerlink" title="STM32智能小车手机蓝牙无线操控"></a>STM32智能小车手机蓝牙无线操控</h2><p>3.1实验器材</p><p>硬件： </p><p>stm32模块、蓝牙模块、智能小车</p><p>软件： </p><p>手机APP或小程序：蓝牙串口工具</p><p>3.2 实验目的及原理</p><p><strong>实验目的</strong>：</p><p>使用STM32模组实现手机APP通过蓝牙控制小车前后左右停止功能。</p><p><strong>实验原理</strong>：</p><p>基于蓝牙通信，STM32PWM输出控制电机</p><p>电机供电由MVEN脚控制，MVEN脚为STM32的PB5引脚，使用电机时需将PB5引脚置高电平。电机信号脚M1+、M1-、M2+、M2-分别接在STM32的PB8、PB9、PB7、PB6引脚，这些脚分别为STM32定时器4的1、2、3、4通道。</p><p>原理图（部分）</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173710441.png" alt="image-20230604173710441"></p><p>图3.2.1 电机供电</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173719653.png" alt="image-20230604173719653"></p><p>图3.2.2 双路电机驱动</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173803566.png" alt="image-20230604173803566"></p><p>图3.2.3 核心板座子</p><p>3.3关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Deal_Data_BLE</span><span class="params">()</span><span class="comment">//**蓝牙接收处理函数**</span></span><br><span class="line"> &#123;</span><br><span class="line"> BLE_send(BLE_receivce_buff,BLE_receive_size);</span><br><span class="line"> <span class="keyword">switch</span>(BLE_receivce_buff[<span class="number">0</span>])<span class="comment">//通过蓝牙接收数据对小车进行控制</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">case</span> ‘A’:</span><br><span class="line"> Motor_Control_Up(<span class="number">80</span>);<span class="comment">//电机控制</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> ‘B’:</span><br><span class="line"> Motor_Control_Down(<span class="number">80</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> ‘C’:</span><br><span class="line"> Motor_Control_Left(<span class="number">80</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> ‘D’:</span><br><span class="line"> Motor_Control_Right(<span class="number">80</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> ‘F’:</span><br><span class="line"> Motor_Control_Stop(<span class="number">80</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.4烧写并观察实验结果</p><p>在编写完所有代码后，编译工程，编译无误后将程序下载进开发板，然后观察实验现象</p><p>打开手机APP，连接蓝牙，然后在APP上可通过蓝牙控制小车状态</p><h2 id="STM32智能小车超声波定距避障"><a href="#STM32智能小车超声波定距避障" class="headerlink" title="STM32智能小车超声波定距避障"></a>STM32智能小车超声波定距避障</h2><p>4.1实验器材</p><p>硬件：stm32 模块、蓝牙模块、智能小车</p><p>软件：手机 APP 或小程序：蓝牙串口工具</p><p>4.2实验任务</p><p>使用 STM32 模组实现小车定距功能。</p><p>4.3实验背景、资料</p><p>1．模拟电路、数字电路相关知识回顾；</p><p>2．STM32F103_数据手册（中文）； </p><p>3．C 语言程序设计； </p><p>4．STM32HAL 库函数手册；</p><p>4.4实验原理图</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173819251.png" alt="image-20230604173819251"></p><p>图4.4 超声波接口及核心板</p><p><strong>4.5****实验步骤</strong></p><p>1.关键代码</p><p>在 main 函数中进行超声波判断，设定距离为 10cm，大于则前进，小于则后退，等于则</p><p>停止。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173831201.png" alt="image-20230604173831201"></p><p>图4.5.1 关键代码</p><p>2.STM32CubeIDE 代码编写</p><p> 在图形化配置界面中配置超声波引脚，将PB11即TRIG引脚设置为输出模式将PB12即ECHO引脚设置为外部中断边沿触发模式并开启中断，如下图所示</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173839550.png" alt="image-20230604173839550"></p><p>图4.5.2 引脚设置</p><p>配置好工程后打开 main.c，在 main 函数中编写图4.5.1代码.</p><p>3.执行文件烧写</p><p>在编写完所有代码后，编译工程，编译无误后将程序下载进开发板，然后观察实验现象。</p><p>4.实验结果</p><p>程序运行后小车与前方障碍物始终保持 10cm 左右距离。</p><h2 id="STM32智能小车红外寻迹"><a href="#STM32智能小车红外寻迹" class="headerlink" title="STM32智能小车红外寻迹"></a>STM32智能小车红外寻迹</h2><p>5.1实验器材</p><p>硬件：stm32 模块、蓝牙模块、智能小车</p><p>软件：手机 APP 或小程序：蓝牙串口工具</p><p>5.2实验任务</p><p>使用 STM32 模组实现黑线循迹功能。</p><p>5.3实验背景、资料</p><p>1．模拟电路、数字电路相关知识回顾；</p><p>2．STM32F103_数据手册（中文）； </p><p>3．C 语言程序设计； </p><p>4．STM32HAL 库函数手册；</p><p>5.4实验步骤</p><p>1.原理图</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173901439.png" alt="image-20230604173901439"></p><p>图5.2.1 寻迹原理图</p><p>2.在tracing.c和tracing.h中编写红外检测功能函数。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173912976.png" alt="image-20230604173912976"></p><p>图5.2.2 关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//在 main.c 中定义红外循迹时小车的速度：</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> HIGH_SPEED   100<span class="comment">//默认的高速(实际上的全速运行)</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> DEFAULT_SPEED 80<span class="comment">//默认速度为 196</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> TRACING_UP_DEFAULT  75<span class="comment">//默认的寻迹模式下直走速度</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> MAX_TURN_SPEED  70</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> MIN_TURN_SPEED  65</span></span><br><span class="line"> <span class="comment">/* USER CODE END PD */</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//在 main 函数中编写循迹算法：</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> BLE_Init();</span><br><span class="line"> Steering_Init();</span><br><span class="line"> Motor_Control_Init();</span><br><span class="line"></span><br><span class="line">BLE_send((<span class="type">uint8_t</span> *)<span class="string">&quot;start&quot;</span>,<span class="number">5</span>);</span><br><span class="line"> <span class="type">uint8_t</span> tracing_info_now;</span><br><span class="line"> <span class="comment">//当前寻迹的四个红外状态，使用低四位</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> tracing_info_now = Get_State_Infrared(); <span class="comment">//读取寻迹的四个红外的状态</span></span><br><span class="line"> <span class="keyword">switch</span>(tracing_info_now)</span><br><span class="line"> <span class="comment">//根据当前的状态选择控制</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">//中间两条检测到</span></span><br><span class="line"> Motor_Control_Up(TRACING_UP_DEFAULT);</span><br><span class="line"> <span class="comment">//直走</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//加快右转</span></span><br><span class="line"> Motor_Control_Right(MIN_TURN_SPEED);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//右转</span></span><br><span class="line"> Motor_Control_All(TRACING_UP_DEFAULT,<span class="number">0</span>,MAX_TURN_SPEED,<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">8</span>: <span class="comment">//加快左转</span></span><br><span class="line"> Motor_Control_Left(MIN_TURN_SPEED);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">//右转</span></span><br><span class="line"> Motor_Control_All(MAX_TURN_SPEED,<span class="number">0</span>,TRACING_UP_DEFAULT,<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">    </span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>3.STM32CubeIDE 代码编写</p><p>1）在工程新建一个文件夹用于存放自己编写的代码并命名为 My_Code.</p><p>2），在 My_Code 文件加下新建一个专门存放头文件的文件夹 Inc，和专门存放.c 文件 </p><p>的文件加 Src。</p><p>3）然后右建 Inc 文件夹新建 tracking.h，在 Src 文件夹新建 tracking.c 文件，然后编写我们 </p><p>的红外检测代码。</p><p>4）按下 ALT+ENTER 快捷键进入工程配置界面，然后选择 Paths and Symbols，添加刚</p><p>刚新建的存放头文件的路径。</p><p>4.执行文件烧写</p><p>5.实验结果</p><p>将小车放在黑线中，小车跟随黑线轨迹行驶</p><h2 id="实训总结"><a href="#实训总结" class="headerlink" title="实训总结"></a>实训总结</h2><p>首先，要进行智能小车的开发，需要有一定的电子技术基础和STM32F103C8开发板的硬件设计能力。在开发过程中，需要熟悉STM32F103C8开发板的硬件原理图和电路设计，了解各个硬件模块的功能和连接方式。同时，还需要学习智能小车的控制算法和通信协议，以便实现小车的智能控制和通信功能。</p><p>其次，智能小车的开发需要使用相应的开发工具和调试环境。开发工具包括STM32F103C8开发板的IDE和烧写器，以及调试环境包括实时操作系统和仿真器等。在开发过程中，需要熟悉开发工具的使用方法，并进行调试和测试，以确保小车的功能和性能达到预期。</p><p>最后，智能小车的开发需要注重硬件设计的可靠性和稳定性，以及软件设计的灵活性和可扩展性。在开发过程中，需要考虑到硬件的耐久性和可维护性，以及软件的可扩展性和可维护性，以确保小车的稳定运行和长期可靠性。总之，STM32F103C8智能小车的开发需要有一定的电子技术基础和开发能力，需要使用相应的开发工具和调试环境，并注重硬件设计的可靠性和稳定性，以及软件设计的灵活性和可扩展性。</p><h2 id="附件：项目硬件及代码"><a href="#附件：项目硬件及代码" class="headerlink" title="附件：项目硬件及代码"></a>附件：项目硬件及代码</h2><h3 id="7-1-项目硬件（附图及说明）"><a href="#7-1-项目硬件（附图及说明）" class="headerlink" title="7.1 项目硬件（附图及说明）"></a>7.1 项目硬件（附图及说明）</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604152644992.png" alt="image-20230604152644992"></p><p>图1 .STM32F103C8芯片智能小车</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173939175.png" alt="image-20230604173939175"></p><p>图2. 蓝牙模块</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173946336.png" alt="image-20230604173946336"></p><p>图3.STM32F103C8芯片</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604173954385.png" alt="image-20230604173954385"></p><p>图4.超声波模块</p><p><strong>7.2****函数流程图</strong>  </p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604174002515.png" alt="image-20230604174002515"></p><p>图5. 主函数流程图</p><p><strong><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230604174013179.png" alt="image-20230604174013179"></strong></p><p>图6.寻迹模式流程图</p><p>7.3 项目代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;total.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> car_mode = Bluetooth_Mode;<span class="comment">//默认蓝牙控制模式</span></span><br><span class="line"><span class="type">uint8_t</span> bluetooth_cmd = BT_Car_Stop;<span class="comment">//蓝牙控制指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//蓝牙控制模式功能函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Bluetooth_Fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(bluetooth_cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BT_Car_Stop:<span class="comment">//停止</span></span><br><span class="line">Motor_Control_Stop();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BT_Car_Go:<span class="comment">//前进</span></span><br><span class="line">Motor_Control_Up(<span class="number">80</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BT_Car_Back:<span class="comment">//后退</span></span><br><span class="line">Motor_Control_Down(<span class="number">80</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BT_Car_Left:<span class="comment">//左转</span></span><br><span class="line">Motor_Control_Left(<span class="number">80</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BT_Car_Right:<span class="comment">//右转</span></span><br><span class="line">Motor_Control_Right(<span class="number">80</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定距模式功能函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Distance_Fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> DestDistance = <span class="number">100</span>;<span class="comment">//目标距离10cm</span></span><br><span class="line"><span class="type">int</span> difference=<span class="number">0</span>;<span class="comment">//与目标距离的差值</span></span><br><span class="line">Steering_Change_angle(ANGLE_DEFAULT);<span class="comment">//转到90度</span></span><br><span class="line">Distance_Send_Start();<span class="comment">//测量正前方距离.</span></span><br><span class="line">difference = DestDistance - (<span class="type">int</span>)distance_mm;</span><br><span class="line"><span class="keyword">if</span>(difference &gt;= <span class="number">0</span> &amp;&amp; difference &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  Motor_Control_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(difference&lt;<span class="number">0</span>)<span class="comment">//远了，要前进</span></span><br><span class="line">&#123;</span><br><span class="line">  Motor_Control_Up(<span class="number">3</span>*(<span class="type">uint16_t</span>)difference+<span class="number">57</span>);<span class="comment">//简单的算法，离目标越近速度越慢</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(difference&gt;<span class="number">1</span>)<span class="comment">//近了，要后退</span></span><br><span class="line">&#123;</span><br><span class="line">  Motor_Control_Down(<span class="number">3</span>*(<span class="type">uint16_t</span>)difference+<span class="number">57</span>);<span class="comment">//简单的算法，离目标越近速度越慢</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循迹模式功能函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Tracing_Fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> tracing_info_now;<span class="comment">//当前寻迹的四个红外状态，使用低四位</span></span><br><span class="line">tracing_info_now = Get_State_Infrared();<span class="comment">//读取寻迹的四个红外的状态</span></span><br><span class="line"><span class="keyword">switch</span>(tracing_info_now)<span class="comment">//根据当前的状态选择控制</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//中间两条检测到</span></span><br><span class="line">Motor_Control_Up(TRACING_UP_DEFAULT);<span class="comment">//直走</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//加快右转</span></span><br><span class="line">Motor_Control_Right(MIN_TURN_SPEED);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//右转</span></span><br><span class="line">Motor_Control_All(TRACING_UP_DEFAULT,<span class="number">0</span>,MAX_TURN_SPEED,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:<span class="comment">//加快左转</span></span><br><span class="line">Motor_Control_Left(MIN_TURN_SPEED);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//右转</span></span><br><span class="line">Motor_Control_All(MAX_TURN_SPEED,<span class="number">0</span>,TRACING_UP_DEFAULT,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//避障模式功能函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ObstacleAvoidance_Fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> L_State=<span class="number">0</span>,R_State=<span class="number">0</span>;<span class="comment">//左右两边红外标志</span></span><br><span class="line">  Steering_Change_angle(ANGLE_DEFAULT);<span class="comment">//转到90度</span></span><br><span class="line">  Distance_Send_Start();<span class="comment">//测量正前方距离.</span></span><br><span class="line">  HAL_Delay(<span class="number">10</span>);</span><br><span class="line">  L_State = HAL_GPIO_ReadPin(LH_GPIO_Port, LH_Pin);<span class="comment">//左红外检测，0代表有阻</span></span><br><span class="line">  R_State = HAL_GPIO_ReadPin(RH_GPIO_Port, RH_Pin);<span class="comment">//右红外检测，0代表有阻</span></span><br><span class="line">  <span class="keyword">if</span>(L_State!=<span class="number">0</span> &amp;&amp; R_State!=<span class="number">0</span> &amp;&amp; distance_mm&gt;<span class="number">120</span>)<span class="comment">//两边没有阻挡时且正前方障碍距离大于8cm</span></span><br><span class="line">  &#123;</span><br><span class="line">  Motor_Control_Up(CarSpeed);<span class="comment">//前进</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(L_State==<span class="number">0</span> &amp;&amp; R_State==<span class="number">0</span>)<span class="comment">//两侧有障碍后退</span></span><br><span class="line">  &#123;</span><br><span class="line">  Motor_Control_Down(CarSpeed);<span class="comment">//后退后检测左右两边障碍距离</span></span><br><span class="line">  HAL_Delay(<span class="number">250</span>);</span><br><span class="line">  CheckLeftRight(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(L_State==<span class="number">0</span> &amp;&amp; R_State!=<span class="number">0</span>)<span class="comment">//左边有阻</span></span><br><span class="line">  &#123;</span><br><span class="line">  Motor_Control_Right(CarSpeed);<span class="comment">//右转后进行下次判</span></span><br><span class="line">  HAL_Delay(<span class="number">80</span>);</span><br><span class="line">  Motor_Control_Stop();<span class="comment">//小车停止</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(L_State!=<span class="number">0</span> &amp;&amp; R_State==<span class="number">0</span>)<span class="comment">//右边有阻</span></span><br><span class="line">  &#123;</span><br><span class="line">  Motor_Control_Left(CarSpeed);<span class="comment">//左转后进行下次判</span></span><br><span class="line">  HAL_Delay(<span class="number">80</span>);</span><br><span class="line">  Motor_Control_Stop();<span class="comment">//小车停止</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(distance_mm&lt;=<span class="number">120</span> &amp;&amp; L_State!=<span class="number">0</span> &amp;&amp; R_State!=<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  Motor_Control_Stop();</span><br><span class="line">  CheckLeftRight(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//避障模式检测左右两侧超声距离</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CheckLeftRight</span><span class="params">(<span class="type">uint8_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> L_Dis=<span class="number">0</span>,R_Dis=<span class="number">0</span>;<span class="comment">//超声波传感器测的左右两边障碍物距</span></span><br><span class="line">check:</span><br><span class="line">Motor_Control_Stop();<span class="comment">//小车停止</span></span><br><span class="line">Steering_Change_angle(<span class="number">130</span>);<span class="comment">//转到130度测量左边有无障</span></span><br><span class="line">HAL_Delay(<span class="number">350</span>);</span><br><span class="line">Distance_Send_Start();<span class="comment">//测量次正前方距离</span></span><br><span class="line">HAL_Delay(<span class="number">150</span>);</span><br><span class="line">L_Dis=distance_mm;</span><br><span class="line"></span><br><span class="line">Steering_Change_angle(<span class="number">50</span>);<span class="comment">//转到50度测量右边有无障</span></span><br><span class="line">HAL_Delay(<span class="number">350</span>);</span><br><span class="line">Distance_Send_Start();<span class="comment">//测量次正前方距离</span></span><br><span class="line">HAL_Delay(<span class="number">150</span>);</span><br><span class="line">R_Dis=distance_mm;</span><br><span class="line"></span><br><span class="line">Steering_Change_angle(ANGLE_DEFAULT);<span class="comment">//转到90</span></span><br><span class="line">HAL_Delay(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">if</span>(L_Dis&lt;<span class="number">60</span> &amp;&amp; R_Dis&lt;<span class="number">60</span>)<span class="comment">//左右两边均不能走</span></span><br><span class="line">&#123;</span><br><span class="line">Motor_Control_Down(CarSpeed);<span class="comment">//后段距离后进行下一次判</span></span><br><span class="line">HAL_Delay(<span class="number">250</span>);</span><br><span class="line"><span class="keyword">goto</span> check;<span class="comment">//重新判断左右两边障碍物距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L_Dis&gt;R_Dis)<span class="comment">//左边障碍物距离远</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mode == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Motor_Control_Left(CarSpeed);<span class="comment">//左转后进行下次判</span></span><br><span class="line"><span class="keyword">if</span>(L_Dis&gt;<span class="number">50</span>)</span><br><span class="line">  HAL_Delay(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L_Dis&gt;<span class="number">40</span> &amp;&amp; L_Dis&lt;=<span class="number">50</span>)</span><br><span class="line">  HAL_Delay(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  HAL_Delay(<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Motor_Control_Left(CarSpeed);<span class="comment">//左转后进行下次判</span></span><br><span class="line"><span class="keyword">if</span>(L_Dis&gt;<span class="number">100</span>)</span><br><span class="line">  HAL_Delay(<span class="number">400</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  HAL_Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Motor_Control_Right(CarSpeed);<span class="comment">//右转后进行下次判</span></span><br><span class="line"><span class="keyword">if</span>(R_Dis&gt;<span class="number">50</span>)</span><br><span class="line">  HAL_Delay(<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(R_Dis&gt;<span class="number">40</span> &amp;&amp; R_Dis&lt;=<span class="number">50</span>)</span><br><span class="line">  HAL_Delay(<span class="number">300</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  HAL_Delay(<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Motor_Control_Right(CarSpeed);<span class="comment">//左转后进行下次判</span></span><br><span class="line"><span class="keyword">if</span>(R_Dis&gt;<span class="number">100</span>)</span><br><span class="line">  HAL_Delay(<span class="number">400</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  HAL_Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Motor_Control_Stop();<span class="comment">//小车停止</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭健身智能推荐与姿态监测系统</title>
      <link href="/2023/06/04/%E5%AE%B6%E5%BA%AD%E5%81%A5%E8%BA%AB%E6%99%BA%E8%83%BD%E6%8E%A8%E8%8D%90%E4%B8%8E%E5%A7%BF%E6%80%81%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/06/04/%E5%AE%B6%E5%BA%AD%E5%81%A5%E8%BA%AB%E6%99%BA%E8%83%BD%E6%8E%A8%E8%8D%90%E4%B8%8E%E5%A7%BF%E6%80%81%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="家庭健身智能推荐与姿态监测系统"><a href="#家庭健身智能推荐与姿态监测系统" class="headerlink" title="家庭健身智能推荐与姿态监测系统"></a>家庭健身智能推荐与姿态监测系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此项目依赖于 Python3.8</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>​     为了给运动者提供一种更加科学、更加精准的个性化运动方案，设计实现了一个家庭健身智能推荐及姿态监测系统。</p><p>​     系统根据已检测个体的身体指标，为其推荐个性化健身方案；通过动态采集肢体关节的运动数据值，将采集到的肢体关节的运动数据值与预设的肢体关节的运动数据域值进行实时比较，若超出预设的域值范围，则进行提示，以达到保持正确姿态的需求，从而实现对人体运动姿势的监测和报警等功能。</p><p>​     运行程序之后，会调用摄像头，录制您的运动视频，接着在再对视频的姿态进行分析从而判断您的运动姿态是否标准。</p><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PIL       version == 8.4.0</span><br><span class="line">pygame    version == 2.0.2</span><br><span class="line">eyed3     version == 0.9.6</span><br><span class="line">python-opencv  version == 4.5.5</span><br><span class="line">mediapipe version == 0.8.9.1</span><br><span class="line">numpy     version == 1.21.4</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><code>main.py</code></p><p><code>dispose.py</code></p><p><code>voice.py</code></p><p><code>camera.py</code></p><p><code>hand_test.py</code></p><h2 id="部分代码展示"><a href="#部分代码展示" class="headerlink" title="部分代码展示"></a>部分代码展示</h2><p><strong>camera.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">videocapture</span>():</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)  <span class="comment"># 生成读取摄像头对象</span></span><br><span class="line">width = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  <span class="comment"># 获取视频的宽度</span></span><br><span class="line">height = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))  <span class="comment"># 获取视频的高度</span></span><br><span class="line">fps = cap.get(cv2.CAP_PROP_FPS)  <span class="comment"># 获取视频的帧率</span></span><br><span class="line">fourcc = <span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FOURCC))  <span class="comment"># 视频的编码</span></span><br><span class="line"><span class="comment"># 定义视频对象输出</span></span><br><span class="line">writer = cv2.VideoWriter(<span class="string">&quot;./video_result.mp4&quot;</span>, fourcc, fps, (width, height))</span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">ret, frame = cap.read()  <span class="comment"># 读取摄像头画面</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;teswell&#x27;</span>, frame)  <span class="comment"># 显示画面</span></span><br><span class="line">key = cv2.waitKey(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;转化为灰度图像进行处理&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 将捕获的一帧图像灰度化处理</span></span><br><span class="line"><span class="comment"># frame = cv2.flip(gray, 1)  # 图像翻转（0：垂直翻转；1：水平翻转；-1：垂直水平翻转）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 将捕获的一帧图像灰度化处理</span></span><br><span class="line"><span class="comment"># frame = cv2.flip(frame, 1)</span></span><br><span class="line"></span><br><span class="line">writer.write(frame)  <span class="comment"># 视频保存</span></span><br><span class="line"><span class="comment"># 按Q退出</span></span><br><span class="line"><span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cap.release()  <span class="comment"># 释放摄像头</span></span><br><span class="line">cv2.destroyAllWindows()  <span class="comment"># 释放所有显示图像窗口</span></span><br></pre></td></tr></table></figure><p><strong><code>dispose.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.environ[&quot;CUDA_DEVICES_ORDER&quot;]=&quot;PCI_BUS_IS&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="comment"># mp.solutions.drawing_utils用于绘制</span></span><br><span class="line">    mp_drawing = mp.solutions.drawing_utils</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数：1、颜色，2、线条粗细，3、点的半径</span></span><br><span class="line">    DrawingSpec_point = mp_drawing.DrawingSpec((<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    DrawingSpec_line = mp_drawing.DrawingSpec((<span class="number">173</span>,<span class="number">255</span>,<span class="number">47</span>), <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mp.solutions.holistic是一个类别，是人的整体</span></span><br><span class="line">    mp_holistic = mp.solutions.holistic</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数：1、是否检测静态图片，2、姿态模型的复杂度，3、结果看起来平滑（用于video有效），4、检测阈值，5、跟踪阈值</span></span><br><span class="line">    holistic = mp_holistic.Holistic(min_detection_confidence=<span class="number">0.5</span>, min_tracking_confidence=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    cap = cv2.VideoCapture(<span class="string">&#x27;./video_result.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        success, image = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ignoring empty camera frame.&quot;</span>)</span><br><span class="line">            <span class="comment"># open_mp3()</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        image1 = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理RGB图像</span></span><br><span class="line">        results = holistic.process(image1)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        mp_holistic.PoseLandmark类中共33个人体骨骼点</span></span><br><span class="line"><span class="string">        mp_holistic.HandLandmark类中共21个手部关键点</span></span><br><span class="line"><span class="string">        脸部有468个关键点</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="comment"># 省略部分核心代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analysic</span>():</span><br><span class="line">    fun()</span><br><span class="line">    holistic.close()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/%E4%BF%AF%E5%8D%A7%E6%92%91%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E5%88%86%E6%9E%90.png" alt="俯卧撑人体姿态分析" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/%E4%B8%8B%E8%B9%B2%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E5%88%86%E6%9E%90.png" alt="下蹲人体姿态分析" style="zoom:50%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/%E7%AB%99%E7%AB%8B%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E5%88%86%E6%9E%90.png" alt="站立人体姿态分析" style="zoom:50%;"><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>为了知识产权，本项目的代码和资源文件不完整。</p><ol><li>语音包换成一个无实际意义的语音</li><li>本项目<code>dispose.py</code>和<code>hand_test.py</code>删除了核心代码，无法完成核心功能。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无插件下载csdn的文章并转成pdf</title>
      <link href="/2023/05/11/%E6%97%A0%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BDcsdn%E7%9A%84%E6%96%87%E7%AB%A0%E5%B9%B6%E8%BD%AC%E6%88%90pdf/"/>
      <url>/2023/05/11/%E6%97%A0%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BDcsdn%E7%9A%84%E6%96%87%E7%AB%A0%E5%B9%B6%E8%BD%AC%E6%88%90pdf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="进入到想要下载的文章界面，按功能键“F12”"><a href="#进入到想要下载的文章界面，按功能键“F12”" class="headerlink" title="进入到想要下载的文章界面，按功能键“F12”"></a>进入到想要下载的文章界面，按功能键“F12”</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230611172529837.png" alt="image-20230611172529837"></p><h2 id="进入到控制台，输入如下代码"><a href="#进入到控制台，输入如下代码" class="headerlink" title="进入到控制台，输入如下代码"></a>进入到控制台，输入如下代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;$(<span class="string">&quot;#side&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;#comment_title, #comment_list, #comment_bar, #comment_form, .announce, #ad_cen, #ad_bot&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;.nav_top_2011, #header, #navigator&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;.p4course_target, .comment-box, .recommend-box, #csdn-toolbar, #tool-box&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;aside&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;.tool-box&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;#toolBarBox&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;main&quot;</span>).<span class="title function_">css</span>(<span class="string">&#x27;display&#x27;</span>,<span class="string">&#x27;content&#x27;</span>); $(<span class="string">&quot;main&quot;</span>).<span class="title function_">css</span>(<span class="string">&#x27;float&#x27;</span>,<span class="string">&#x27;left&#x27;</span>);$(<span class="string">&quot;.option-box&quot;</span>).<span class="title function_">remove</span>();$(<span class="string">&quot;body&quot;</span>).<span class="title function_">css</span>(<span class="string">&#x27;min-width&#x27;</span>,<span class="number">0</span>);$(<span class="string">&quot;.option-box&quot;</span>).<span class="title function_">remove</span>();<span class="variable language_">window</span>.<span class="title function_">print</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>回车之后</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230611172633200.png" alt="image-20230611172633200"></p><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><h2 id="在线转换成你想要的格式"><a href="#在线转换成你想要的格式" class="headerlink" title="在线转换成你想要的格式"></a>在线转换成你想要的格式</h2><p><a href="https://www.alltoall.net/">PDF转Word | 免费在线PDF转Word | PDF转Word转换器 | PDF转化速度快 | 首页 (alltoall.net)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python调用you-get</title>
      <link href="/2023/05/10/Python%E8%B0%83%E7%94%A8you-get/"/>
      <url>/2023/05/10/Python%E8%B0%83%E7%94%A8you-get/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Python代码调用you-get"><a href="#Python代码调用you-get" class="headerlink" title="Python代码调用you-get"></a>Python代码调用you-get</h1><h2 id="直接下载到桌面"><a href="#直接下载到桌面" class="headerlink" title="直接下载到桌面"></a>直接下载到桌面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的url请输入你所下载的视频地址</span></span><br><span class="line">url = <span class="string">&#x27;https://www.bilibili.com/video/BV1yP411P7As/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=197cd9faf9dfebb5668cf8cff4737d21&#x27;</span></span><br><span class="line">cmd = [<span class="string">&#x27;you-get&#x27;</span>, url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输出</span></span><br><span class="line">out, err = p.communicate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(out.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="详细命令"><a href="#详细命令" class="headerlink" title="详细命令"></a>详细命令</h2><p>以下是使用Python调用you-get下载视频的示例代码，注释详细说明了每个步骤的作用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频链接</span></span><br><span class="line">url = <span class="string">&#x27;https://www.bilibili.com/video/BV1Jx411W7Zu&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用you-get下载视频</span></span><br><span class="line"><span class="comment"># -o 指定下载路径</span></span><br><span class="line"><span class="comment"># -O 指定输出文件名</span></span><br><span class="line"><span class="comment"># -d 指定下载整个视频列表</span></span><br><span class="line"><span class="comment"># -p 指定下载视频的清晰度</span></span><br><span class="line"><span class="comment"># --format 指定下载视频的格式</span></span><br><span class="line"><span class="comment"># --no-caption 不下载字幕</span></span><br><span class="line"><span class="comment"># --no-merge 不合并视频和音频</span></span><br><span class="line"><span class="comment"># --debug 输出调试信息</span></span><br><span class="line"><span class="comment"># --json 输出JSON格式的信息</span></span><br><span class="line"><span class="comment"># --info 输出视频信息</span></span><br><span class="line"><span class="comment"># --version 输出you-get版本信息</span></span><br><span class="line"><span class="comment"># --help 输出you-get帮助信息</span></span><br><span class="line">command = [<span class="string">&#x27;you-get&#x27;</span>, url, <span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;./videos&#x27;</span>, <span class="string">&#x27;-O&#x27;</span>, <span class="string">&#x27;test.mp4&#x27;</span>, <span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;1080p&#x27;</span>, <span class="string">&#x27;--no-caption&#x27;</span>, <span class="string">&#x27;--no-merge&#x27;</span>, <span class="string">&#x27;--debug&#x27;</span>]</span><br><span class="line">subprocess.call(command)</span><br></pre></td></tr></table></figure><p>在使用该代码之前，需要先安装you-get。可以使用以下命令在命令行中安装you-get：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure><p>该代码中使用了Python的<code>subprocess</code>模块来调用you-get下载视频。<code>subprocess.call()</code>函数可以执行一个命令，并等待命令执行完成后返回。在该代码中，<code>command</code>变量存储了要执行的命令及其参数，<code>subprocess.call(command)</code>执行了该命令。</p><p>在命令中，<code>-o</code>参数指定了下载路径，<code>-O</code>参数指定了输出文件名，<code>-p</code>参数指定了下载视频的清晰度。其他参数可以根据需要进行添加或修改。</p><p>需要注意的是，you-get只能下载一些公开的视频，如果需要下载需要登录或付费的视频，需要先登录或付费后才能下载。此外，下载视频可能涉及到版权问题，请遵守相关法律法规。</p><h2 id="Python-Tkinter界面库和you-get下载工具"><a href="#Python-Tkinter界面库和you-get下载工具" class="headerlink" title="Python Tkinter界面库和you-get下载工具"></a>Python Tkinter界面库和you-get下载工具</h2><p>以下是一个使用Python Tkinter界面库和you-get下载工具的示例程序，可以实现选择下载地址、下载路径、清晰度、下载类型等功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouGetDownloader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        self.master = master</span><br><span class="line">        master.title(<span class="string">&quot;You-Get Downloader&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载地址</span></span><br><span class="line">        self.url_label = tk.Label(master, text=<span class="string">&quot;下载地址：&quot;</span>)</span><br><span class="line">        self.url_label.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.url_entry = tk.Entry(master, width=<span class="number">50</span>)</span><br><span class="line">        self.url_entry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载路径</span></span><br><span class="line">        self.path_label = tk.Label(master, text=<span class="string">&quot;下载路径：&quot;</span>)</span><br><span class="line">        self.path_label.grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.path_entry = tk.Entry(master, width=<span class="number">50</span>)</span><br><span class="line">        self.path_entry.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">        self.path_button = tk.Button(master, text=<span class="string">&quot;选择路径&quot;</span>, command=self.select_path)</span><br><span class="line">        self.path_button.grid(row=<span class="number">1</span>, column=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清晰度</span></span><br><span class="line">        self.quality_label = tk.Label(master, text=<span class="string">&quot;清晰度：&quot;</span>)</span><br><span class="line">        self.quality_label.grid(row=<span class="number">2</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.quality_var = tk.StringVar()</span><br><span class="line">        self.quality_var.<span class="built_in">set</span>(<span class="string">&quot;best&quot;</span>)</span><br><span class="line">        self.quality_menu = tk.OptionMenu(master, self.quality_var, <span class="string">&quot;best&quot;</span>, <span class="string">&quot;1080p&quot;</span>, <span class="string">&quot;720p&quot;</span>, <span class="string">&quot;480p&quot;</span>, <span class="string">&quot;360p&quot;</span>, <span class="string">&quot;240p&quot;</span>, <span class="string">&quot;worst&quot;</span>)</span><br><span class="line">        self.quality_menu.grid(row=<span class="number">2</span>, column=<span class="number">1</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载类型</span></span><br><span class="line">        self.type_label = tk.Label(master, text=<span class="string">&quot;下载类型：&quot;</span>)</span><br><span class="line">        self.type_label.grid(row=<span class="number">3</span>, column=<span class="number">0</span>)</span><br><span class="line">        self.type_var = tk.StringVar()</span><br><span class="line">        self.type_var.<span class="built_in">set</span>(<span class="string">&quot;video&quot;</span>)</span><br><span class="line">        self.type_menu = tk.OptionMenu(master, self.type_var, <span class="string">&quot;video&quot;</span>, <span class="string">&quot;audio&quot;</span>, <span class="string">&quot;merge&quot;</span>)</span><br><span class="line">        self.type_menu.grid(row=<span class="number">3</span>, column=<span class="number">1</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始下载按钮</span></span><br><span class="line">        self.download_button = tk.Button(master, text=<span class="string">&quot;开始下载&quot;</span>, command=self.start_download)</span><br><span class="line">        self.download_button.grid(row=<span class="number">4</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_path</span>(<span class="params">self</span>):</span><br><span class="line">        path = tk.filedialog.askdirectory()</span><br><span class="line">        self.path_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">        self.path_entry.insert(<span class="number">0</span>, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_download</span>(<span class="params">self</span>):</span><br><span class="line">        url = self.url_entry.get()</span><br><span class="line">        path = self.path_entry.get()</span><br><span class="line">        quality = self.quality_var.get()</span><br><span class="line">        download_type = self.type_var.get()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> download_type == <span class="string">&quot;merge&quot;</span>:</span><br><span class="line">            cmd = <span class="string">f&quot;you-get -o <span class="subst">&#123;path&#125;</span> -F <span class="subst">&#123;quality&#125;</span> -O output <span class="subst">&#123;url&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd = <span class="string">f&quot;you-get -o <span class="subst">&#123;path&#125;</span> -F <span class="subst">&#123;quality&#125;</span> --<span class="subst">&#123;download_type&#125;</span> <span class="subst">&#123;url&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        subprocess.Popen(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">app = YouGetDownloader(root)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>这个程序使用了Python的<code>subprocess</code>模块来调用you-get下载工具，并且使用了Python的<code>tkinter.filedialog</code>模块来选择下载路径。在界面上，我们使用了<code>tkinter.Label</code>、<code>tkinter.Entry</code>、<code>tkinter.Button</code>、<code>tkinter.OptionMenu</code>等控件来实现各种功能。程序中的注释也比较详细，希望对你有帮助。</p><p>参考</p><p><a href="https://blog.csdn.net/cui_yonghua/article/details/125484160"> 5分钟带你了解python中超级好用的库 you-get_python的you-get_数据知道的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/q735496541/article/details/122933490">you-get简明使用教程_you_get_q735496541的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/hacker_god/article/details/126033964">you-get库——python详解_python you-get_不忘晨曦的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> you-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux驱动开发</title>
      <link href="/2023/04/24/Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2023/04/24/Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h1><p>​Linux是宏内核（单内核）操作系统的典型代表，Windows操作系统是微内核。宏内核所有内核功能都被整体编译在一起，形成一个单独的内核镜像文件。优点是效率非常高，内核中各功能模块的交互是通过直接的函数调用进行的。</p><p>​微内核只实现内核相当关键和核心的一部分，其他模块被单独编译，功能模块之间的交互需要通过微内核提供的某种通信机制来建立。优点:有利于增加，删除，修改内核的某个功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux驱动开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语言(MySQL/Oracle/SQL Server/PostgreSQL)</title>
      <link href="/2023/04/10/SQL%E8%AF%AD%E8%A8%80-MySQL-Oracle-SQL-Server-PostgreSQL/"/>
      <url>/2023/04/10/SQL%E8%AF%AD%E8%A8%80-MySQL-Oracle-SQL-Server-PostgreSQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>了解SQL数据库</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230410221011304.png" alt="image-20230410221011304"></p><ol><li><p>安装 MySQL</p><p>首先更新本地存储库索引，执行<code>sudo apt update</code></p><p>从APT存储库安装MySQL，执行<code>sudo apt install mysql-server</code>，在安装过程中，可能会出现[Y &#x2F; n]问题，输入Y继续</p><p>安装完成后可以输入<code>mysql --version</code>查看版本</p><p>安装后，MySQL服务器应自动启动。 要检查它是否正在运行，执行<code>systemctl status mysql.service</code></p><p>如果由于某些原因MySQL服务器未运行，执行以下命令以启动MySQL服务器：<code>sudo systemctl start mysql</code></p></li><li><p>安装XXXX</p></li><li><p>安装XXXX</p></li><li><p>安装XXXX</p></li><li><p>设置root</p></li></ol><p>Mysql安装成功后，默认的root用户密码为空，你可以使用以下命令来创建root用户的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root password &quot;new_password&quot;;</span><br></pre></td></tr></table></figure><p>登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br></pre></td></tr></table></figure><p>创建一个hr数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database hr;</span><br></pre></td></tr></table></figure><p>使用hr数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use hr;</span><br></pre></td></tr></table></figure><p>接着粘贴以下语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> job_history;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employees;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> departments;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> departments(</span><br><span class="line">  deptno  <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">  dname <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  managerno <span class="type">int</span>,</span><br><span class="line">  loc <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向部门表中插入记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;开发部&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;一楼&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;测试部&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;二楼&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;一楼&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> departments <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;新业务部&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;二楼&#x27;</span>);</span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees(</span><br><span class="line">  empno <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  deptno <span class="type">int</span>,</span><br><span class="line">  email <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  hiredate <span class="type">date</span>,</span><br><span class="line">  salary <span class="type">numeric</span>(<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">default</span> <span class="number">8000.00</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(deptno) <span class="keyword">REFERENCES</span> departments(deptno)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向员工表中插入记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;周福生&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;zhou@gmail.com&#x27;</span>,<span class="string">&#x27;2000-12-02&#x27;</span>,<span class="number">90000.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;wangsu@gmail.com&#x27;</span>,<span class="string">&#x27;2013-01-03&#x27;</span>,<span class="number">9100.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;lisi@qq.com&#x27;</span>,<span class="string">&#x27;2021-02-10&#x27;</span>,<span class="number">13900.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;zhaoliu@qq.com&#x27;</span>,<span class="string">&#x27;2022-12-1&#x27;</span>,<span class="number">15000.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;李明&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;liming@qq.com&#x27;</span>,<span class="string">&#x27;2004-09-11&#x27;</span>,<span class="number">25200.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;孙军&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;sunjun@163.com&#x27;</span>,<span class="string">&#x27;2016-05-22&#x27;</span>,<span class="number">9700.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;钱杰&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;qianjie@outlook.com&#x27;</span>,<span class="string">&#x27;2013-07-22&#x27;</span>,<span class="number">8900.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;程娟&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;chengjuan@gmail.com&#x27;</span>,<span class="string">&#x27;2013-07-22&#x27;</span>,<span class="number">14900.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employees <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;赵卫华&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;zhaoweihua@gmail.com&#x27;</span>,<span class="string">&#x27;2009-11-12&#x27;</span>,<span class="number">21900.00</span>);</span><br><span class="line"><span class="comment">-- 创建岗位历史表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> job_history(</span><br><span class="line">  empno <span class="type">int</span>,</span><br><span class="line">  start_date <span class="type">date</span>,</span><br><span class="line">  end_date <span class="type">date</span>,</span><br><span class="line">  deptno <span class="type">int</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(empno,start_date),</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(empno) <span class="keyword">REFERENCES</span> employees(empno)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向岗位历史表中插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;2013-01-03&#x27;</span>,<span class="string">&#x27;2015-12-31&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;2016-01-01&#x27;</span>,<span class="string">&#x27;2018-12-31&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;2015-01-01&#x27;</span>,<span class="string">&#x27;2017-12-31&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;2010-01-01&#x27;</span>,<span class="string">&#x27;2015-12-31&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;2015-06-30&#x27;</span>,<span class="string">&#x27;2016-12-31&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> job_history <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;2009-11-12&#x27;</span>,<span class="string">&#x27;2010-12-31&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> departments;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> job_history;</span><br></pre></td></tr></table></figure><h1 id="select字段"><a href="#select字段" class="headerlink" title="select字段"></a>select字段</h1><p>最简单的: <code>select * from 表名;</code></p><p>注意基本概念，数据库中，横着的是记录，竖着是字段。</p><p><code>select * from employees;</code></p><h2 id="MySQL的基本语法"><a href="#MySQL的基本语法" class="headerlink" title="MySQL的基本语法"></a>MySQL的基本语法</h2><h3 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>语法:<code>create &#123;database | schema&#125;  [if not exists] 数据库名字</code></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database afu;</span><br><span class="line">create database afu; #因为存在一个afu库，所以会报错</span><br><span class="line">create database if not exists afu; #可以正常执行，但是有一个警告</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418223737289.png" alt="image-20230418223737289"></p><p><code>show warnings;</code>可以常看警告信息</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418223857852.png" alt="image-20230418223857852"></p><p>再来创建一个数据库，名字为“daokun”,并且指定字符集为“utf-8”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database daokun default character set utf8;</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418224206695.png" alt="image-20230418224206695"></p><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p>语法:<code>use 数据库名;</code></p><p>例如选择之前创建的afu数据库：<code>use afu;</code></p><p>执行查询命令<code>show tables;</code>查看当前库有哪些表，因为afu库还没有创建任何表，所以返回空。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418224529089.png" alt="image-20230418224529089"></p><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><p>查看有哪些库语法:<code>show databases</code>;</p><p>查看有哪些表：<code>show 数据库名;</code></p><p>查看创建方法，字符集等:<code>show create database 数据库名;</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418225038377.png" alt="image-20230418225038377"></p><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><p>如果创建库的时候，忘记了指定字符集，可以使用<code>alter</code></p><p><code>alter database afu default character set utf8;</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230418225319408.png" alt="image-20230418225319408"></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>这个数据库里面的所有内容都会被删除，包括表结构和数据。</p><p>语法:<code>drop database 数据库名;</code></p><h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p><strong>MySQL支持多种数据类型，分为三类:数值，日期&#x2F;时间，字符串。</strong></p><p>整数类型分为:<strong>TINYINT,SMALLINT,MEDIUMINT,INT,BIGINT</strong>;浮点类型:<strong>FLOAT,DOUBLE</strong>。定点数类型:<strong>DECIMAL</strong>。</p><p>日期&#x2F;时间类型包括：<strong>DATA,TIME,DATATIME,TIMESTAMP,YEAR</strong>;</p><p>字符串类型包括:<strong>CHAR,VARCHAR,BINARY,VARBINARY,BLOB,TEXT,ENUM,SET</strong>。二进制字符串类型:BINARY,VARBINARY。</p><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>​可以用在数据类型后面添加<strong>UNSIGNED</strong>来标识是否未无符号，例如**:INT** <strong>UNSIGNED</strong>表示无符号的4字节长度的整数。</p><p>无符号和有符号的范围是不一样的。</p><p>​                                                       有符号的整数类型的取值范围和占用字节</p><table><thead><tr><th align="center">类型</th><th align="center">取值范围</th><th align="center">占用字节</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">-128~127</td><td align="center">1</td></tr><tr><td align="center">SMALLINT</td><td align="center">-32768~32767</td><td align="center">2</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">-8388608~8388607</td><td align="center">3</td></tr><tr><td align="center">INT</td><td align="center">-2147483648~2147483647</td><td align="center">4</td></tr><tr><td align="center">BIGINT</td><td align="center">-9223372036854775808~9223372036854775807</td><td align="center">8</td></tr></tbody></table><p>MySQL可以指定定点数和浮点数的精度。数据类型（M，D），M是精度，是数据的总长度；D是标度，是小数点后面的长度。</p><p>例如，float(6,2)的含义为：数据类型是float,数据长度是6，小数点保留后面两位。如果插入值的精度高于实际定义的精度，系统会进行四舍五入。</p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>​字符串主要由CHAR,VARCHAR,BINARY,VARBINARY,BLOB,TEXT,ENUM,SET。</p><p>​CHAR和VARCHAR类似，但在保存和检索方式有所区别，最大长度和尾部空格是否保留等方面不同。（保存和检索方式都不进行大小写转换）。</p><p>​BINARY和VARBINARY类似，存储的是二进制字符串，而不是字符型字符串。它们没有字符集，并且排序和比较基于列值字节的数值。</p><p>​TEXT有四种类型：TINYTEXT,TEXT,MEDIUMTEXT,LONGTEXT。</p><p>​ENUM是枚举类型。</p><p>​SET是集合类型，不同于ENUM，它是一个排列组合，假如有abc,它可以选择a或者b或者c,也可以选择ab,ac,bc,还可以选择abc。</p><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><ol><li><strong>YEAR</strong>类型</li></ol><p>三种赋值方法：</p><p>​第一种是直接插入4位数字或者字符串。例如2023.</p><p>​第二种是插入两位字符串，插入‘00’<del>‘69’相当于是2000</del>2069；插入’70’<del>‘99’相当于是1970</del>1999。‘0’相当于2000。</p><p>​第三种是插入两位数字，基本上和第二种相同。但是0不代表2000，而是0000.</p><ol start="2"><li><strong>TIME类型</strong></li></ol><p>​time类型表示为:”时：分：秒”，标准格式是“HH:MM:SS”，但不一定非要用这种格式。</p><p>​如果插入的是”D HH:MM:SS”,例如，“2 23:50:30”———–&gt;2*24+23 : 50 : 30</p><p>​如果插入是”30” ——-&gt;”00:00:30”</p><p>​如果插入是”11:25”———&gt;”11:25:00”</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发(二):UI</title>
      <link href="/2023/04/10/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E4%BA%8C-UI/"/>
      <url>/2023/04/10/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E4%BA%8C-UI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Android常见界面布局"><a href="#Android常见界面布局" class="headerlink" title="Android常见界面布局"></a>Android常见界面布局</h2><h3 id="界面简介"><a href="#界面简介" class="headerlink" title="界面简介"></a>界面简介</h3><p>界面通常由<strong>容器</strong>和<strong>控件</strong>构成。容器一般是手机屏幕，控件是实现功能的图形元素。</p><p>布局文件是<strong>activity_main.xml</strong>,采用xml格式开发。</p><ol><li>进入activity_main.xml,如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;道坤的第一个程序!&quot;</span></span><br><span class="line">        app:layout_constraintBottom_toBottomOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintEnd_toEndOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230410195043629.png" alt="image-20230410195043629" style="zoom: 33%;"><p><code>layout_width</code>和<code>layout_height</code>有三种参数:</p><ul><li>match_parent 与父容器相匹配</li><li>wrap_content 环绕内容</li><li>fill_heighth  填充内容</li></ul><p>TextView的属性中，距离单位dp与设备硬件无关设置字体大小用sp。</p><h3 id="相对父容器布局"><a href="#相对父容器布局" class="headerlink" title="相对父容器布局"></a>相对父容器布局</h3>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发(一)：环境搭建和第一个程序</title>
      <link href="/2023/04/10/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E4%B8%80-%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/04/10/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E4%B8%80-%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="下载andriod-studio"><a href="#下载andriod-studio" class="headerlink" title="下载andriod-studio"></a>下载andriod-studio</h2><p>下载地址:<a href="https://developer.android.google.cn/studio">Download Android Studio &amp; App Tools - Android Developers (google.cn)</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/87cbe646d6c147a79433db15ac7fe7b0.png" alt="在这里插入图片描述"></p><p>这里我们创建的是AndroidTool目录，创建如上图所示五个子目录。</p><blockquote><p>AndroidStudio 存放Android studio的软件程序的地方，也就是Android studio的安装目录<br>AndroidSDK 存放SDK的地方，包含adb工具等<br>AndroidProject 存放我们写的Android 项目代码，建议把我们所有的源代码放在此目录下方便日后查找<br>AndroidDrive 可选 用来存放我们虚拟机的地方，设置方法参考本文末尾，非必须。默认在C盘下存放。<br>AndroidGradle 可选 用来存放gradle缓存依赖的地方，非必须。默认在C盘下存放</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230410155353110.png" alt="image-20230410155353110" style="zoom: 33%;"><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230410155448728.png" alt="image-20230410155448728" style="zoom: 33%;"><p><strong>选择 Custom</strong></p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230410155545195.png" alt="image-20230410155545195" style="zoom:33%;"><p>接下来点击 next,直到</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/3c4e9f1e076041e4a533b348cf9b38bd.png" alt="在这里插入图片描述" style="zoom: 80%;"><p>有时候上面的无法勾选，正常。重启或者哪天运气好可以勾选，或者修改代理。</p><p>(Android Virtual Device 无法勾选可以先跳过直接点击next)点击next</p><p>一路点击next(记得accept相关协议)</p><h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/196387427e42466f964c30a541901fdc.png" alt="在这里插入图片描述" style="zoom:50%;"><p>下面开始创建hello word项目，点击 new project</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/1d758c8986a649998388d633668b1ba7.png" alt="在这里插入图片描述" style="zoom:50%;"><p>选择empty activity模板，点击next</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/6293b73d1cb543379897998650b59842.png" alt="在这里插入图片描述" style="zoom:67%;"><p>设置项目名称，包名，路径（路径选择我们一开始创建的AndroidProject目录，注意加项目名称，尽量不要有中文），选择语言（java或<a href="https://so.csdn.net/so/search?q=kotlin&spm=1001.2101.3001.7020">kotlin</a>都可以），选择最低支持的Android 版本，这里选择6.0，点击finish</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/800f9d2c935a446f89085090e86a75a7.png" alt="在这里插入图片描述" style="zoom: 50%;"><p>等待下载内容的完成。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/4bdb4b593861478d8fe04b6d458bf428.png" alt="在这里插入图片描述" style="zoom:50%;"><p>点击finish。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/229b38d3d12d42d3b2e0ad2b8fb7a7e8.png" alt="在这里插入图片描述" style="zoom:50%;"><p>等待项目构建完成<br>这里由于是第一次启动，所以需要下载gradle以及Android项目需要引用的包，视网络好坏程度决定等待时间长短</p><p>（解决办法，看文末）</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/28aa161638044b29a3ad93f1d2454d5a.png" alt="在这里插入图片描述" style="zoom:50%;"><p>加载完成。</p><p>初学者进阶操作：<br>下载sdk工具<br>从file-&gt;setting打开下面界面</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/d37a438f2cce4d12bfeec938e56235d2.png" alt="在这里插入图片描述" style="zoom:50%;"><p>这里是下载Android 版本，和sdk构建工具的地方。<br>一般我们只需要下载我们需要的版本和对应的工具，当然也可以全量下载，全量的话估测大概需要500G的硬盘空间。<br>这里演示下载最新的Android版本和构建工具。</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/004004b061ec440584a3bf1fe6edf22d.png" alt="在这里插入图片描述" style="zoom:50%;"><p>勾选对应的版本</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/dc158b4d6e14412bb19804d175ed897b.png" alt="在这里插入图片描述" style="zoom:50%;"><p>勾选对应的版本</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/6e87a7c7ede9449983a063bb86553b6d.png" alt="在这里插入图片描述" style="zoom:50%;"><p>点击ok。如果出现同意协议的界面，则全部点击accept，然后点击next</p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/a90c9928433d4d9dbd2a96d45bf218e8.png" alt="在这里插入图片描述" style="zoom:50%;"><p>等待下载完成。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/e3feab7199724a32bf1eaaee32bb7a0f.png" alt="在这里插入图片描述"></p><p>点击finish</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/49683236c51b4b7b9361c464ef3d072d.png" alt="在这里插入图片描述"></p><p>这里就已经成功地下载下来了，点击ok。</p><h2 id="新建项目墨迹解决方案"><a href="#新建项目墨迹解决方案" class="headerlink" title="新建项目墨迹解决方案"></a>新建项目墨迹解决方案</h2><ol><li><p>针对当前工程文件配置</p><p>Android Studio加载工程之后，在工程根目录有一个build.gradle文件。在”repositories”节点中都添加阿里云的maven，修改之后如下:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line"></span><br><span class="line">      ///ADD START 新增的</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27; &#125;</span><br><span class="line">      ///ADD END</span><br><span class="line"></span><br><span class="line">      google()</span><br><span class="line">      jcenter()</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">      classpath &quot;com.android.tools.build:gradle:4.1.1&quot;</span><br><span class="line"></span><br><span class="line">      // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">      // in the individual module build.gradle files</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">      ///ADD START 新增的</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27; &#125;</span><br><span class="line">      maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27; &#125;</span><br><span class="line">      ///ADD END</span><br><span class="line">      google()</span><br><span class="line">      jcenter()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">  delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>全局修改对所有工程有效<ol><li>找到 .gradle文件的位置</li></ol></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/10101914_61b2b9228753855926.png" alt="Android Studio中gradle文件下载慢的解决方法_移动开发"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/10101914_61b2b9229c96f4915.png" alt="Android Studio中gradle文件下载慢的解决方法_android studio_02"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/10101914_61b2b922b33389371.png" alt="Android Studio中gradle文件下载慢的解决方法_移动开发_03"></p><p>从上图可知,当前我的gradle配置目录为:</p><p><code>C:\Users\Qiang\.gradle</code></p><ol start="2"><li>在gradle配置目录配置阿里云下载源</li></ol><p>在gradle配置目录”C:\Users\Qiang.gradle”中创建文件init.gradle,并将以下内容保存:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        def MY_ALIYUN_REPOSITORY_URL = &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span><br><span class="line">        def MY_ALIYUN_JCENTER_URL = &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url = repo.url.toString()</span><br><span class="line">                if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $MY_ALIYUN_REPOSITORY_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $MY_ALIYUN_JCENTER_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url MY_ALIYUN_REPOSITORY_URL</span><br><span class="line">            url MY_ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>gradle官方下载：<a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a></p><p>参考文章：<a href="https://blog.csdn.net/tao_789456/article/details/118093106"> Android studio安装教程_一纸梦的博客-CSDN博客</a> 和 <a href="https://blog.csdn.net/keyii/article/details/125783576"> Android Studio 安装步骤详细图解_android studio安装教程_Keyii的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/03/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/03/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><h3 id="从斐波那契数列"><a href="#从斐波那契数列" class="headerlink" title="从斐波那契数列"></a>从斐波那契数列</h3><p>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fabinaac</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fabinaac(n-<span class="number">1</span>)+fabinaac(n-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(fabinaac(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>但是递归要解决的子问题太多了，低效。</p><p>非递归，递推版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fabinacc2</span>(<span class="params">n</span>):</span><br><span class="line">    f = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            num = f[-<span class="number">1</span>]+f[-<span class="number">2</span>]</span><br><span class="line">            f.append(num)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><p><strong>动态规划: 递推式+重复子问题</strong></p><h2 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230326135701190.png" alt="image-20230326135701190"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230326140853754.png" alt="image-20230326140853754"></p><h3 id="Python接受数据的方法"><a href="#Python接受数据的方法" class="headerlink" title="Python接受数据的方法"></a>Python接受数据的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、接收一个元素</span><br><span class="line">s = <span class="built_in">input</span>() <span class="comment">#字符串</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="comment">#整数</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、接收两个或三个元素（以空格隔开）</span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">n, m, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、将一行元素放入数组中</span><br><span class="line">num = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、将数组变为整个字符串</span><br><span class="line">s= <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,num))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python的内置方法"><a href="#Python的内置方法" class="headerlink" title="Python的内置方法"></a>Python的内置方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hex</span>()  将数字转换为十六进制字符串</span><br><span class="line"><span class="built_in">oct</span>()  将整数转换成八进制字符串               </span><br><span class="line"><span class="built_in">oct</span>(<span class="built_in">int</span>(<span class="string">&quot;39&quot;</span>,<span class="number">16</span>)) &gt;&gt;&gt;<span class="string">&#x27;0o71&#x27;</span>  十六进制转八进制</span><br><span class="line"><span class="built_in">chr</span>(number)  返回数字对应的<span class="built_in">ascii</span>码值</span><br><span class="line"><span class="built_in">ord</span>(number)  返回数字对应的字母</span><br><span class="line"><span class="built_in">divmod</span>(a,b)  返回(a//b,a%b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h3><p><strong>collections模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、collections.deque([])</span><br><span class="line">        q = collections.deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        q.rotate(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(q)  <span class="comment"># [4, 1, 2, 3]</span></span><br><span class="line">        q.rotate(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(q)  <span class="comment"># [3, 4, 1, 2]</span></span><br><span class="line"><span class="number">2</span>、collections.Counter()</span><br><span class="line">    &gt;&gt;&gt; <span class="keyword">import</span> collections</span><br><span class="line">    &gt;&gt;&gt; collections.Counter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">    Counter(&#123;<span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">3</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>datetime模块</strong></p><p>1、日期增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bt = datetime.date(<span class="number">2000</span>,<span class="number">11</span>,<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(bt)</span><br><span class="line"><span class="number">2000</span>-<span class="number">11</span>-06</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = datetime.timedelta(days=<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">datetime.timedelta(days=<span class="number">100</span>) <span class="comment">#weeks / hours</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a + bt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">datetime.date(<span class="number">2001</span>, <span class="number">2</span>, <span class="number">14</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、给定日期求星期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bt.weekday()：返回weekday，如果是星期一，返回<span class="number">0</span>；如果是星期<span class="number">2</span>，返回<span class="number">1</span>，以此类推；</span><br><span class="line">bt.isoweekday()：返回weekday，如果是星期一，返回<span class="number">1</span>；如果是星期<span class="number">2</span>，返回<span class="number">2</span>，以此类推；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、返回公元公历开始到现在的天数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bt.toordinal()</span><br><span class="line"><span class="number">730430</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>calendar模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>、判断是否为闰年</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">import</span> calendar</span><br><span class="line"> &gt;&gt;&gt; calendar.isleap(<span class="number">2022</span>)</span><br><span class="line"> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、返回两年之间的闰年总数</span><br><span class="line"> &gt;&gt;&gt; calendar.leapdays(<span class="number">2000</span>,<span class="number">2020</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论</title>
      <link href="/2023/03/18/%E6%95%B0%E8%AE%BA/"/>
      <url>/2023/03/18/%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>欧几里得算法——辗转相除法</p><p><code>gcd(a,b)</code></p><p>使用Python内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.gcd(<span class="number">6</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><p><code>（a*b）/math.gcd(a,b)</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保留两位小数，四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="number">3</span>:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字符转成成ascill码</p><p><code>ord</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>ascill码转字符</p><p><code>chr</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>递归与递推</title>
      <link href="/2023/03/10/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/"/>
      <url>/2023/03/10/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310200428612.png" alt="image-20230310200428612"></p><h2 id="递归实现指数型枚举"><a href="#递归实现指数型枚举" class="headerlink" title="递归实现指数型枚举"></a>递归实现指数型枚举</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310113023637.png" alt="image-20230310113023637"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310113236310.png" alt="image-20230310113236310"></p><p>直接输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">st = [<span class="number">0</span>]*<span class="number">16</span>  <span class="comment"># 记录每一个位置的状态，0为还未考虑，1选择，2不选</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u</span>):</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> st[i] == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    st[u] = <span class="number">2</span>   <span class="comment"># 第一分支</span></span><br><span class="line">    dfs(u+<span class="number">1</span>)</span><br><span class="line">    st[u]=<span class="number">0</span> <span class="comment"># 恢复现场</span></span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">1</span>  <span class="comment"># 第二分支</span></span><br><span class="line">    dfs(u+<span class="number">1</span>)</span><br><span class="line">    st[u]=<span class="number">0</span>    <span class="comment"># 恢复现场</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    dfs(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>方案记录:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">path =[]</span><br><span class="line">res = []</span><br><span class="line">st = [<span class="number">0</span>]*<span class="number">16</span>  <span class="comment"># 记录每一个位置的状态，0为还未考虑，1选择，2不选</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u</span>):</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">if</span> u &gt; n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> st[i] == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                path.append(i)</span><br><span class="line">        res.append(path[:])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">2</span>   <span class="comment"># 第一分支</span></span><br><span class="line">    dfs(u+<span class="number">1</span>)</span><br><span class="line">    st[u]=<span class="number">0</span> <span class="comment"># 恢复现场</span></span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">1</span>  <span class="comment"># 第二分支</span></span><br><span class="line">    dfs(u+<span class="number">1</span>)</span><br><span class="line">    st[u]=<span class="number">0</span>    <span class="comment"># 恢复现场</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    dfs(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="递归实现排列型枚举"><a href="#递归实现排列型枚举" class="headerlink" title="递归实现排列型枚举"></a>递归实现排列型枚举</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310195811153.png" alt="image-20230310195811153"></p><p>全排列的理解</p><blockquote><p>例如n&#x3D;3，全排列如下:</p><p>123</p><p>132</p><p>213</p><p>231</p><p>321</p><p>312</p><p>一共6种。</p></blockquote><p>两种顺序: <strong>依次枚举每一个数放到哪个位置</strong>  和 <strong>依次枚举每个位置放哪个数</strong>（以次为例）</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310201230631.png" alt="image-20230310201230631"></p><p>数据范围为1—9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">path = []</span><br><span class="line">res = []</span><br><span class="line">state = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">used = [<span class="literal">False</span>] * <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u</span>):</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">if</span> (u&gt;n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># print(state[i])</span></span><br><span class="line">            path.append(state[i])</span><br><span class="line">        res.append(path[:])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依次枚举每个分支，即当前位置可以填那些数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> used[i]):</span><br><span class="line">            state[u] = i</span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            dfs(u+<span class="number">1</span>)</span><br><span class="line">            state[u] = <span class="number">0</span></span><br><span class="line">            used[i] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    dfs(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="递归实现组合型枚举"><a href="#递归实现组合型枚举" class="headerlink" title="递归实现组合型枚举"></a>递归实现组合型枚举</h2><p>链接:<a href="https://www.acwing.com/problem/content/95/">https://www.acwing.com/problem/content/95/</a></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230310214454286.png" alt="image-20230310214454286"></p><p>列表展现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">path = []</span><br><span class="line">res = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u,m,start</span>):</span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">if</span> (u&gt;m):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># print(state[i])</span></span><br><span class="line">            path.append(state[i])</span><br><span class="line">            <span class="comment"># print(&#x27;数字&#x27;,state[i])</span></span><br><span class="line">        res.append(path[:])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依次枚举每个分支，即当前位置可以填那些数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> used[i]):</span><br><span class="line">            state[u] = i</span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># print(&#x27;这是u&#x27;,u)</span></span><br><span class="line">            dfs(u+<span class="number">1</span>,m,i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            state[u] = <span class="number">0</span></span><br><span class="line">            used[i] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    state = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    used = [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    dfs(<span class="number">1</span>,m,<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>按照题意展现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u,m,start</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (u&gt;m):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(state[i],end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依次枚举每个分支，即当前位置可以填那些数字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start,n+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> used[i]):</span><br><span class="line">            state[u] = i</span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            dfs(u+<span class="number">1</span>,m,i+<span class="number">1</span>)</span><br><span class="line">            state[u] = <span class="number">0</span></span><br><span class="line">            used[i] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    state = [<span class="number">0</span>] * (m+<span class="number">1</span>)</span><br><span class="line">    used = [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line">    dfs(<span class="number">1</span>,m,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="带分数"><a href="#带分数" class="headerlink" title="带分数"></a>带分数</h2><p>题目链接<a href="https://www.dotcpp.com/oj/problem1440.html">蓝桥杯2013年第四届真题-带分数 - C语言网 (dotcpp.com)</a></p><blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>100 可以表示为带分数的形式：100 &#x3D; 3 + 69258 &#x2F; 714。<br>还可以表示为：100 &#x3D; 82 + 3546 &#x2F; 197。<br>注意特征：带分数中，数字1~9分别出现且只出现一次（不包含0）。<br>类似这样的带分数，100 有 11 种表示法。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>从标准输入读入一个正整数N (N&lt; 1000*1000) </p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。<br>注意：不要求输出每个表示，只统计有多少表示法</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100  </span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure></blockquote><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230311102138312.png" alt="image-20230311102138312"></p><p><strong>Python全排列</strong></p><p><strong>permutations</strong>（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itertools.permutations(iterable, r = <span class="literal">None</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>返回由 <a href="https://so.csdn.net/so/search?q=iterable&spm=1001.2101.3001.7020">iterable</a>序列中的元素生成的长度为r的排列，r默认设置为 iterable 的长度</li><li>如果有相同的元素，不同位置的元素被认为不同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line">s = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(permutations(s)))</span><br></pre></td></tr></table></figure><p>用Python此方法会超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment"># 首先对1-9进行全排列</span></span><br><span class="line">s = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">res = <span class="built_in">list</span>(permutations(s))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">for</span> it_a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item)):</span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span>.join(item[:it_a+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        list_b = item[it_a+<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">for</span> it_b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_b)-<span class="number">1</span>):</span><br><span class="line">            b = <span class="string">&#x27;&#x27;</span>.join(list_b[<span class="number">0</span>:it_b+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            list_c = list_b[it_b+<span class="number">1</span>:]</span><br><span class="line">            c = <span class="string">&#x27;&#x27;</span>.join(list_c)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sum</span> = a+<span class="string">&#x27;+&#x27;</span>+b+<span class="string">&#x27;/&#x27;</span>+c</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> n ==<span class="built_in">eval</span>(<span class="built_in">sum</span>):</span><br><span class="line">                cnt = cnt+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二:"></a>思路二:</h3><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230311102640527.png" alt="image-20230311102640527"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构-图</title>
      <link href="/2023/02/20/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
      <url>/2023/02/20/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>dff</p><h2 id="图的抽象数据类型"><a href="#图的抽象数据类型" class="headerlink" title="图的抽象数据类型"></a>图的抽象数据类型</h2><ul><li><input disabled type="checkbox"> <code>Graph()</code>新建一个空图</li><li><input disabled type="checkbox"> <code>addVertex(vert)</code>向图中添加一个顶点实例</li><li><input disabled type="checkbox"> <code>addEdge(fromVert,toVert)</code>添加一条有向边，用于连接fromVert,toVert</li><li><input disabled type="checkbox"> <code>addEdge(fromVert,toVert,weight)</code>向图中添加一条带权重weight的有向边，用于连接顶点fromVert,toVert。</li><li><input disabled type="checkbox"> <code>getVertex(vertKey)</code>在图中找到名为 vertKey 的顶点。</li><li><input disabled type="checkbox"> <code>getVertices()</code>以列表形式返回图中所有顶点。</li><li><input disabled type="checkbox"> in 通过 vertex in graph 这样的语句，在顶点存在时返回 True，否则返回 False。</li></ul><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>要实现图，最简单的方式就是使用二维矩阵。在矩阵实现中，每一行和每一列都表示图中的</p><p>一个顶点。第 <em>v</em> 行和第 <em>w</em> 列交叉的格子中的值表示从顶点 <em>v</em> 到顶点 <em>w</em> 的边的权重。如果两个顶点</p><p>被一条边连接起来，就称它们是相邻的。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230220231935437.png" alt="image-20230220231935437"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230220231959627.png" alt="image-20230220231959627"></p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>为了实现稀疏连接的图，更高效的方式是使用邻接表。在邻接表实现中，我们为图对象的所有顶点保存一个主列表，同时为每一个顶点对象都维护一个列表，其中记录了与它相连的顶点。</p><p>在对 Vertex 类的实现中，我们使用字典（而不是列表），字典的键是顶点，值是权重。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230220231935437.png" alt="image-20230220231935437"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230220233610848.png" alt="image-20230220233610848"></p><p>邻接表的优点是能够紧凑地表示稀疏图。此外，邻接表也有助于方便地找到与某一个顶点相连的其他所有顶点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程基础知识</title>
      <link href="/2023/01/03/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/01/03/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h2><p>Shell相当于翻译官，作为用户和Linux系统内部的通信媒介。</p><h3 id="Shell-的使用"><a href="#Shell-的使用" class="headerlink" title="Shell 的使用"></a>Shell 的使用</h3><ol><li><p>查看当前的shell：echo $SHELL(默认是Bash)</p></li><li><p>编写脚本：vim example.sh</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#举个例子,建议.sh结尾，表示一个脚本文件</span></span><br><span class="line">Pwd</span><br><span class="line">Ls -al</span><br></pre></td></tr></table></figure><p>3.执行脚本:<code>bash example.sh</code></p><h3 id="Shell的变量"><a href="#Shell的变量" class="headerlink" title="Shell的变量"></a>Shell的变量</h3><ul><li>​    系统变量：<code>$HOME</code> , <code>$PWD </code>, <code>$SHELL</code> , <code>$USER</code>等</li></ul><p>​           eg : <code>echo $HOME</code></p><p>​           查看当前shell中所有变量的值: set</p><ul><li>​    自定义变量：</li></ul><p>​           定义变量： 变量&#x3D;值    （等号两边不要有空格，默认是字符串）</p><p>​                  eg : c&#x3D;1+1</p><ul><li>撤销变量：unset 变量</li></ul><p>​                  Eg: unset c</p><ul><li><p>声明静态变量：readonly 变量   (不能unset撤销)</p></li><li><p>全局变量：export 变量名</p></li></ul><p>​    </p><ul><li>​    特殊变量</li></ul><ol><li>特殊变量$n</li></ol><p>​n为数字，$0是脚本名称，$1-$9代表第一到第九个参数，十以上的参数要大括号，列入${10}</p><ol start="2"><li>特殊变量 $#</li></ol><p>​获取所有输入的参数(常用于循环)</p><ol start="3"><li>特殊变量 $* , $@</li></ol><p>​$* ：表示命令行中所有参数，$*把所有参数看成一个整体</p><p>​$@：表示命令行中所有参数，$@把每个参数区别对待</p><p>例如：</p><p>识别参数</p><p>​     Vim example.sh</p><pre><code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> “当前脚本名称为<span class="variable">$0</span>”</span><br><span class="line"><span class="built_in">echo</span> “总共有<span class="variable">$#</span>个参数，分别是$*。”</span><br><span class="line"><span class="built_in">echo</span> “第一个参数为<span class="variable">$1</span>,第五个为<span class="variable">$5</span>。”</span><br><span class="line"><span class="built_in">echo</span> “所有参数有$*,<span class="variable">$@</span>”</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li>特殊变量 $?</li></ol><p>​$? : 最后一次执行的命令的返回状态，正确执行后返回0，不正确执行返回非0。</p><p>​    </p><h3 id="Shell的运算符"><a href="#Shell的运算符" class="headerlink" title="Shell的运算符"></a>Shell的运算符</h3><ol><li><p>$[运算式]</p></li><li><p>expr +,-,*,&#x2F; ,% 加减乘除，取余 (注意空格)</p></li></ol><p>​eg: 计算2+3 ：expr 2 + 3</p><p>​计算（2+3）X 4 : expr <code>expr 2 + 3 </code> * 4</p><p>​               S &#x3D; $[(2+3)*4]</p><h3 id="Shell的条件判断"><a href="#Shell的条件判断" class="headerlink" title="Shell的条件判断"></a>Shell的条件判断</h3><p>用条件测试语法判断表达式是否成立，条件成立就返回0；不成立就返回1。</p><p>测试语句表达式： [ 条件表达式 ] (注意红色为空格)</p><p>条件测试语句分为四种：</p><p>​    文件测试语句；</p><p>​    逻辑测试语句；(&amp;&amp;, ||, ! )</p><p>​    整数值比较语句；</p><p>​    字符串比较语句。</p><h4 id="文件测试所用的参数"><a href="#文件测试所用的参数" class="headerlink" title="文件测试所用的参数"></a>文件测试所用的参数</h4><table><thead><tr><th><strong>-d</strong></th><th>测试文件是否为目录</th></tr></thead><tbody><tr><td><strong>-e</strong></td><td>测试文件是否存在</td></tr><tr><td><strong>-f</strong></td><td>判断是否为一般文件</td></tr><tr><td><strong>-r</strong></td><td>测试当前用户是否有权限读取</td></tr><tr><td><strong>-w</strong></td><td>测试当前用户是否有权限写入</td></tr><tr><td><strong>-x</strong></td><td>测试当前用户是否有权限运行</td></tr></tbody></table><p>例如: <code>[ -d example.sh ] &amp;&amp; echo $?</code></p><p>​    <code>echo $?</code> 返回上条语句的返回值</p><p>​    用&amp;&amp;连接，类似操作有“或||”，“非！”。</p><h4 id="整数比较运算符"><a href="#整数比较运算符" class="headerlink" title="整数比较运算符"></a>整数比较运算符</h4><table><thead><tr><th><strong>操作</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>-eq(equal)</strong></td><td>是否等于</td></tr><tr><td><strong>-ne(not  equal)</strong></td><td>是否不等于</td></tr><tr><td><strong>-gt(greater than)</strong></td><td>是否大于</td></tr><tr><td><strong>-lt(less  than)</strong></td><td>是否小于</td></tr><tr><td><strong>-ge</strong></td><td>是否大于等于</td></tr><tr><td><strong>-le</strong></td><td>是否小于等于</td></tr></tbody></table><h4 id="字符串比较运算符"><a href="#字符串比较运算符" class="headerlink" title="字符串比较运算符"></a>字符串比较运算符</h4><p>&#x3D; 比较字符串是否相同</p><p>!&#x3D; 比较字符串是否不同</p><p>-z 判断字符串内容是否为空</p><h3 id="Shell的流程控制"><a href="#Shell的流程控制" class="headerlink" title="Shell的流程控制"></a>Shell的流程控制</h3><p>if控制语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件测试操作</span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span> 命令序列</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> 命令序列</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p> 嵌套if</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件1</span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span> 命令1</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> 条件2</span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span> 命令2</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"> 命令3</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>for条件循环语句</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 取值列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">命令序列</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>while条件循环语句</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">While 条件</span><br><span class="line"></span><br><span class="line">Do</span><br><span class="line"></span><br><span class="line"> 命令序列</span><br><span class="line"></span><br><span class="line">Done</span><br></pre></td></tr></table></figure><p>Case测试语句</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Case 变量值 <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">模式1）</span><br><span class="line"></span><br><span class="line">命令1</span><br><span class="line"></span><br><span class="line">模式2）</span><br><span class="line"></span><br><span class="line"> 命令2</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line"> 默认命令</span><br><span class="line"></span><br><span class="line">Esac</span><br></pre></td></tr></table></figure><p>Read读取控制台输入</p><p>​    基本语法: read (选项) (参数)</p><p>​           选项: -p :指定读取值的提示符</p><p>​               -t ：指定读取值的等待时间</p><p>​           参数：</p><p>​               变量：指定读取值的变量名</p><p>​    </p><p>​    例如：提示7s内，读取控制台输入名称</p><p>​      <code> read -t 7 -p “请7S内输入数据” NAME</code></p><p>函数</p><p>​    系统函数</p><ol><li>basename 切断路径</li></ol><p>例如: basename &#x2F;home&#x2F;sds&#x2F;example.txt</p><p>​    结果是：example.txt</p><ol start="2"><li>dirname 保留路径</li></ol><p>例如: basename &#x2F;home&#x2F;sds&#x2F;example.txt</p><p>结果是： &#x2F;home&#x2F;sds</p><p>​    自定义函数</p><p>​       需要先声明函数</p><p>​       基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">Action;</span><br><span class="line"></span><br><span class="line"> [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="built_in">sum</span>（）</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">S=0;</span><br><span class="line"></span><br><span class="line">S=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</span><br><span class="line"></span><br><span class="line">Echo <span class="variable">$s</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p “输入第一个数：”  <span class="variable">$p1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p “输入第二个数： “  <span class="variable">$p2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> <span class="variable">$p1</span> <span class="variable">$p2</span></span><br></pre></td></tr></table></figure><h3 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h3><ol><li>cut</li></ol><p><code>cut -d “ ” -f 1 example.txt</code> (间隔符是“ ”，提取example.txt第一列)</p><p>  <img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103154839487.png" alt="image-20230103154839487"></p><p>​    </p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103154858172.png" alt="image-20230103154858172"></p><ol start="2"><li>sed</li></ol><p>sed 是一种流编辑器，一次处理一行内容。但是不改变文件内容，除非重定向。</p><p>语法 ： sed [-e] ‘command’ filename</p><p>-e :在指令列模式上进行sed的动作编辑</p><p>Command:</p><p>​        a : 新增，a的后面可以接字符串，在下一行出现</p><p>​        d : 删除</p><p>​      s ：查找并替换 </p><p>例如：</p><p>Eg 1:把lushan放入example.txt的第二行后面</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103154935521.png" alt="image-20230103154935521"></p><p>​         Eg 2:把example.txt所有含有I的行删除</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103154949305.png" alt="image-20230103154949305"></p><p>Eg 3 :把example.txt中的I全部替换成you (+g即为全部替换)</p><p> <img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103155002195.png" alt="image-20230103155002195"></p><p>​         注意原本文件并没有发生改变！</p><ol start="3"><li><p>awk</p></li><li><p>sort</p></li></ol><p>sort 对于文本内容进行排序</p><p>用法 ：sort [参数] 文件名称</p><p>参数如下：</p><p>-f 忽略大小写</p><p>-b 忽略缩进与空格</p><p>-n 以数值型进行排序</p><p>-r 反向排序</p><p>-u 去除重复行</p><p>-t 指定间隔符</p><p>-k 设置字段范围</p><p>默认是字母顺序进行排序</p><h3 id="计划任务服务程序"><a href="#计划任务服务程序" class="headerlink" title="计划任务服务程序"></a>计划任务服务程序</h3><p>一次性计划任务</p><p>长久性计划任务</p><p>一次性计划任务用at命令，格式：<code>at 时间</code></p><p>At 的参数</p><table><thead><tr><th><strong>-f</strong></th><th><strong>指定包含命令的任务文件</strong></th></tr></thead><tbody><tr><td><strong>-q</strong></td><td>指定新任务名称</td></tr><tr><td><strong>-l</strong></td><td>显示待执行任务列表</td></tr><tr><td><strong>-d</strong></td><td>删除指定待执行任务</td></tr><tr><td><strong>-m</strong></td><td>任务执行后给用户发邮件</td></tr></tbody></table><p>Atrm序号 ：删除命令</p><p>倒计时命令：<code>at now +2 MINUTE（HOUR,DAY,MONTH）</code></p><p>长久性命令crontab</p><p>参数</p><p>-e 编辑计划任务</p><p>-u 指定用户名称</p><p>-l 列出任务列表</p><p>-r 删除计划任务</p><p>参数格式：分，时，日，月，星期，命令（没有设置的时间直接用*代替，0，7均为星期日）；</p><p>在线练习：<a href="https://crontab.guru/">https://crontab.guru/</a></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本随机生成三位数</title>
      <link href="/2023/01/03/Shell%E8%84%9A%E6%9C%AC%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%89%E4%BD%8D%E6%95%B0/"/>
      <url>/2023/01/03/Shell%E8%84%9A%E6%9C%AC%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%89%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>对数n取余，余应为0—(n-1)范围。</p><p>我们想要产生0-25范围内的数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 26</span><br></pre></td></tr></table></figure><p>如果想得到1–68范围内的数，可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 68 + 1</span><br></pre></td></tr></table></figure><ul><li>前面可以得到最小为0，最大为67的随机数，再加上1，很自然的就可以得到最大为1，最小为68的数了。</li></ul><p>如果想得到6–87范围内的数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 82 + 6</span><br></pre></td></tr></table></figure><ul><li>前面可以得到最小为0，最大为81的随机数，再加上6，很自然的就可以得到最大为87，最小为6的数了</li></ul><h3 id="生成三位数"><a href="#生成三位数" class="headerlink" title="生成三位数"></a>生成三位数</h3><p>三位数，也就是100-999，从上面的知识，我们可以得出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 900 + 100</span><br></pre></td></tr></table></figure><p>前面可以得到最小为0，最大为899的随机数，再加上100，很自然的就可以得到最大为999，最小为100的数了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10000&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  num=$[<span class="variable">$RANDOM</span>%900+100]</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103143646290.png" alt="image-20230103143646290"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>上面的语句可以执行。这种格式的for循环只能接受数字。</p><p>如果接受变量，则会无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="variable">$1</span>..<span class="variable">$2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>为此，可以使用C语言格式的循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=j; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>也就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;生成多少个3位数呢？请输入:&quot;</span> count</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;结果:&quot;</span></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=count;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  num=$[<span class="variable">$RANDOM</span>%900+100]</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103145004617.png" alt="image-20230103145004617"></p><h2 id="结果存入文件"><a href="#结果存入文件" class="headerlink" title="结果存入文件"></a>结果存入文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;生成多少个3位数呢？请输入:&quot;</span> count</span><br><span class="line"><span class="comment">#echo $count</span></span><br><span class="line"><span class="comment">#touch num.txt</span></span><br><span class="line"><span class="comment">#txt=num.txt</span></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=count;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  num=$[<span class="variable">$RANDOM</span>%900+100]</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$num</span>\t&quot;</span> &gt;&gt; txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103145726505.png" alt="image-20230103145726505"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103145629377.png" alt="image-20230103145629377"></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas的使用</title>
      <link href="/2023/01/03/Pandas%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/03/Pandas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Pandas介绍"><a href="#Pandas介绍" class="headerlink" title="Pandas介绍"></a>Pandas介绍</h2><p>pandas 名字衍生自术语 “panel data”（面板数据）和 “Python data analysis”（Python 数据分析）。</p><p>Pandas 一个强大的分析结构化数据的工具集，基础是 <a href="https://www.runoob.com/numpy/numpy-tutorial.html">Numpy</a>（提供高性能的矩阵运算）。</p><p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。</p><p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。</p><p>Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p><h3 id="Pandas-应用"><a href="#Pandas-应用" class="headerlink" title="Pandas 应用"></a>Pandas 应用</h3><p>Pandas 的主要数据结构是 Series （一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong><a href="https://www.runoob.com/pandas/pandas-series.html">Series</a></strong> 是一种类似于一维数组的对象，它由一组数据（各种Numpy数据类型）以及一组与之相关的数据标签（即索引）组成。</p><p><strong>DataFrame</strong> 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li>Pandas 官网 <a href="https://pandas.pydata.org/">https://pandas.pydata.org/</a></li><li>Pandas 源代码：<a href="https://github.com/pandas-dev/pandas">https://github.com/pandas-dev/pandas</a></li></ul><h2 id="Pandas安装"><a href="#Pandas安装" class="headerlink" title="Pandas安装"></a>Pandas安装</h2><p>安装命令:<code>pip install pandas</code></p><p>导入库:<code>**import** pandas as pd</code>  习惯</p><p>查看版本:<code>pd.__version__ </code></p><h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;阿福&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;年龄&#x27;</span>:[<span class="number">18</span>,<span class="number">20</span>,<span class="number">21</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103101459275.png" alt="image-20230103101459275"></p><h2 id="Pandas-数据结构-Series"><a href="#Pandas-数据结构-Series" class="headerlink" title="Pandas 数据结构 - Series"></a>Pandas 数据结构 - Series</h2><p>Pandas Series 类似表格中的一个列（column），类似于一维数组，可以保存任何数据类型。</p><p>Series 由索引（index）和列组成，函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.Series( data, index, dtype, name, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray 类型)。</li><li><strong>index</strong>：数据索引标签，如果不指定，默认从 0 开始。</li><li><strong>dtype</strong>：数据类型，默认会自己判断。</li><li><strong>name</strong>：设置名称。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103102000091.png" alt="image-20230103102000091"></p><h3 id="按照索引输出"><a href="#按照索引输出" class="headerlink" title="按照索引输出"></a>按照索引输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">myData = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;指定索引&#x27;</span>,myData[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103102207333.png" alt="image-20230103102207333"></p><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">myData = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br><span class="line"><span class="comment"># 修改索引</span></span><br><span class="line">myData = pd.Series(data,index=[<span class="string">&#x27;阿福1&#x27;</span>,<span class="string">&#x27;阿福2&#x27;</span>,<span class="string">&#x27;阿福3&#x27;</span>,<span class="string">&#x27;阿福4&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103103120761.png" alt="image-20230103103120761"></p><h3 id="创建字典形式的Series"><a href="#创建字典形式的Series" class="headerlink" title="创建字典形式的Series"></a>创建字典形式的Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="number">1</span>:<span class="string">&#x27;道坤&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">&quot;小璇&quot;</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="string">&#x27;阿福&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myData = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103103735264.png" alt="image-20230103103735264"></p><p>增加一个name 属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="number">1</span>:<span class="string">&#x27;道坤&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">&quot;小璇&quot;</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="string">&#x27;阿福&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个name属性</span></span><br><span class="line">myData = pd.Series(data,name=<span class="string">&#x27;个人数据&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103103920610.png" alt="image-20230103103920610"></p><h2 id="Pandas-数据结构-DataFrame"><a href="#Pandas-数据结构-DataFrame" class="headerlink" title="Pandas 数据结构 - DataFrame"></a>Pandas 数据结构 - DataFrame</h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/pandas-DataStructure.png"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/df-dp.png"></p><p>DataFrame 构造方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray、series, map, lists, dict 等类型)。</li><li><strong>index</strong>：索引值，或者可以称为行标签。</li><li><strong>columns</strong>：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li><li><strong>dtype</strong>：数据类型。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><p>Pandas DataFrame 是一个二维的数组结构，类似二维数组。</p><h3 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;道坤&#x27;</span>,<span class="number">20</span>],</span><br><span class="line">    [<span class="string">&#x27;小璇&#x27;</span>,<span class="number">18</span>],</span><br><span class="line">    [<span class="string">&#x27;阿福&#x27;</span>,<span class="number">20</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data,columns=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103105550436.png" alt="image-20230103105550436"></p><h3 id="使用-ndarrays-创建"><a href="#使用-ndarrays-创建" class="headerlink" title="使用 ndarrays 创建"></a>使用 ndarrays 创建</h3><p>ndarray 的长度必须相同， 如果传递了 index，则索引的长度应等于数组的长度。如果没有传递索引，则默认情况下，索引将是range(n)，其中n是数组长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;道坤&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;年龄&#x27;</span>:[<span class="number">20</span>,<span class="number">18</span>,<span class="number">19</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data,columns=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103105829154.png" alt="image-20230103105829154"></p><h3 id="使用字典创建"><a href="#使用字典创建" class="headerlink" title="使用字典创建"></a>使用字典创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;C文&#x27;</span>,  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data,columns=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(myData)</span><br></pre></td></tr></table></figure><p>没有输入的值为 <code>NaN</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103110251797.png" alt="image-20230103110251797"></p><h4 id="返回一行数据"><a href="#返回一行数据" class="headerlink" title="返回一行数据"></a>返回一行数据</h4><p>Pandas 可以使用 <strong>loc</strong> 属性返回指定行的数据，如果没有设置索引，第一行索引为 <strong>0</strong>，第二行索引为 <strong>1</strong>，以此类推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;C文&#x27;</span>,  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data,columns=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>])</span><br><span class="line"><span class="comment"># 用 loc 输入索引</span></span><br><span class="line"><span class="built_in">print</span>(myData.loc[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 也可以修改索引</span></span><br><span class="line"><span class="comment"># myData = pd.DataFrame(data,index=[1,2,3])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103113530024.png" alt="image-20230103113530024"></p><p><strong>注意：</strong>返回结果其实就是一个 Pandas Series 数据。</p><h4 id="返回多行数据"><a href="#返回多行数据" class="headerlink" title="返回多行数据"></a>返回多行数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;C文&#x27;</span>,  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">myData = pd.DataFrame(data,columns=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>])</span><br><span class="line"><span class="comment"># 用 loc 接受一个参数，所以多行的时候，用 [ ]</span></span><br><span class="line"><span class="built_in">print</span>(myData.loc[[<span class="number">0</span>,<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230103121411554.png" alt="image-20230103121411554"></p><h3 id="Pandas-CSV-文件"><a href="#Pandas-CSV-文件" class="headerlink" title="Pandas CSV 文件"></a>Pandas CSV 文件</h3><p>CSV（Comma-Separated Values，逗号分隔值，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。</p><p>CSV 是一种通用的、相对简单的文件格式，被用户、商业和科学广泛应用。</p><p>以info.csv为例（我这里使用的是gbk编码）。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230107123319270.png" alt="image-20230107123319270"></p><h4 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h4><p>用<code>to_string()</code>返回 DataFrame 类型的数据，如果不使用该函数，则输出数据的💴5行，和后5行，中间部分用….代替。这里我们的数据不够，无法体现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;info.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.to_string())</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230107124956156.png" alt="image-20230107124956156"></p><p>除了<code>to_string()</code>意外，还有<code>head</code>方法输出前几行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;info.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.head(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230107130018018.png" alt="image-20230107130018018"></p><p><code>tail</code>返回末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;info.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.tail(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230107130151945.png" alt="image-20230107130151945"></p><p><code>info()</code>方法返回表格的一些基本信息。</p><h4 id="写入CSV"><a href="#写入CSV" class="headerlink" title="写入CSV"></a>写入CSV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个字段</span></span><br><span class="line">name = [<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;道坤&#x27;</span>]</span><br><span class="line">skill =[<span class="string">&#x27;吃饭&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;计算机一级&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dictInfo =&#123;<span class="string">&#x27;姓名&#x27;</span>:name,<span class="string">&#x27;技能&#x27;</span>:skill&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据转换成pd类型</span></span><br><span class="line">data = pd.DataFrame(dictInfo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;skill.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230107125705273.png" alt="image-20230107125705273"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python读写CSV文件</title>
      <link href="/2023/01/02/Python%E8%AF%BB%E5%86%99CSV%E6%96%87%E4%BB%B6/"/>
      <url>/2023/01/02/Python%E8%AF%BB%E5%86%99CSV%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>python提供了大量的库，可以非常方便的进行各种操作，现在把python中实现读写csv文件的方法使用程序的方式呈现出来。</p><p>在编写python程序的时候需要csv模块或者pandas模块，其中csv模块使不需要重新下载安装的，pandas模块需要按照对应的python版本安装。</p><p>安装pandas的方式是：<code>sudo pip install pandas</code></p><p>在这里，要注意，新建的文件名字不能是<code>csv.py</code>,否则方法会用不了，别问我怎么知道的…</p><p>复习一下读写模式</p><table><thead><tr><th>模式</th><th align="left">作用</th></tr></thead><tbody><tr><td>r</td><td align="left">以读方式打开文件，可读取文件信息</td></tr><tr><td>w</td><td align="left">已写方式打开文件，可向文件写入信息。如文件存在，则清空，再写入</td></tr><tr><td>a</td><td align="left">以追加模式打开文件，打开文件可指针移至末尾，文件不存在则创建</td></tr><tr><td>a+</td><td align="left">以读写方式打开文件，文件指针移至末尾</td></tr><tr><td>r+</td><td align="left">以读写方式打开文件，可对文件进行读和写操作</td></tr><tr><td>w+</td><td align="left">消除文件内容，以读写方式打开文件</td></tr><tr><td>b</td><td align="left">以二进制打开文件</td></tr></tbody></table><h2 id="用列表形式读写CSV"><a href="#用列表形式读写CSV" class="headerlink" title="用列表形式读写CSV"></a>用列表形式读写CSV</h2><h3 id="列表写入"><a href="#列表写入" class="headerlink" title="列表写入"></a>列表写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;电话&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [[<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;181&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;191&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;171&#x27;</span>],</span><br><span class="line">        ]</span><br><span class="line"><span class="comment"># 设置newline,否则两行之间会空一行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;个人信息.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csFile:</span><br><span class="line">    <span class="comment"># 写</span></span><br><span class="line">    writer=csv.writer(csFile)</span><br><span class="line">    <span class="comment"># 设置第一行标题头</span></span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    <span class="comment"># 将数据写入</span></span><br><span class="line">    writer.writerows(data)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102182334870.png" alt="image-20230102182334870"></p><h3 id="列表读取"><a href="#列表读取" class="headerlink" title="列表读取"></a>列表读取</h3><blockquote><p>语法：csv.reader(f, delimiter&#x3D;‘,’)<br>reader为生成器，每次读取一行，每行数据为列表格式，可以通过delimiter参数指定分隔符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 获取标题</span></span><br><span class="line">    header = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    <span class="comment"># 遍历数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102182556967.png" alt="image-20230102182556967"></p><h2 id="用字典的形式读写"><a href="#用字典的形式读写" class="headerlink" title="用字典的形式读写"></a>用字典的形式读写</h2><h3 id="字典形式写入"><a href="#字典形式写入" class="headerlink" title="字典形式写入"></a>字典形式写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;道坤&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;阿福&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;信息.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># 字典形式</span></span><br><span class="line">    writer =csv.DictWriter(fp,header)</span><br><span class="line">    <span class="comment"># 写入标题</span></span><br><span class="line">    writer.writeheader()</span><br><span class="line">    <span class="comment"># 将数据写入</span></span><br><span class="line">    writer.writerows(data)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102183125125.png" alt="image-20230102183125125"></p><h3 id="字典形式读取"><a href="#字典形式读取" class="headerlink" title="字典形式读取"></a>字典形式读取</h3><blockquote><p>语法：csv.DicReader(f, delimiter&#x3D;‘,’)<br>直接将标题和每一列数据组装成有序字典（OrderedDict）格式，无须再单独读取标题行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;信息.csv&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102183300926.png" alt="image-20230102183300926"></p><h2 id="联合excel查看"><a href="#联合excel查看" class="headerlink" title="联合excel查看"></a>联合excel查看</h2><p>编码格式要改成 <code>gbk</code>,必须是以列表的形式。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102184642610.png" alt="image-20230102184642610"></p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 获取标题</span></span><br><span class="line">    header = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    <span class="comment"># 遍历数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102184728954.png" alt="image-20230102184728954"></p><h3 id="多行写入"><a href="#多行写入" class="headerlink" title="多行写入"></a>多行写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> csFile:</span><br><span class="line">    writer = csv.writer(csFile)</span><br><span class="line">    <span class="comment"># 多行写入</span></span><br><span class="line">    writer.writerows([[<span class="string">&#x27;阿福1&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;152&#x27;</span>],[<span class="string">&#x27;阿福2&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;151&#x27;</span>],[<span class="string">&#x27;阿福3&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;159&#x27;</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 获取标题</span></span><br><span class="line">    header = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    <span class="comment"># 遍历数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102185355534.png" alt="image-20230102185355534"></p><p>为什么会有空行腻？因为写入的时候没有设置<code>newline</code>,两行之间会空一行。</p><h3 id="读取某行、某列"><a href="#读取某行、某列" class="headerlink" title="读取某行、某列"></a>读取某行、某列</h3><h4 id="遍历每一行"><a href="#遍历每一行" class="headerlink" title="遍历每一行"></a>遍历每一行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 遍历每一行，生成列表</span></span><br><span class="line">    rows = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><h4 id="读取指定列"><a href="#读取指定列" class="headerlink" title="读取指定列"></a>读取指定列</h4><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 遍历每一行，生成列表</span></span><br><span class="line">    rows = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="built_in">print</span>(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102190323256.png" alt="image-20230102190323256"></p><h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 遍历每一行，生成列表</span></span><br><span class="line">    column = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">    <span class="built_in">print</span>(column)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102191445235.png" alt="image-20230102191445235"></p><h5 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h5><blockquote><p>使用DictReader,和reader函数类似,接收可迭代的对象,能返回一个可迭代的对象,能返回一个生成器,但是返回的每一个单元格都放在一个字典的值内,而这个字典的键则是这个单元格的标题.用下面的代码可以看到DictReader的结构</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.DictReader(csFile)</span><br><span class="line">    <span class="comment"># 遍历所有，生成字典</span></span><br><span class="line">    column = [row[<span class="string">&#x27;姓名&#x27;</span>] <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;指定列&quot;</span>,column)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102192134882.png" alt="image-20230102192134882"></p><h4 id="读取指定元素"><a href="#读取指定元素" class="headerlink" title="读取指定元素"></a>读取指定元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    <span class="comment"># 遍历每一行，生成列表</span></span><br><span class="line">    rows = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">    row_list = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        row_list.append(row)</span><br><span class="line">    <span class="comment"># 查看指定行</span></span><br><span class="line">    <span class="built_in">print</span>(row_list[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 查看指定元素</span></span><br><span class="line">    <span class="built_in">print</span>(row_list[<span class="number">1</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102191117063.png" alt="image-20230102191117063"></p><h3 id="新增一列"><a href="#新增一列" class="headerlink" title="新增一列"></a>新增一列</h3><p>取出标题，内容。然后利用列表的特性新增。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;个人信息.csv&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> csFile:</span><br><span class="line">    reader = csv.reader(csFile)</span><br><span class="line">    data = [raw <span class="keyword">for</span> raw <span class="keyword">in</span> reader]</span><br><span class="line">    <span class="comment"># 取出标题</span></span><br><span class="line">    header = data[<span class="number">0</span>]</span><br><span class="line">    header.append(<span class="string">&#x27;成绩&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出内容</span></span><br><span class="line">    data = data[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        i.append(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置newline,否则两行之间会空一行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;个人信息1.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csFile:</span><br><span class="line">    <span class="comment"># 写</span></span><br><span class="line">    writer=csv.writer(csFile)</span><br><span class="line">    <span class="comment"># 设置第一行标题头</span></span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    <span class="comment"># 将数据写入</span></span><br><span class="line">    writer.writerows(data)</span><br></pre></td></tr></table></figure><p>参考资料:<a href="https://blog.csdn.net/weixin_46277553/article/details/124383210">(108条消息) 在python中读取和写入CSV文件（你真的会吗？）_苏凉.py的博客-CSDN博客_python csv</a></p><p>和<a href="https://www.jb51.net/article/164692.htm">python读写csv文件方法详细总结_python_脚本之家 (jb51.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> CSV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CSV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib数据可视化</title>
      <link href="/2023/01/02/Matplotlib%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/01/02/Matplotlib%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="Matplotlib介绍"><a href="#Matplotlib介绍" class="headerlink" title="Matplotlib介绍"></a>Matplotlib介绍</h2><p> Matplotlib 能够创建多数类型的图表，如条形图，散点图，条形图，饼图，堆叠图，3D 图和地图图表。</p><p>安装<code>pip install  matplotlib</code></p><p>导入模块<code>import matplotlib.pyplot as plt</code></p><h3 id="绘制第一个图"><a href="#绘制第一个图" class="headerlink" title="绘制第一个图"></a>绘制第一个图</h3><p>.plot(x,y)接受两个参数，分别是x坐标,y坐标。下面有三个坐标，即(1,7),(2,8),(3,9)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Pycharm运行</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102160340123.png" alt="image-20230102160340123"></p><p>如果你是用IDLE打开</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102160812307.png" alt="image-20230102160812307"></p><p>那么这里会有一些按钮可以使用，摸索一下很快就能了解作用。</p><h2 id="图例、标题和标签"><a href="#图例、标题和标签" class="headerlink" title="图例、标题和标签"></a>图例、标题和标签</h2><p>在这里，我们要了解一个概念，轴域(Axes) 就是两条坐标轴围成的区域。</p><p>这里中文标题会出现问题，必须加一条语句来显示中文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]   <span class="comment"># 用来显示中文</span></span><br></pre></td></tr></table></figure><p>如果 负号 不显示，那再加一条语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 用来显示负号</span></span><br></pre></td></tr></table></figure><p>如果加了上述语句，还是无效，那就是系统缺少这个字体，需要下载对应的字体。</p><p>图例、标题和标签展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"><span class="comment"># x为学号，y为得分</span></span><br><span class="line">x1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y1 = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">x2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y2 = [<span class="number">10</span>,<span class="number">14</span>,<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出两个线条</span></span><br><span class="line"><span class="comment"># label为图例</span></span><br><span class="line">plt.plot(x1,y1,label=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">plt.plot(x2,y2,label=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x,y坐标轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;学号&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;得分&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计图的标题</span></span><br><span class="line">plt.title(<span class="string">&#x27;成绩分布&#x27;</span>)</span><br><span class="line">plt.legend()    <span class="comment"># 生成默认图例</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用<code>plt.xlabel</code>和<code>plt.ylabel</code>，我们可以为这些相应的轴创建标签。 接下来，我们可以使用<code>plt.title</code>创建图的标题，然后我们可以使用<code>plt.legend()</code>生成默认图例。 结果图如下</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102163310050.png" alt="image-20230102163310050"></p><h2 id="条形统计图和直方图"><a href="#条形统计图和直方图" class="headerlink" title="条形统计图和直方图"></a>条形统计图和直方图</h2><h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><p>使用xticks与yticks（设置坐标轴刻度）、xlabel与ylabel（设置坐标轴标签）、title（标题）、legend（图例）、xlim与ylim（设置坐标轴数据范围）、grid（设置网格线）等命令来装饰图形。</p><p><code>plt.bar</code>为我们创建条形图。 如果你没有明确选择一种颜色，那么虽然做了多个图，所有的条看起来会一样。  你可以在任何类型的绘图中使用颜色，例如<code>g</code>为绿色，<code>b</code>为蓝色，<code>r</code>为红色，等等。 你还可以使用十六进制颜色代码，如#191970。</p><p>具体可以查看这里:<a href="https://www.cnblogs.com/summary-2017/p/7504126.html">常用十六进制颜色对照表代码查询 - 緈諨の約錠 - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入条形图的数据</span></span><br><span class="line">plt.bar([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>],label=<span class="string">&quot;数据1&quot;</span>)</span><br><span class="line">plt.bar([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>],[<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>],label=<span class="string">&quot;数据2&quot;</span>, color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&#x27;学号&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;得分&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;成绩分步条形图&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102164032543.png" alt="image-20230102164032543"></p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>直方图和条形图很像，一般是通过区间显示。举例，年龄分步，我们20-25，25-30，30-35去输出人数。</p><p><code>plt.hist</code>，你首先需要放入所有的值，然后指定放入哪个桶或容器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"></span><br><span class="line">ages = [<span class="number">22</span>,<span class="number">45</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">67</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">88</span>,<span class="number">38</span>,<span class="number">49</span>,<span class="number">27</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">99</span>,<span class="number">91</span>,<span class="number">84</span>,<span class="number">82</span>]</span><br><span class="line">bins = [<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>]</span><br><span class="line">plt.hist(ages,bins,histtype=<span class="string">&#x27;bar&#x27;</span>,rwidth=<span class="number">0.8</span>) <span class="comment"># 输出类型是条形图</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各年龄段人数分布&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102170138593.png" alt="image-20230102170138593"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><h3 id="基本散点图"><a href="#基本散点图" class="headerlink" title="基本散点图"></a>基本散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一组散点</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>])</span><br><span class="line">plt.scatter(x, y)  <span class="comment"># x 代表x轴 y 代表y轴数据, 数据维度必须相同</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>实际上，这里不用np也是可以的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一组散点</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>]</span><br><span class="line">plt.scatter(x, y)  <span class="comment"># x 代表x轴 y 代表y轴数据, 数据维度必须相同</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102170908252.png" alt="image-20230102170908252"></p><h3 id="点的大小、颜色和透明度"><a href="#点的大小、颜色和透明度" class="headerlink" title="点的大小、颜色和透明度"></a>点的大小、颜色和透明度</h3><p>在<code>plt.scatter(x, y,s=100,c=&#39;red&#39;)</code>设置。</p><p> <em>s 点的大小  c 点的颜色 alpha 透明度</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一组散点</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>]</span><br><span class="line">plt.xlabel(<span class="string">&#x27;横坐标&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;纵坐标&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 代表x轴 y 代表y轴数据, 数据维度必须相同</span></span><br><span class="line"><span class="comment"># s 点的大小  c 点的颜色 alpha 透明度(越接近0越透明)</span></span><br><span class="line">plt.scatter(x, y,s=<span class="number">200</span>,c=<span class="string">&#x27;g&#x27;</span>,alpha=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102171707698.png" alt="image-20230102171707698"></p><h3 id="颜色条"><a href="#颜色条" class="headerlink" title="颜色条"></a>颜色条</h3><p>通过<code>plt.colorbar()</code>  <em>#显示颜色条</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一组散点</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>]</span><br><span class="line">plt.xlabel(<span class="string">&#x27;横坐标&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;纵坐标&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 代表x轴 y 代表y轴数据, 数据维度必须相同</span></span><br><span class="line"><span class="comment"># s 点的大小  c 点的颜色 alpha 透明度(越接近0越透明)</span></span><br><span class="line">colors = [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>]</span><br><span class="line">plt.scatter(x, y,s=<span class="number">200</span>,c=colors,alpha=<span class="number">0.9</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102172119888.png" alt="image-20230102172119888"></p><p>多组散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>]</span><br><span class="line"><span class="comment"># 新增Z</span></span><br><span class="line">z = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">21</span>]</span><br><span class="line">plt.xlabel(<span class="string">&#x27;横坐标&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;纵坐标&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colors = [<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>]</span><br><span class="line">plt.scatter(x, y,s=<span class="number">200</span>,c=colors,alpha=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment">#　多绘画一个Z</span></span><br><span class="line">plt.scatter(x, z,s=<span class="number">200</span>,c=colors,alpha=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102172340617.png" alt="image-20230102172340617"></p><p>最后，感谢<a href="https://www.bookstack.cn/read/py-ds-intro-tut-zh-matplotlib/ch29.md">二十九、3D 绘图 - 《Matplotlib 入门教程》 - 书栈网 · BookStack</a>和<a href="https://blog.csdn.net/qq_40491534/article/details/121519566">(108条消息) Matplotlib 散点图 绘制详解_一条菜鸟鱼的博客-CSDN博客_matplotlib绘制散点图</a></p>]]></content>
      
      
      <categories>
          
          <category> Matplotlib </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite的简单运用</title>
      <link href="/2023/01/02/SQLite%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/"/>
      <url>/2023/01/02/SQLite%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是-SQLite？"><a href="#什么是-SQLite？" class="headerlink" title="什么是 SQLite？"></a>什么是 SQLite？</h2><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库不一样，您不需要在系统中配置。</p><p>就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。</p><h2 id="为什么要用-SQLite？"><a href="#为什么要用-SQLite？" class="headerlink" title="为什么要用 SQLite？"></a>为什么要用 SQLite？</h2><ul><li>不需要一个单独的服务器进程或操作的系统（无服务器的）。</li><li>SQLite 不需要配置，这意味着不需要安装或管理。</li><li>一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。</li><li>SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li><li>SQLite 是自给自足的，这意味着不需要任何外部的依赖。</li><li>SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。</li><li>SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。</li><li>SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。</li><li>SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</li></ul><h2 id="SQLite-数据类型"><a href="#SQLite-数据类型" class="headerlink" title="SQLite 数据类型"></a>SQLite 数据类型</h2><p>SQLite 数据类型是一个用来指定任何对象的数据类型的属性。SQLite 中的每一列，每个变量和表达式都有相关的数据类型。</p><p>您可以在创建表的同时使用这些数据类型。SQLite 使用一个更普遍的动态类型系统。在 SQLite 中，值的数据类型与值本身是相关的，而不是与它的容器相关。</p><h3 id="SQLite-存储类"><a href="#SQLite-存储类" class="headerlink" title="SQLite 存储类"></a>SQLite 存储类</h3><p>每个存储在 SQLite 数据库中的值都具有以下存储类之一：</p><table><thead><tr><th align="left">存储类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">值是一个 NULL 值。</td></tr><tr><td align="left">INTEGER</td><td align="left">值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td align="left">REAL</td><td align="left">值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。</td></tr><tr><td align="left">TEXT</td><td align="left">值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储。</td></tr><tr><td align="left">BLOB</td><td align="left">值是一个 blob 数据，完全根据它的输入存储。</td></tr></tbody></table><p>SQLite 的存储类稍微比数据类型更普遍。INTEGER 存储类，例如，包含 6 种不同的不同长度的整数数据类型。</p><h3 id="SQLite-亲和-Affinity-类型"><a href="#SQLite-亲和-Affinity-类型" class="headerlink" title="SQLite 亲和(Affinity)类型"></a>SQLite 亲和(Affinity)类型</h3><p>SQLite支持列的亲和类型概念。任何列仍然可以存储任何类型的数据，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式。SQLite目前的版本支持以下五种亲缘类型：</p><table><thead><tr><th align="left">亲和类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">TEXT</td><td align="left">数值型数据在被插入之前，需要先被转换为文本格式，之后再插入到目标字段中。</td></tr><tr><td align="left">NUMERIC</td><td align="left">当文本数据被插入到亲缘性为NUMERIC的字段中时，如果转换操作不会导致数据信息丢失以及完全可逆，那么SQLite就会将该文本数据转换为INTEGER或REAL类型的数据，如果转换失败，SQLite仍会以TEXT方式存储该数据。对于NULL或BLOB类型的新数据，SQLite将不做任何转换，直接以NULL或BLOB的方式存储该数据。需要额外说明的是，对于浮点格式的常量文本，如”30000.0”，如果该值可以转换为INTEGER同时又不会丢失数值信息，那么SQLite就会将其转换为INTEGER的存储方式。</td></tr><tr><td align="left">INTEGER</td><td align="left">对于亲缘类型为INTEGER的字段，其规则等同于NUMERIC，唯一差别是在执行CAST表达式时。</td></tr><tr><td align="left">REAL</td><td align="left">其规则基本等同于NUMERIC，唯一的差别是不会将”30000.0”这样的文本数据转换为INTEGER存储方式。</td></tr><tr><td align="left">NONE</td><td align="left">不做任何的转换，直接以该数据所属的数据类型进行存储。</td></tr></tbody></table><h3 id="SQLite-亲和类型-Affinity-及类型名称"><a href="#SQLite-亲和类型-Affinity-及类型名称" class="headerlink" title="SQLite 亲和类型(Affinity)及类型名称"></a>SQLite 亲和类型(Affinity)及类型名称</h3><p>下表列出了当创建 SQLite3 表时可使用的各种数据类型名称，同时也显示了相应的亲和类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">亲和类型</th></tr></thead><tbody><tr><td align="left">INTINTEGERTINYINTSMALLINTMEDIUMINTBIGINTUNSIGNED BIG INTINT2INT8</td><td align="left">INTEGER</td></tr><tr><td align="left">CHARACTER(20)VARCHAR(255)VARYING CHARACTER(255)NCHAR(55)NATIVE CHARACTER(70)NVARCHAR(100)TEXTCLOB</td><td align="left">TEXT</td></tr><tr><td align="left">BLOB未指定类型</td><td align="left">BLOB</td></tr><tr><td align="left">REALDOUBLEDOUBLE PRECISIONFLOAT</td><td align="left">REAL</td></tr><tr><td align="left">NUMERICDECIMAL(10,5)BOOLEANDATEDATETIME</td><td align="left">NUMERIC</td></tr></tbody></table><h3 id="Boolean-数据类型"><a href="#Boolean-数据类型" class="headerlink" title="Boolean 数据类型"></a>Boolean 数据类型</h3><p>SQLite 没有单独的 Boolean 存储类。相反，布尔值被存储为整数 0（false）和 1（true）。</p><h3 id="Date-与-Time-数据类型"><a href="#Date-与-Time-数据类型" class="headerlink" title="Date 与 Time 数据类型"></a>Date 与 Time 数据类型</h3><p>SQLite 没有一个单独的用于存储日期和&#x2F;或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。</p><table><thead><tr><th align="left">存储类</th><th align="left">日期格式</th></tr></thead><tbody><tr><td align="left">TEXT</td><td align="left">格式为 “YYYY-MM-DD HH:MM:SS.SSS” 的日期。</td></tr><tr><td align="left">REAL</td><td align="left">从公元前 4714 年 11 月 24 日格林尼治时间的正午开始算起的天数。</td></tr><tr><td align="left">INTEGER</td><td align="left">从 1970-01-01 00:00:00 UTC 算起的秒数。</td></tr></tbody></table><p>您可以以任何上述格式来存储日期和时间，并且可以使用内置的日期和时间函数来自由转换不同格式。</p><h1 id="SQLite-Python"><a href="#SQLite-Python" class="headerlink" title="SQLite - Python"></a>SQLite - Python</h1><h2 id="Python-sqlite3-模块-API"><a href="#Python-sqlite3-模块-API" class="headerlink" title="Python sqlite3 模块 API"></a>Python sqlite3 模块 API</h2><table><thead><tr><th align="left">序号</th><th align="left">API &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>sqlite3.connect(database [,timeout ,other optional arguments])</strong> 该 API 打开一个到 SQLite 数据库文件 database 的链接。您可以使用 “:memory:” 来在 RAM 中打开一个到 database 的数据库连接，而不是在磁盘上打开。如果数据库成功打开，则返回一个连接对象。当一个数据库被多个连接访问，且其中一个修改了数据库，此时 SQLite 数据库被锁定，直到事务提交。timeout 参数表示连接等待锁定的持续时间，直到发生异常断开连接。timeout 参数默认是 5.0（5 秒）。如果给定的数据库名称 filename 不存在，则该调用将创建一个数据库。如果您不想在当前目录中创建数据库，那么您可以指定带有路径的文件名，这样您就能在任意地方创建数据库。</td></tr><tr><td align="left">2</td><td align="left"><strong>connection.cursor([cursorClass])</strong> 该例程创建一个 <strong>cursor</strong>，将在 Python 数据库编程中用到。该方法接受一个单一的可选的参数 cursorClass。如果提供了该参数，则它必须是一个扩展自 sqlite3.Cursor 的自定义的 cursor 类。</td></tr><tr><td align="left">3</td><td align="left"><strong>cursor.execute(sql [, optional parameters])</strong> 该例程执行一个 SQL 语句。该 SQL 语句可以被参数化（即使用占位符代替 SQL 文本）。sqlite3 模块支持两种类型的占位符：问号和命名占位符（命名样式）。例如：cursor.execute(“insert into people values (?, ?)”, (who, age))</td></tr><tr><td align="left">4</td><td align="left"><strong>connection.execute(sql [, optional parameters])</strong> 该例程是上面执行的由光标（cursor）对象提供的方法的快捷方式，它通过调用光标（cursor）方法创建了一个中间的光标对象，然后通过给定的参数调用光标的 execute 方法。</td></tr><tr><td align="left">5</td><td align="left"><strong>cursor.executemany(sql, seq_of_parameters)</strong> 该例程对 seq_of_parameters 中的所有参数或映射执行一个 SQL 命令。</td></tr><tr><td align="left">6</td><td align="left"><strong>connection.executemany(sql[, parameters])</strong> 该例程是一个由调用光标（cursor）方法创建的中间的光标对象的快捷方式，然后通过给定的参数调用光标的 executemany 方法。</td></tr><tr><td align="left">7</td><td align="left"><strong>cursor.executescript(sql_script)</strong> 该例程一旦接收到脚本，会执行多个 SQL 语句。它首先执行 COMMIT 语句，然后执行作为参数传入的 SQL 脚本。所有的 SQL 语句应该用分号 <strong>;</strong> 分隔。</td></tr><tr><td align="left">8</td><td align="left"><strong>connection.executescript(sql_script)</strong> 该例程是一个由调用光标（cursor）方法创建的中间的光标对象的快捷方式，然后通过给定的参数调用光标的 executescript 方法。</td></tr><tr><td align="left">9</td><td align="left"><strong>connection.total_changes()</strong> 该例程返回自数据库连接打开以来被修改、插入或删除的数据库总行数。</td></tr><tr><td align="left">10</td><td align="left"><strong>connection.commit()</strong> 该方法提交当前的事务。如果您未调用该方法，那么自您上一次调用 commit() 以来所做的任何动作对其他数据库连接来说是不可见的。</td></tr><tr><td align="left">11</td><td align="left"><strong>connection.rollback()</strong> 该方法回滚自上一次调用 commit() 以来对数据库所做的更改。</td></tr><tr><td align="left">12</td><td align="left"><strong>connection.close()</strong> 该方法关闭数据库连接。请注意，这不会自动调用 commit()。如果您之前未调用 commit() 方法，就直接关闭数据库连接，您所做的所有更改将全部丢失！</td></tr><tr><td align="left">13</td><td align="left"><strong>cursor.fetchone()</strong> 该方法获取查询结果集中的下一行，返回一个单一的序列，当没有更多可用的数据时，则返回 None。</td></tr><tr><td align="left">14</td><td align="left"><strong>cursor.fetchmany([size&#x3D;cursor.arraysize])</strong> 该方法获取查询结果集中的下一行组，返回一个列表。当没有更多的可用的行时，则返回一个空的列表。该方法尝试获取由 size 参数指定的尽可能多的行。</td></tr><tr><td align="left">15</td><td align="left"><strong>cursor.fetchall()</strong> 该例程获取查询结果集中所有（剩余）的行，返回一个列表。当没有可用的行时，则返回一个空的列表。</td></tr></tbody></table><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>下面的 Python 代码显示了如何连接到一个现有的数据库。如果数据库不存在，那么它就会被创建，最后将返回一个数据库对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2023/1/2 13:18</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：连接数据库.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>下面的 Python 代码段将用于在先前创建的数据库中创建一个表。</p><p>在创建的时候，简易都使用英文，作者这里使用”姓名”这些不推荐，后期出现了一些问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 cursor游标</span></span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute执行一个 SQL 语句。</span></span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE &#x27;公司&#x27;</span></span><br><span class="line"><span class="string">       (ID INT PRIMARY KEY     NOT NULL,</span></span><br><span class="line"><span class="string">       &#x27;姓名&#x27;           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">       &#x27;年龄&#x27;            INT     NOT NULL,</span></span><br><span class="line"><span class="string">       &#x27;地址&#x27;        CHAR(50),</span></span><br><span class="line"><span class="string">       &#x27;工资&#x27;         REAL);&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据表创建成功&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="INSERT-操作"><a href="#INSERT-操作" class="headerlink" title="INSERT 操作"></a>INSERT 操作</h2><p>下面的 Python 程序显示了如何在上面创建的 COMPANY 表中创建记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO &#x27;公司&#x27; (ID,&#x27;姓名&#x27;,&#x27;年龄&#x27;,&#x27;地址&#x27;,&#x27;工资&#x27;) \</span></span><br><span class="line"><span class="string">      VALUES (1, &#x27;阿福&#x27;, 20, &#x27;江西赣州&#x27;, 20000.00 )&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO &#x27;公司&#x27; (ID,&#x27;姓名&#x27;,&#x27;年龄&#x27;,&#x27;地址&#x27;,&#x27;工资&#x27;) \</span></span><br><span class="line"><span class="string">      VALUES (2, &#x27;小璇&#x27;, 18, &#x27;江西抚州&#x27;, 15000.00 )&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO &#x27;公司&#x27; (ID,&#x27;姓名&#x27;,&#x27;年龄&#x27;,&#x27;地址&#x27;,&#x27;工资&#x27;) \</span></span><br><span class="line"><span class="string">      VALUES (3, &#x27;道坤&#x27;, 21, &#x27;江西九江&#x27;, 20000.00 )&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO &#x27;公司&#x27; (ID,&#x27;姓名&#x27;,&#x27;年龄&#x27;,&#x27;地址&#x27;,&#x27;工资&#x27;) \</span></span><br><span class="line"><span class="string">      VALUES (4, &#x27;小彭&#x27;, 21, &#x27;江西萍乡 &#x27;, 65000.00 )&quot;</span>)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据插入成功&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="SELECT-操作"><a href="#SELECT-操作" class="headerlink" title="SELECT 操作"></a>SELECT 操作</h2><p>下面的 Python 程序显示了如何从前面创建的 COMPANY 表中获取并显示记录：</p><h3 id="查询小璇"><a href="#查询小璇" class="headerlink" title="查询小璇"></a>查询小璇</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询序号为2，小璇的信息</span></span><br><span class="line">cursor = c.execute(<span class="string">&quot;SELECT * FROM &#x27;公司&#x27; WHERE id =?&quot;</span>,(<span class="number">2</span>,))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ID=<span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(row[5])</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;姓名=<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;年龄=<span class="subst">&#123;row[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;地址=<span class="subst">&#123;row[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;工资=<span class="subst">&#123;row[<span class="number">4</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据操作成功&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102135250571.png" alt="image-20230102135250571"></p><h3 id="查询所有人"><a href="#查询所有人" class="headerlink" title="查询所有人"></a>查询所有人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cursor = c.execute(&quot;SELECT ID,&#x27;姓名&#x27;,&#x27;年龄&#x27;,&#x27;地址&#x27;,&#x27;工资&#x27;  from &#x27;公司&#x27; &quot;)</span></span><br><span class="line"><span class="comment"># 这句注释因为答案不准确</span></span><br><span class="line"><span class="comment"># 用  *  可以查询</span></span><br><span class="line">cursor = c.execute(<span class="string">&quot;SELECT *  from &#x27;公司&#x27; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ID=<span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;姓名=<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;年龄=<span class="subst">&#123;row[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;地址=<span class="subst">&#123;row[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;工资=<span class="subst">&#123;row[<span class="number">4</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据操作成功&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="UPDATE-操作"><a href="#UPDATE-操作" class="headerlink" title="UPDATE 操作"></a>UPDATE 操作</h2><p>下面的 Python 代码显示了如何使用 UPDATE 语句来更新任何记录，然后从 COMPANY 表中获取并显示更新的记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;UPDATE &#x27;公司&#x27; set &#x27;工资&#x27; = 30000000.00 where ID=1&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;改变次数&#x27;</span>,conn.total_changes)</span><br><span class="line"></span><br><span class="line">cursor = conn.execute(<span class="string">&quot;SELECT * from &#x27;公司&#x27;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ID=<span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;姓名=<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;年龄=<span class="subst">&#123;row[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;地址=<span class="subst">&#123;row[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;工资=<span class="subst">&#123;row[<span class="number">4</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据操作成功&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102140419879.png" alt="image-20230102140419879"></p><h2 id="DELETE-操作"><a href="#DELETE-操作" class="headerlink" title="DELETE 操作"></a>DELETE 操作</h2><p>下面的 Python 代码显示了如何使用 DELETE 语句删除任何记录，然后从 COMPANY 表中获取并显示剩余的记录：</p><p>删除 ID&#x3D;1 的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据库打开成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">&quot;DELETE from &#x27;公司&#x27; where ID=1;&quot;</span>)</span><br><span class="line"><span class="comment"># 提交，修改生效</span></span><br><span class="line">conn.commit()</span><br><span class="line">cursor = conn.execute(<span class="string">&quot;SELECT *  from &#x27;公司&#x27; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ID=<span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;姓名=<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;年龄=<span class="subst">&#123;row[<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;地址=<span class="subst">&#123;row[<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;工资=<span class="subst">&#123;row[<span class="number">4</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;数据操作成功&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>ID &#x3D; 1 被删除了</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230102140832159.png" alt="image-20230102140832159"></p><p>sqlite 基本不区分大小写(除去个别)，然后不建议使用中文！不建议使用中文！</p><p>最后，特别感谢<a href="https://www.runoob.com/sqlite/sqlite-python.html">SQLite – Python | 菜鸟教程 (runoob.com)</a>，文章是从菜鸟教程学习记录的，更加详细的信息可以去菜鸟教程学习！</p>]]></content>
      
      
      <categories>
          
          <category> Sqlite3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下批量创建用户</title>
      <link href="/2023/01/01/centos%E4%B8%8B%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/"/>
      <url>/2023/01/01/centos%E4%B8%8B%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Centos7下批量创建用户，并随机生成密码。</p><p>如果要删除用户,把 <code>useradd</code> 换成 <code>userdel</code> 即可。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>add_daokun.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 批量创建用户 daokun01 -- daokun20</span></span><br><span class="line">user=daokun</span><br><span class="line"><span class="comment"># 创建存储账户和密码的文件</span></span><br><span class="line"><span class="built_in">touch</span> daokun.txt</span><br><span class="line">txt=daokun.txt</span><br><span class="line"><span class="comment"># 遍历1-20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  random=$[<span class="variable">$RANDOM</span>%1000]</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$i</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    name=<span class="string">&quot;<span class="variable">$&#123;user&#125;</span>0<span class="variable">$i</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    name=<span class="string">&quot;$user<span class="variable">$i</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  useradd <span class="variable">$name</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$random</span> | passwd --stdin <span class="variable">$name</span> &amp;&gt; /dev/null</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$name</span> <span class="variable">$random</span>\t&quot;</span> &gt;&gt; <span class="variable">$txt</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> 创建成功!&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101205337743.png" alt="image-20230101205337743"></p><p>用户和密码</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101211539221.png" alt="image-20230101211539221"></p><p><code>cat /etc/passwd</code>查看用户</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101211917625.png" alt="image-20230101211917625"></p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 批量删除用户 daokun01 -- daokun20</span></span><br><span class="line">user=daokun</span><br><span class="line"><span class="comment"># 遍历1-20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$i</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    name=<span class="string">&quot;<span class="variable">$&#123;user&#125;</span>0<span class="variable">$i</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    name=<span class="string">&quot;$user<span class="variable">$i</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  userdel <span class="variable">$name</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> 删除成功!&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101211956340.png" alt="image-20230101211956340"></p><p><code>cat /etc/passwd</code>查看用户</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101212132762.png" alt="image-20230101212132762"></p><p>daokun01—-daokun20用户已经不在了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天气分析</title>
      <link href="/2023/01/01/%E5%A4%A9%E6%B0%94%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/01/%E5%A4%A9%E6%B0%94%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="未来6天的天气分析"><a href="#未来6天的天气分析" class="headerlink" title="未来6天的天气分析"></a>未来6天的天气分析</h2><p>在这里需要主要的是，有两种格式解析。数据处理方式1和数据方式2，具体选哪一种，需要去网页看一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/31 21:24</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：九江.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对未来6天预测数据可视化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bijie_weather</span>():</span><br><span class="line">    <span class="comment"># print(&#x27;毕节&#x27;)</span></span><br><span class="line">    res = requests.get(<span class="string">&#x27;http://www.weather.com.cn/weather/101240201.shtml&#x27;</span>)</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    html = res.text</span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)<span class="comment">#解析文档</span></span><br><span class="line">    weathers = soup.find(<span class="built_in">id</span>=<span class="string">&quot;7d&quot;</span>,class_=<span class="string">&quot;c7d&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>,class_=<span class="string">&quot;t clearfix&quot;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># result = &#123;&#125;</span></span><br><span class="line">    dates, conditions, temp = [], [], []</span><br><span class="line">    <span class="keyword">for</span> weather <span class="keyword">in</span> weathers:</span><br><span class="line">        weather_date = weather.find(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">        weather_wea = (weather.find(<span class="string">&#x27;p&#x27;</span>,class_=<span class="string">&#x27;wea&#x27;</span>))</span><br><span class="line">        weather_tem = (weather.find(<span class="string">&#x27;p&#x27;</span>,class_= <span class="string">&#x27;tem&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># result[&#x27;日期&#x27;] = weather_date.text</span></span><br><span class="line">        <span class="comment"># result[&#x27;天气&#x27;] = weather_wea.text</span></span><br><span class="line">        <span class="comment"># result[&#x27;温度&#x27;] = weather_tem.text[1:-1]</span></span><br><span class="line">        dates.append(weather_date.text)</span><br><span class="line">        conditions.append(weather_wea.text)</span><br><span class="line">        temp.append(weather_tem.text[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 数据保存</span></span><br><span class="line">    _data = pandas.DataFrame()</span><br><span class="line">    _data[<span class="string">&#x27;日期&#x27;</span>] = dates</span><br><span class="line">    _data[<span class="string">&#x27;天气情况&#x27;</span>] = conditions</span><br><span class="line">    _data[<span class="string">&#x27;气温&#x27;</span>] = temp</span><br><span class="line">    _data.to_csv(<span class="string">&#x27;九江.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">    <span class="comment"># print(&#x27;日期:&#x27;,result[&#x27;日期&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return result</span></span><br><span class="line">    <span class="keyword">return</span> _data</span><br><span class="line"><span class="comment"># print(bijie_weather())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>():</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    datalsit = pandas.read_csv(<span class="string">&#x27;九江.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    datalist = datalsit.drop([<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(datalist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据处理1，当格式为5℃/7℃时候使用</span></span><br><span class="line">    <span class="comment"># datalist[&#x27;最高气温&#x27;] = datalist[&#x27;气温&#x27;].str.split(&#x27;℃&#x27;, expand=True)[0]</span></span><br><span class="line">    <span class="comment"># datalist[&#x27;最低气温&#x27;] = datalist[&#x27;气温&#x27;].str.split(&#x27;℃&#x27;, expand=True)[1]</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># datalist[&#x27;最高气温&#x27;] = datalist[&#x27;最高气温&#x27;].map(lambda x: int(x))</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># datalist[&#x27;最低气温&#x27;] = datalist[&#x27;最低气温&#x27;].map(lambda x: int(str(x)[1:]))</span></span><br><span class="line">    <span class="comment"># datalist[&#x27;最低气温&#x27;] = datalist[&#x27;最低气温&#x27;].map(lambda x: int(x))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据处理方式2，当格式为 5/-1℃时候使用</span></span><br><span class="line">    datalist[<span class="string">&#x27;最高气温&#x27;</span>] = datalist[<span class="string">&#x27;气温&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;/&#x27;</span>, expand=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    datalist[<span class="string">&#x27;最低气温&#x27;</span>] = datalist[<span class="string">&#x27;气温&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;/&#x27;</span>, expand=<span class="literal">True</span>)[<span class="number">1</span>]</span><br><span class="line">    datalist[<span class="string">&#x27;最高气温&#x27;</span>] = datalist[<span class="string">&#x27;最高气温&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x))</span><br><span class="line">    datalist[<span class="string">&#x27;最低气温&#x27;</span>] = datalist[<span class="string">&#x27;最低气温&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="built_in">str</span>(x)[:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datalist[<span class="string">&#x27;最低气温&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dates = datalist[<span class="string">&#x27;日期&#x27;</span>]</span><br><span class="line">    highs = datalist[<span class="string">&#x27;最高气温&#x27;</span>]</span><br><span class="line">    lows = datalist[<span class="string">&#x27;最低气温&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line"></span><br><span class="line">    fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    plt.fill_between(dates, highs, lows, facecolor=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 图表格式</span></span><br><span class="line">    <span class="comment"># 设置图标的图形格式</span></span><br><span class="line">    plt.title(<span class="string">&#x27;未来6天九江市天气情况&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">6</span>)</span><br><span class="line">    fig.autofmt_xdate()</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;气温&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 修改刻度</span></span><br><span class="line">    plt.xticks(dates[::<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 显示</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bijie_weather()</span><br><span class="line">    draw()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101102859433.png" alt="image-20230101102859433"></p><h2 id="历史天气分析"><a href="#历史天气分析" class="headerlink" title="历史天气分析"></a>历史天气分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/31 21:02</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：weather.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">对10-12月进行分析</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">weather_url</span>):</span><br><span class="line">    rseponse = requests.get(weather_url)</span><br><span class="line"></span><br><span class="line">    html = rseponse.content.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tr_lsit = soup.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(tr_lsit)</span><br><span class="line">    dates, conditions, temp = [], [], []</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> tr_lsit[<span class="number">1</span>:]:</span><br><span class="line">        sub_data = data.text.split()</span><br><span class="line">        dates.append(sub_data[<span class="number">0</span>])</span><br><span class="line">        conditions.append(<span class="string">&#x27;&#x27;</span>.join(sub_data[<span class="number">1</span>:<span class="number">3</span>]))</span><br><span class="line">        temp.append(<span class="string">&#x27;&#x27;</span>.join(sub_data[<span class="number">3</span>:<span class="number">6</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据保存</span></span><br><span class="line">    _data = pandas.DataFrame()</span><br><span class="line">    _data[<span class="string">&#x27;日期&#x27;</span>] = dates</span><br><span class="line">    _data[<span class="string">&#x27;天气情况&#x27;</span>] = conditions</span><br><span class="line">    _data[<span class="string">&#x27;气温&#x27;</span>] = temp</span><br><span class="line">    _data.to_csv(<span class="string">&#x27;city.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _data</span><br><span class="line">    <span class="comment"># print(_data)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_month_10 =get_data(<span class="string">&#x27;http://www.tianqihoubao.com/lishi/jiujiang/month/202210.html&#x27;</span>)</span><br><span class="line">data_month_11 =get_data(<span class="string">&#x27;http://www.tianqihoubao.com/lishi/jiujiang/month/202211.html&#x27;</span>)</span><br><span class="line">data_month_12 =get_data(<span class="string">&#x27;http://www.tianqihoubao.com/lishi/jiujiang/month/202212.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = pandas.concat([data_month_10,data_month_11,data_month_12]).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">data.to_csv(<span class="string">&#x27;city.csv&#x27;</span>,index=<span class="literal">False</span>,encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">datalsit = pandas.read_csv(<span class="string">&#x27;city.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">datalsit[<span class="string">&#x27;最高气温&#x27;</span>] = datalsit[<span class="string">&#x27;气温&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;/&#x27;</span>, expand=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">datalsit[<span class="string">&#x27;最低气温&#x27;</span>] = datalsit[<span class="string">&#x27;气温&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;/&#x27;</span>, expand=<span class="literal">True</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">datalsit[<span class="string">&#x27;最高气温&#x27;</span>] = datalsit[<span class="string">&#x27;最高气温&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x.replace(<span class="string">&#x27;℃&#x27;</span>, <span class="string">&#x27;&#x27;</span>)))</span><br><span class="line">datalsit[<span class="string">&#x27;最低气温&#x27;</span>] = datalsit[<span class="string">&#x27;最低气温&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x.replace(<span class="string">&#x27;℃&#x27;</span>, <span class="string">&#x27;&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dates = datalsit[<span class="string">&#x27;日期&#x27;</span>]</span><br><span class="line">highs = datalsit[<span class="string">&#x27;最高气温&#x27;</span>]</span><br><span class="line">lows = datalsit[<span class="string">&#x27;最低气温&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.fill_between(dates, highs, lows, facecolor=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 图表格式</span></span><br><span class="line"><span class="comment"># 设置图标的图形格式</span></span><br><span class="line">plt.title(<span class="string">&#x27;2022九江市10-12月天气情况&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">6</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.ylabel(<span class="string">&#x27;气温&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 修改刻度</span></span><br><span class="line">plt.xticks(dates[::<span class="number">20</span>])</span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101103632058.png" alt="image-20230101103632058"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简易日历</title>
      <link href="/2022/12/31/Python%E7%AE%80%E6%98%93%E6%97%A5%E5%8E%86/"/>
      <url>/2022/12/31/Python%E7%AE%80%E6%98%93%E6%97%A5%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​这是一个可以为每个月生成日历的项目。该应用程序包含一个显示实际日历的简单功能。</p><p>​这是在一个窗口应用程序中创建的，它使用 tkinter 模块来可视化应用程序的外观并提供一些用于开发的多媒体平台 。您可以根据您输入的内容显示日历的完整列表，该应用程序将在输入月份和年份后立即显示日历。这是是使用基本的 Python 编码创建的。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>用 tkinter 进行界面的开发</li><li>使用 calendar 进行日历的制作</li><li></li></ol><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20221231193647062.png" alt="image-20221231193647062"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageTk, Image</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(<span class="string">&#x27;400x300&#x27;</span>)</span><br><span class="line">root.title(<span class="string">&#x27;日历&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日历制作函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line"></span><br><span class="line">        m = <span class="built_in">int</span>(month.get())</span><br><span class="line">        y = <span class="built_in">int</span>(year.get())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用calendar库生成日历</span></span><br><span class="line">        output = calendar.month(y,m)</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line">        cal.insert(<span class="string">&#x27;end&#x27;</span>,output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">        cal.delete(<span class="number">1.0</span>,<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">        root.destroy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左上角的显示，美化</span></span><br><span class="line">title = Label(root,text=<span class="string">&quot;日历&quot;</span>,font=(<span class="string">&#x27;宋体&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">title.place(x=<span class="number">40</span>,y=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年标签，用来提示用户输入</span></span><br><span class="line">y_label = Label(root,text=<span class="string">&quot;年&quot;</span>,font=(<span class="string">&#x27;宋体&#x27;</span>,<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">y_label.place(x=<span class="number">70</span>,y=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  获取用户输入年标签的值</span></span><br><span class="line"><span class="comment"># Spinbox用于整数的显示与输入</span></span><br><span class="line">year = Spinbox(root, from_= <span class="number">2022</span>, to = <span class="number">3000</span>,width=<span class="string">&quot;8&quot;</span>)</span><br><span class="line">year.place(x=<span class="number">140</span>,y=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 月标签，用来提示用户输入</span></span><br><span class="line">m_label = Label(root,text=<span class="string">&quot;月&quot;</span>,font=(<span class="string">&#x27;verdana&#x27;</span>,<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">m_label.place(x=<span class="number">210</span>,y=<span class="number">80</span>)</span><br><span class="line"><span class="comment">#  获取用户输入月标签的值</span></span><br><span class="line">month = Spinbox(root, from_= <span class="number">1</span>, to = <span class="number">12</span>,width=<span class="string">&quot;5&quot;</span>)</span><br><span class="line">month.place(x=<span class="number">260</span>,y=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日历的区域</span></span><br><span class="line">cal = Text(root,width=<span class="number">33</span>,height=<span class="number">8</span>,relief=RIDGE,borderwidth=<span class="number">2</span>)</span><br><span class="line">cal.place(x=<span class="number">70</span>,y=<span class="number">110</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示按钮</span></span><br><span class="line">show = Button(root,text=<span class="string">&quot;显示&quot;</span>,font=(<span class="string">&#x27;宋体&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;bold&#x27;</span>),relief=RIDGE,borderwidth=<span class="number">2</span>,command=show)</span><br><span class="line">show.place(x=<span class="number">140</span>,y=<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除按钮</span></span><br><span class="line">clear = Button(root,text=<span class="string">&quot;清除&quot;</span>,font=(<span class="string">&#x27;宋体&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;bold&#x27;</span>),relief=RIDGE,borderwidth=<span class="number">2</span>,command=clear)</span><br><span class="line">clear.place(x=<span class="number">200</span>,y=<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出按钮</span></span><br><span class="line">exit = Button(root,text=<span class="string">&quot;退出&quot;</span>,font=(<span class="string">&#x27;宋体&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;bold&#x27;</span>),relief=RIDGE,borderwidth=<span class="number">2</span>,command=exit)</span><br><span class="line">exit.place(x=<span class="number">260</span>,y=<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简单的二维码生成器</title>
      <link href="/2022/12/30/Python%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2022/12/30/Python%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​简单的QR 码生成器应用程序仅使用Python编程语言开发。此应用程序是一种用户友好的系统。系统为您提供了生成二维码的基本功能。要生成二维码，您需要先输入一个 url 链接，例如（baidu.com）。输入网址后，只需点击生成按钮，它就会自动生成二维码。二维码是 svg 格式，您需要一个二维码扫描器来读取代码，它会自动将您重定向到 url 站点。</p><h2 id="所需要的库"><a href="#所需要的库" class="headerlink" title="所需要的库"></a>所需要的库</h2><ol><li><code>pyqrcode</code>:<code>pip install pyqrcode</code></li><li><code>png</code>:<code>pip install pypng</code></li></ol><h2 id="不带图形界面源码"><a href="#不带图形界面源码" class="headerlink" title="不带图形界面源码"></a>不带图形界面源码</h2><p>这里生成的是png格式的图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/30 10:30</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：QR_CODE.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pyqrcode</span><br><span class="line"><span class="keyword">import</span> png  <span class="comment"># pip install pypng</span></span><br><span class="line"><span class="comment"># from pyqrcode import QRCode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&#x27;请输入内容:&#x27;</span>)</span><br><span class="line">    url = pyqrcode.create(s)</span><br><span class="line">    <span class="comment">#print(s)</span></span><br><span class="line">    r = s[<span class="number">0</span>:-<span class="number">4</span>]     <span class="comment"># 去除后缀之后，创建图片</span></span><br><span class="line">    <span class="comment">#print(r)</span></span><br><span class="line">    url.png(<span class="string">&quot;&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(r), scale = <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    generate()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/64c7cd1898684cf0bdaa49629a430eaf.png" alt="无图形化"></p><h2 id="图形化界面源码"><a href="#图形化界面源码" class="headerlink" title="图形化界面源码"></a>图形化界面源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pyqrcode</span><br><span class="line"><span class="keyword">import</span> png  <span class="comment"># pip install pypng</span></span><br><span class="line"><span class="keyword">from</span> pyqrcode <span class="keyword">import</span> QRCode</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&quot;二维码生成&quot;</span>)  <span class="comment"># 窗口标题</span></span><br><span class="line">width = <span class="number">400</span>             <span class="comment"># 宽</span></span><br><span class="line">height = <span class="number">280</span>            <span class="comment"># 高</span></span><br><span class="line">screen_width = root.winfo_screenwidth()</span><br><span class="line">screen_height = root.winfo_screenheight()</span><br><span class="line">x = (screen_width/<span class="number">2</span>) - (width/<span class="number">2</span>)</span><br><span class="line">y = (screen_height/<span class="number">2</span>) - (height/<span class="number">2</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;%dx%d+%d+%d&quot;</span> % (width, height, x, y))</span><br><span class="line">root.resizable(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================变量======================================</span></span><br><span class="line">qrname = StringVar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================功能======================================</span></span><br><span class="line"><span class="comment"># 主体函数，生成二维码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">event=<span class="literal">None</span></span>):</span><br><span class="line">    s = qrname.get()</span><br><span class="line">    url = pyqrcode.create(s)</span><br><span class="line">    <span class="comment">#print(s)</span></span><br><span class="line">    r = s[<span class="number">0</span>:-<span class="number">4</span>]     <span class="comment"># 去除后缀之后，创建图片</span></span><br><span class="line">    <span class="comment">#print(r)</span></span><br><span class="line">    url.svg(<span class="string">&quot;&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(r), scale = <span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================FRAMES=========================================</span></span><br><span class="line">Top = Frame(root, bd=<span class="number">2</span>,  relief=RIDGE)</span><br><span class="line">Top.pack(side=TOP, fill=X)</span><br><span class="line">Form = Frame(root, height=<span class="number">200</span>)</span><br><span class="line">Form.pack(side=TOP, pady=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================LABELS=========================================</span></span><br><span class="line">lbl_title = Label(Top, text = <span class="string">&quot;二维码生成小工具&quot;</span>, font=(<span class="string">&#x27;arial&#x27;</span>, <span class="number">15</span>))</span><br><span class="line">lbl_title.pack(fill=X)</span><br><span class="line">lbl_qrurl = Label(Form, text = <span class="string">&quot;输入网址:&quot;</span>, font=(<span class="string">&#x27;arial&#x27;</span>, <span class="number">14</span>), bd=<span class="number">15</span>)</span><br><span class="line">lbl_qrurl.grid(row=<span class="number">0</span>, sticky=<span class="string">&quot;e&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#==============================ENTRY WIDGETS标签==================================</span></span><br><span class="line">qrurl = Entry(Form, textvariable=qrname, font=(<span class="number">14</span>))</span><br><span class="line">qrurl.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================按钮=================================</span></span><br><span class="line">btn_generate = Button(Form, text=<span class="string">&quot;Generate&quot;</span>, width=<span class="number">45</span>, command=generate)</span><br><span class="line">btn_generate.grid(pady=<span class="number">25</span>, row=<span class="number">2</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">btn_generate.bind(<span class="string">&#x27;&lt;Return&gt;&#x27;</span>, generate)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================INITIALIATION==================================</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/57fbe26dd60e49cdaf8f7bb279053c43.png" alt="QR生成小程序"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20221231195937500.png" alt="baidu"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用数据库的奖学金评定系统(C语言版)</title>
      <link href="/2022/12/25/%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A5%96%E5%AD%A6%E9%87%91%E8%AF%84%E5%AE%9A%E7%B3%BB%E7%BB%9F-C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2022/12/25/%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A5%96%E5%AD%A6%E9%87%91%E8%AF%84%E5%AE%9A%E7%B3%BB%E7%BB%9F-C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>在此程序的目录下，创建一个文件<code>data.db</code></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CH  20  <span class="comment">// 最大字符</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N  100  <span class="comment">// 学生的最大个数</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">//学生的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span>  name[CH];               <span class="comment">// 姓名</span></span><br><span class="line"><span class="type">char</span>  no[CH];                 <span class="comment">//学号</span></span><br><span class="line"><span class="type">char</span>  major_class[CH];                 <span class="comment">//专业+班级</span></span><br><span class="line"><span class="type">char</span> Entry_year[CH];<span class="comment">// 入学年份 </span></span><br><span class="line"><span class="type">float</span> sorce1;          <span class="comment">//科目一     </span></span><br><span class="line"><span class="type">float</span> sorce2;                    <span class="comment">//科目二      </span></span><br><span class="line"><span class="type">float</span> sorce3;          <span class="comment">//科目三     </span></span><br><span class="line"><span class="type">float</span> sorce4;             <span class="comment">//科目四     </span></span><br><span class="line"><span class="type">float</span> fAvage;                 <span class="comment">//平均分数</span></span><br><span class="line"><span class="type">float</span> S_all;                  <span class="comment">//总分数</span></span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line">student  s[N];                   <span class="comment">//学生数组</span></span><br><span class="line"><span class="type">int</span>   num;                       <span class="comment">//学生个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*程序辅助函数*/</span></span><br><span class="line"><span class="comment">/*   欢迎界面   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">welcome</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;color 9f&quot;</span>) ;<span class="comment">// 控制窗口的背景色和输入文本颜色，color 4f :4是背景色 ，f是字体色// f是白色，4是红色</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;mode con:cols=130 lines=30&quot;</span>);<span class="comment">//这个是控制窗口的大小，</span></span><br><span class="line"><span class="comment">//一行可以写多少个字符，有多少行，cols科目二是：列数，相当于窗口的宽   lines:线，多少条线， 相当于窗口的高</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n\n\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t        ╭═════════════════┤成绩管理系统├════════════════╮\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║           欢迎使用该成绩管理系统       \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                  作者：道坤            \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              按任意键继续……          \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t╰═══════════════════════════════════════════════╯\n&quot;</span>); </span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*   菜单   */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">meun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);                                                     <span class="comment">//屏幕清空</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n\n\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t        ╭═════════════════┤成绩管理系统├════════════════╮\n&quot;</span>); <span class="comment">/*菜单选择*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║           学 生 成 绩 管 理 系 统      \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                  主菜单                \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              1. 录入学生数据           \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              2. 删除学生数据           \t║\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              3. 修改学生数据           \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              4. 显示学生数据           \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              5. 排序输出               \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              6. 奖学金获得者   \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              7. 查询学生             \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║              8. 退出成绩管理系统       \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t║                                        \t║\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t╰═══════════════════════════════════════════════╯\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t           \1选择菜单选项(1-8):&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>  <span class="title function_">read_from_file</span><span class="params">()</span></span><br><span class="line"><span class="comment">//从文件中读取学生的信息</span></span><br><span class="line">&#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">fp=fopen(<span class="string">&quot;data.db&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件data.db失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fread(&amp;num,<span class="number">1</span>,<span class="keyword">sizeof</span>(num),fp); <span class="comment">//先读取学生的个数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">fread(&amp;s[i],<span class="number">1</span>,<span class="keyword">sizeof</span>(student),fp); <span class="comment">//读取每个学生的信息存放到结构体</span></span><br><span class="line"></span><br><span class="line">fclose(fp);<span class="comment">//关闭文件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">write_to_file</span><span class="params">()</span></span><br><span class="line"><span class="comment">//从文件中写学生的信息</span></span><br><span class="line">&#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">fp=fopen(<span class="string">&quot;data.db&quot;</span>,<span class="string">&quot;wb+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件data.db失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fwrite(&amp;num,<span class="number">1</span>,<span class="keyword">sizeof</span>(num),fp); <span class="comment">//先写入学生的个数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">fwrite(&amp;s[i],<span class="number">1</span>,<span class="keyword">sizeof</span>(student),fp); <span class="comment">//写入每个学生的信息</span></span><br><span class="line"></span><br><span class="line">fclose(fp);<span class="comment">//关闭文件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add</span><span class="params">()</span><span class="comment">//添加学生信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入姓名:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入专业班级:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].major_class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].no);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入入学年份:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].Entry_year);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目一成绩:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目二:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目三:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目四:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce4);</span><br><span class="line"></span><br><span class="line">s[i].S_all=s[i].sorce1+s[i].sorce2+s[i].sorce3+s[i].sorce4;</span><br><span class="line"><span class="comment">//计算出总分数</span></span><br><span class="line"></span><br><span class="line">s[i].fAvage=s[i].S_all/<span class="number">4</span>;</span><br><span class="line"><span class="comment">//计算出平均分</span></span><br><span class="line"></span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">()</span><span class="comment">//删除学生信息</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>  no[CH];   <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要删除的学生学号:&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)<span class="comment">//先找到该学号对应的序号</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s[i].no,no)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;num<span class="number">-1</span>;j++)</span><br><span class="line">s[j]=s[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">num--; <span class="comment">//数量减少 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个学号!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete_infor</span><span class="params">()</span><span class="comment">//修改学生信息</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>  no[CH];   <span class="comment">//学号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要修改的学生学号:&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)<span class="comment">//先找到该学号对应的序号</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s[i].no,no)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入姓名:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入专业班级:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].major_class);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].no);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入入学年份:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i].Entry_year);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目一成绩:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目二:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目三:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入科目四:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;s[i].sorce4);</span><br><span class="line"></span><br><span class="line">s[i].S_all=s[i].sorce1+s[i].sorce2+s[i].sorce3+s[i].sorce4;</span><br><span class="line"><span class="comment">//计算出总分数</span></span><br><span class="line"></span><br><span class="line">s[i].fAvage=s[i].S_all/<span class="number">4</span>;</span><br><span class="line"><span class="comment">//计算出平均分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个学号!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Show_s</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名    专业班级   学号   入学年份       科目一       科目二       科目三       科目四        总分数  平均分\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6s %7s %7s %8s  %.1f       %.1f       %.1f       %.1f       %.1f       %.2f\n &quot;</span>,s[i].name,s[i].major_class,s[i].no,s[i].Entry_year,s[i].sorce1,s[i].sorce2,s[i].sorce3,s[i].sorce4,s[i].S_all,s[i].fAvage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">Sort_s</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">student  t;<span class="comment">//用于排序交换的临时变量</span></span><br><span class="line">student  s1[N]; <span class="comment">//学生数组,用来排序的临时数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">s1[i]=s[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;num;j++)</span><br><span class="line"><span class="keyword">if</span>(s1[i].fAvage&lt;s1[j].fAvage)</span><br><span class="line">&#123;</span><br><span class="line">t=s1[i];</span><br><span class="line">s1[i]=s1[j];</span><br><span class="line">s1[j]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名    专业班级   学号   入学年份       科目一       科目二       科目三       科目四        总分数  平均分\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6s %7s %7s %8s  %.1f       %.1f       %.1f       %.1f       %.1f       %.2f\n &quot;</span>,s[i].name,s[i].major_class,s[i].no,s[i].Entry_year,s[i].sorce1,s[i].sorce2,s[i].sorce3,s[i].sorce4,s[i].S_all,s[i].fAvage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">is_scholarship</span><span class="params">(student *stu)</span></span><br><span class="line"><span class="comment">//判断是否符合讲学金，0表示不符合，1表示符合</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu-&gt;sorce1&lt;<span class="number">60</span>||stu-&gt;sorce2&lt;<span class="number">60</span>||stu-&gt;sorce3&lt;<span class="number">60</span>||stu-&gt;sorce4&lt;<span class="number">60</span>)</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(stu-&gt;fAvage&lt;<span class="number">80</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Scholarship</span><span class="params">()</span><span class="comment">//显示符合奖学金学生</span></span><br><span class="line"><span class="comment">//符合奖学金的学生的条件如下</span></span><br><span class="line"><span class="comment">//1)各个科目都及格,2)平均分大于 80分 3)平均分排序输出，一等为1个名额，二等为2个名额，三等为3个名额</span></span><br><span class="line">&#123;</span><br><span class="line">Show_s();</span><br><span class="line"><span class="type">int</span> d1; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认你已经将全部学生信息正确的输入，若确认输入‘1 ’：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d1);</span><br><span class="line"><span class="keyword">if</span>( d1 == <span class="number">1</span>)&#123;</span><br><span class="line">student  s1[N]; <span class="comment">//学生数组,用来存放符合奖学金条件的学生</span></span><br><span class="line"><span class="type">int</span> num1=<span class="number">0</span>;           <span class="comment">//符合奖学金学生的数目</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">student  t;<span class="comment">//用于排序交换的临时变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"><span class="keyword">if</span>(is_scholarship(&amp;s[i])==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">s1[num1]=s[i];</span><br><span class="line">num1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对符合讲学金的同学进行排序</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num1;i++)</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;num1;j++)</span><br><span class="line"><span class="keyword">if</span>(s1[i].fAvage&lt;s1[j].fAvage)</span><br><span class="line">&#123;</span><br><span class="line">t=s1[i];</span><br><span class="line">s1[i]=s1[j];</span><br><span class="line">s1[j]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有符合奖学金的学生!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名    专业班级   学号   入学年份       科目一       科目二       科目三       科目四        总分数  平均分   等级\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6s %7s %7s %8s  %.1f       %.1f       %.1f       %.1f       %.1f       %.2f &quot;</span>,s[i].name,s[i].major_class,s[i].no,s[i].Entry_year,s[i].sorce1,s[i].sorce2,s[i].sorce3,s[i].sorce4,s[i].S_all,s[i].fAvage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t一等\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;i&lt;=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t二等\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i&gt;=<span class="number">3</span>&amp;&amp;i&lt;=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t三等\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">()</span><span class="comment">//查询学生成绩</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>  no[CH];   <span class="comment">//学号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要查询的学生学号:&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)<span class="comment">//先找到该学号对应的序号</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s[i].no,no)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名    专业班级   学号   入学年份       科目一       科目二       科目三       科目四        总分数  平均分\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6s %7s %7s %8s  %.1f       %.1f       %.1f       %.1f       %.1f       %.2f\n &quot;</span>,s[i].name,s[i].major_class,s[i].no,s[i].Entry_year,s[i].sorce1,s[i].sorce2,s[i].sorce3,s[i].sorce4,s[i].S_all,s[i].fAvage);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个学号!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> choose=<span class="number">0</span>;</span><br><span class="line">num=<span class="number">0</span>;<span class="comment">//初始化学生个数为0</span></span><br><span class="line"><span class="comment">//read_from_file(); //读取文件</span></span><br><span class="line">read_from_file(); </span><br><span class="line">welcome();</span><br><span class="line">meun();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choose);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(choose&gt;<span class="number">0</span>&amp;&amp;choose&lt;<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(choose)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:Add();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:Delete();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:Delete_infor();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:Show_s();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:Sort_s();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:Scholarship();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:Search();system(<span class="string">&quot;pause&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">meun();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choose);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_to_file();<span class="comment">//写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;谢谢使用学生成绩评定系统!再见!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇(C语言版)</title>
      <link href="/2022/12/22/%E8%B4%AA%E5%90%83%E8%9B%87-C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2022/12/22/%E8%B4%AA%E5%90%83%E8%9B%87-C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h1><p>用C语言编写了一款经典游戏——贪吃蛇。玩家使用方向键操控一条长长的蛇不断获取食物，同时蛇身随着吃下的食物不断变长，当蛇头撞到蛇身或障壁时游戏结束。项目使用了windows的相关库，去实现键盘信息的获取，控制台窗口大小设置等。</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><h3 id="项目整体流程图"><a href="#项目整体流程图" class="headerlink" title="项目整体流程图"></a>项目整体流程图</h3><p><img src="https://img-blog.csdnimg.cn/5d695c4d33294a6fb7f1c6f7ae5c5fbd.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Trug2uvh-1671710355630)(file:///C:/tmp/msohtmlclip1/01/clip_image002.gif)]"></p><p>​                         <br>​整体流程图</p><h3 id="初始化流程图"><a href="#初始化流程图" class="headerlink" title="初始化流程图"></a>初始化流程图</h3><p><img src="https://img-blog.csdnimg.cn/9a2191fa3be1426799ef0ea2a32bac84.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-bYMqQvsS-1671710355633)(file:///C:/tmp/msohtmlclip1/01/clip_image004.gif)]"></p><p>​初始化</p><p>模块设计</p><p>void hideCursor();  &#x2F;&#x2F;定义隐藏光标函数</p><p>void gotoxy(int x, int y); &#x2F;&#x2F;移动光标函数</p><p>void color(int c); &#x2F;&#x2F;设置接下来输出字体的颜色</p><p>void createMap(); &#x2F;&#x2F;创建地图函数</p><p>void initSnake(); &#x2F;&#x2F;初始化贪吃蛇函数</p><p>void speedUp(); &#x2F;&#x2F;加速函数</p><p>void speedDown(); &#x2F;&#x2F;减速函数</p><p>void createFood(); &#x2F;&#x2F;随机生成食物函数</p><p>void collideWall(); &#x2F;&#x2F;检测撞墙函数</p><p>void collideSelf(); &#x2F;&#x2F;检测是否撞到自己</p><p>void moveSnake(); &#x2F;&#x2F;贪吃蛇移动函数</p><p>void gradeBoard(); &#x2F;&#x2F;显示得分板函数</p><p>void endGame();  &#x2F;&#x2F;结束游戏函数</p><p>void keyboardControl();  &#x2F;&#x2F;检测键盘按键函数</p><p>void welcometoGame();  &#x2F;&#x2F;初始化函数</p><h3 id="美化函数hideCursor"><a href="#美化函数hideCursor" class="headerlink" title="美化函数hideCursor();"></a>美化函数hideCursor();</h3><p>功能:隐藏光标</p><p><img src="https://img-blog.csdnimg.cn/6226fa574261439380d32b490b320d09.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-1tnaGnOB-1671710355633)(file:///C:/tmp/msohtmlclip1/01/clip_image006.gif)]"></p><p>​光标未隐藏前</p><p><img src="https://img-blog.csdnimg.cn/dcc13729fe02406a8d74d692c0bd5f8e.png" alt="在这里插入图片描述"></p><p>​ 光标隐藏后</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************************</span></span><br><span class="line"><span class="comment"> *************************************************************************************</span></span><br><span class="line"><span class="comment"> @作者:   道坤</span></span><br><span class="line"><span class="comment"> @版本:  1.0</span></span><br><span class="line"><span class="comment"> @写作时间: 2022/12/21 </span></span><br><span class="line"><span class="comment"> @功能: 实现贪吃蛇 </span></span><br><span class="line"><span class="comment"> *************************************************************************************</span></span><br><span class="line"><span class="comment"> *************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R <span class="string">&#x27;R&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L <span class="string">&#x27;L&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> U <span class="string">&#x27;U&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D <span class="string">&#x27;D&#x27;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的身体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> x; <span class="comment">// x 坐标</span></span><br><span class="line"><span class="type">int</span> y; <span class="comment">// y 坐标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;snake;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> FORWARD_DIRECTION;   <span class="comment">//定义当前前进的方向</span></span><br><span class="line">snake* head, * p, * nexthead;<span class="comment">//蛇头指针、创建贪吃蛇的间接指针、下一步生成的头指针、尾指针</span></span><br><span class="line">snake* food;<span class="comment">//随机生成的食物</span></span><br><span class="line"><span class="type">int</span> grade = <span class="number">0</span>;   <span class="comment">//当前得分</span></span><br><span class="line"><span class="type">int</span> addGrade = <span class="number">5</span>;  <span class="comment">//加的分数随速度而增加</span></span><br><span class="line"><span class="type">int</span> sleepTime = <span class="number">250</span>; <span class="comment">//贪吃蛇停顿的时间，可通过修改停顿时间改变贪吃蛇前进的速度</span></span><br><span class="line"><span class="type">int</span> life = <span class="number">4</span>; <span class="comment">// 贪吃蛇的初始生命值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hideCursor</span><span class="params">()</span>;   <span class="comment">//定义隐藏光标函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;  <span class="comment">//移动光标函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color</span><span class="params">(<span class="type">int</span> c)</span>; <span class="comment">//设置接下来输出字体的颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createMap</span><span class="params">()</span>; <span class="comment">//创建地图函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSnake</span><span class="params">()</span>;  <span class="comment">//初始化贪吃蛇函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">speedUp</span><span class="params">()</span>;  <span class="comment">//加速函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">speedDown</span><span class="params">()</span>; <span class="comment">//减速函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createFood</span><span class="params">()</span>;  <span class="comment">//随机生成食物函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">collideWall</span><span class="params">()</span>;  <span class="comment">//检测撞墙函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">collideSelf</span><span class="params">()</span>;  <span class="comment">//检测是否撞到自己</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">moveSnake</span><span class="params">()</span>;  <span class="comment">//贪吃蛇移动函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gradeBoard</span><span class="params">()</span>;  <span class="comment">//显示得分板函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">endGame</span><span class="params">()</span>;   <span class="comment">//结束游戏函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">keyboardControl</span><span class="params">()</span>;   <span class="comment">//检测键盘按键函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">welcometoGame</span><span class="params">()</span>;   <span class="comment">//初始化函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hideCursor</span><span class="params">()</span>   <span class="comment">//定义隐藏光标函数</span></span><br><span class="line">&#123;</span><br><span class="line">CONSOLE_CURSOR_INFO cursor;</span><br><span class="line">cursor.bVisible = FALSE;</span><br><span class="line">cursor.dwSize = <span class="keyword">sizeof</span>(cursor);</span><br><span class="line">HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">SetConsoleCursorInfo(handle, &amp;cursor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span><br><span class="line">&#123;       <span class="comment">//移动光标到相应位置</span></span><br><span class="line">COORD c = &#123; x, y &#125;;</span><br><span class="line">SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">color</span><span class="params">(<span class="type">int</span> c)</span> </span><br><span class="line">&#123;               <span class="comment">//设置接下来输出字符的颜色</span></span><br><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">createMap</span><span class="params">()</span> </span><br><span class="line">&#123;    <span class="comment">//创建地图</span></span><br><span class="line">system(<span class="string">&quot;mode con cols=150 lines=30&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">color(<span class="number">3</span> | FOREGROUND_INTENSITY); <span class="comment">// FOREGROUND_INTENSITY 表示设置前景色为高亮显示</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) </span><br><span class="line">&#123;  <span class="comment">//上边框</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">28</span>; i++) </span><br><span class="line">&#123;   <span class="comment">//左右边框</span></span><br><span class="line">gotoxy(<span class="number">0</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">78</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(<span class="number">0</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) </span><br><span class="line">&#123;  <span class="comment">//上边框</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化蛇身</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSnake</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">snake* tail;</span><br><span class="line">color(<span class="number">15</span>);</span><br><span class="line">head = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">head-&gt;x = <span class="number">36</span>;</span><br><span class="line">head-&gt;y = <span class="number">12</span>;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">tail = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">tail-&gt;x = head-&gt;x + <span class="number">2</span> * i;</span><br><span class="line">tail-&gt;y = head-&gt;y;</span><br><span class="line">p-&gt;next = tail;</span><br><span class="line">p = tail;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">p = head;                  <span class="comment">//记录下头指针的位置</span></span><br><span class="line">gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(<span class="number">149</span>, <span class="number">29</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">speedUp</span><span class="params">()</span>    <span class="comment">//通过减小sleepTime加快速度，但sleepTime不能小于100</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sleepTime &gt; <span class="number">50</span>)</span><br><span class="line">&#123;</span><br><span class="line">sleepTime = sleepTime - <span class="number">50</span>; addGrade++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">speedDown</span><span class="params">()</span>  <span class="comment">//通过增大sleepTime减慢速度，但sleepTime不能大于500</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sleepTime &lt; <span class="number">450</span>)</span><br><span class="line">&#123;</span><br><span class="line">sleepTime = sleepTime + <span class="number">50</span>; addGrade--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">createFood</span><span class="params">()</span> </span><br><span class="line">&#123;   <span class="comment">//随机生成食物</span></span><br><span class="line">byte i;   </span><br><span class="line">head = p;</span><br><span class="line">food = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">food-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;                             <span class="comment">//每次循环时重置i为0。若此条语句放在外部while语句外部，</span></span><br><span class="line"><span class="comment">//当随机生成的食物与蛇身重叠时，i被置1</span></span><br><span class="line">   <span class="comment">//此时i就一直为1，将陷入死循环</span></span><br><span class="line">food-&gt;x = rand() % <span class="number">75</span> + <span class="number">2</span>;         <span class="comment">//注意在范围内生成的数要为偶数，要与蛇头对齐</span></span><br><span class="line">food-&gt;y = rand() % <span class="number">25</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (food-&gt;x == head-&gt;x &amp;&amp; food-&gt;y == head-&gt;y)</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;                            <span class="comment">//重置head的值，当随机生成的食物与蛇身重叠时，又从外部while的第一条语句开始执行</span></span><br><span class="line">head = p; <span class="comment">//，此时若没有重置head的值，内嵌的while将直接跳过，没有二次判断</span></span><br><span class="line"><span class="keyword">if</span> (food-&gt;x % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; food-&gt;y % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">gotoxy(food-&gt;x, food-&gt;y);</span><br><span class="line">color(<span class="number">12</span> | FOREGROUND_INTENSITY);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撞墙检测</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">collideWall</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == <span class="number">0</span>)</span><br><span class="line">endGame();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == <span class="number">78</span>)</span><br><span class="line">endGame();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;y == <span class="number">0</span>)</span><br><span class="line">endGame();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;y == <span class="number">29</span>)</span><br><span class="line">endGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测是否要到了自己</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">collideSelf</span><span class="params">()</span> &#123;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == p-&gt;x &amp;&amp; head-&gt;y == p-&gt;y)</span><br><span class="line">endGame();</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 贪吃蛇的移动</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">moveSnake</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">color(<span class="number">15</span>);</span><br><span class="line">head = p;                <span class="comment">//初始化头指针的位置</span></span><br><span class="line"><span class="keyword">if</span> (FORWARD_DIRECTION == L) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//gotoxy(100, 3);</span></span><br><span class="line">nexthead = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">nexthead-&gt;x = head-&gt;x - <span class="number">2</span>;</span><br><span class="line">nexthead-&gt;y = head-&gt;y;</span><br><span class="line">nexthead-&gt;next = head;</span><br><span class="line">head = nexthead;             <span class="comment">//头指针指向新开创的空间</span></span><br><span class="line">p = head;                    <span class="comment">//记录下头指针的值</span></span><br><span class="line">collideWall();</span><br><span class="line">collideSelf();</span><br><span class="line">gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == food-&gt;x &amp;&amp; head-&gt;y == food-&gt;y)    <span class="comment">//若吃到了食物，则尾部不清除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(food);</span><br><span class="line">grade = grade + addGrade;</span><br><span class="line">createFood();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;                                           <span class="comment">//若没有吃到食物，则清除尾部，保持原有长度</span></span><br><span class="line"><span class="keyword">while</span> (head-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;      <span class="comment">//此处注意</span></span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(head-&gt;next-&gt;x, head-&gt;next-&gt;y);    <span class="comment">//通过next释放尾部是因为直接释放尾部会导致next指向混乱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(head-&gt;next);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FORWARD_DIRECTION == U) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//gotoxy(100, 3);</span></span><br><span class="line">nexthead = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">nexthead-&gt;x = head-&gt;x;</span><br><span class="line">nexthead-&gt;y = head-&gt;y - <span class="number">1</span>;</span><br><span class="line">nexthead-&gt;next = head;</span><br><span class="line">head = nexthead;</span><br><span class="line">p = head;</span><br><span class="line">gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">collideWall();</span><br><span class="line">collideSelf();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == food-&gt;x &amp;&amp; head-&gt;y == food-&gt;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(food);</span><br><span class="line">grade = grade + addGrade;</span><br><span class="line">createFood();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (head-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;      <span class="comment">//此处注意</span></span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(head-&gt;next-&gt;x, head-&gt;next-&gt;y);    <span class="comment">//通过next释放尾部是因为直接释放尾部会导致next指向混乱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(head-&gt;next);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FORWARD_DIRECTION == R) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//gotoxy(100, 3);</span></span><br><span class="line">nexthead = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">nexthead-&gt;x = head-&gt;x + <span class="number">2</span>;</span><br><span class="line">nexthead-&gt;y = head-&gt;y;</span><br><span class="line">nexthead-&gt;next = head;</span><br><span class="line">head = nexthead;</span><br><span class="line">p = head;</span><br><span class="line">gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">collideWall();</span><br><span class="line">collideSelf();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == food-&gt;x &amp;&amp; head-&gt;y == food-&gt;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(food);</span><br><span class="line">grade = grade + addGrade;</span><br><span class="line">createFood();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (head-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;      <span class="comment">//此处注意</span></span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(head-&gt;next-&gt;x, head-&gt;next-&gt;y);    <span class="comment">//通过next释放尾部是因为直接释放尾部会导致next指向混乱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(head-&gt;next);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FORWARD_DIRECTION == D) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//gotoxy(100, 3);</span></span><br><span class="line">nexthead = (snake*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">nexthead-&gt;x = head-&gt;x;</span><br><span class="line">nexthead-&gt;y = head-&gt;y + <span class="number">1</span>;</span><br><span class="line">nexthead-&gt;next = head;</span><br><span class="line">head = nexthead;</span><br><span class="line">p = head;</span><br><span class="line">gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">collideWall();</span><br><span class="line">collideSelf();</span><br><span class="line"><span class="keyword">if</span> (head-&gt;x == food-&gt;x &amp;&amp; head-&gt;y == food-&gt;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(food);</span><br><span class="line">grade = grade + addGrade;</span><br><span class="line">createFood();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (head-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;      <span class="comment">//此处注意</span></span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(head-&gt;next-&gt;x, head-&gt;next-&gt;y);    <span class="comment">//通过next释放尾部是因为直接释放尾部会导致next指向混乱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(head-&gt;next);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gradeBoard</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">gotoxy(<span class="number">100</span>,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;生命：%d  &quot;</span>, life);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">12</span>);</span><br><span class="line">color(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;得分：%d  &quot;</span>, grade);</span><br><span class="line"></span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">14</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;每个食物得分： %d分&quot;</span>, addGrade);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;碰墙或碰到自己即Game Over.&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;↑(W) ↓(S) ←(A) →(D)控制蛇的移动&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;F1 加速，F2 减速&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">22</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空格space：暂停游戏&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">24</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ESC ：退出游戏&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束游戏 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">endGame</span><span class="params">()</span> &#123;</span><br><span class="line">life --;</span><br><span class="line"><span class="keyword">if</span> (life &lt;<span class="number">0</span> )&#123; </span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">66</span>, <span class="number">10</span>);</span><br><span class="line">color(<span class="number">12</span> | FOREGROUND_INTENSITY);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;游戏结束&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">64</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的得分为：%d&quot;</span>, grade);</span><br><span class="line">gotoxy(<span class="number">61</span>, <span class="number">14</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;再按一次ESC退出游戏&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sleep(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_ESCAPE))</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">grade = <span class="number">0</span>; <span class="comment">//分数重置为0 </span></span><br><span class="line">createMap(); <span class="comment">// 创建地图</span></span><br><span class="line">initSnake(); <span class="comment">// 初始化贪吃蛇</span></span><br><span class="line">createFood();  <span class="comment">// 生成食物</span></span><br><span class="line">keyboardControl(); <span class="comment">// 键盘控制</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">keyboardControl</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">FORWARD_DIRECTION = L;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">gradeBoard();</span><br><span class="line"><span class="comment">// 键盘控制 VK_UP为上键(下面不解释了)，87---W </span></span><br><span class="line"><span class="keyword">if</span> ((GetAsyncKeyState(VK_UP))||GetAsyncKeyState( <span class="number">87</span> ) &amp;&amp; FORWARD_DIRECTION != D) </span><br><span class="line">&#123;</span><br><span class="line">FORWARD_DIRECTION = U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 83 ---S</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((GetAsyncKeyState(VK_DOWN)||GetAsyncKeyState(<span class="number">83</span>)) &amp;&amp; FORWARD_DIRECTION != U) </span><br><span class="line">&#123;</span><br><span class="line">FORWARD_DIRECTION = D;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 65 ---- A</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((GetAsyncKeyState(VK_LEFT)||GetAsyncKeyState(<span class="number">65</span>)) &amp;&amp; FORWARD_DIRECTION != R) </span><br><span class="line">&#123;</span><br><span class="line">FORWARD_DIRECTION = L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 68----D</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((GetAsyncKeyState(VK_RIGHT)||GetAsyncKeyState(<span class="number">68</span>)) &amp;&amp; FORWARD_DIRECTION != L) </span><br><span class="line">&#123;</span><br><span class="line">FORWARD_DIRECTION = R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_F1))          <span class="comment">//按F1加快速度</span></span><br><span class="line">&#123;</span><br><span class="line">speedUp();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_F2))            <span class="comment">//按F2减慢速度</span></span><br><span class="line">&#123;</span><br><span class="line">speedDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_SPACE))     <span class="comment">//空格键暂停</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_ESCAPE))    <span class="comment">//在暂停时也能响应ESC键退出游戏</span></span><br><span class="line">&#123;</span><br><span class="line">endGame();</span><br><span class="line">&#125;</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">6</span>);</span><br><span class="line">color(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;暂停.&quot;</span>);</span><br><span class="line">Sleep(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_SPACE))</span><br><span class="line">&#123;</span><br><span class="line">gotoxy(<span class="number">100</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_ESCAPE))</span><br><span class="line">&#123;</span><br><span class="line">endGame();</span><br><span class="line">&#125;</span><br><span class="line">moveSnake();</span><br><span class="line">Sleep(sleepTime);     <span class="comment">//通过改变sleepTime大小更改贪吃蛇速度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">welcometoGame</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> n;</span><br><span class="line">color(<span class="number">15</span>);</span><br><span class="line">gotoxy(<span class="number">42</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;欢迎来到贪吃蛇小游戏&quot;</span>);</span><br><span class="line">color(<span class="number">12</span>);</span><br><span class="line">gotoxy(<span class="number">20</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按1开始游戏&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">65</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按任意除1按键退出游戏&quot;</span>);</span><br><span class="line">color(<span class="number">3</span> | FOREGROUND_INTENSITY);</span><br><span class="line">gotoxy(<span class="number">40</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;初始生命：%d &quot;</span>,life);</span><br><span class="line">gotoxy(<span class="number">40</span>, <span class="number">14</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;每个食物得分： %d分&quot;</span>, addGrade);</span><br><span class="line">gotoxy(<span class="number">38</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;碰墙或咬到自己即Game Over.&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">38</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;↑(W) ↓(S) ←(A) →(D)控制蛇的移动&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">41</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;F1 加速，F2 减速&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">40</span>, <span class="number">22</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空格space：暂停游戏&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">43</span>, <span class="number">24</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ESC ：退出游戏&quot;</span>);</span><br><span class="line">gotoxy(<span class="number">43</span>, <span class="number">28</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择:&quot;</span>);</span><br><span class="line">n = getch();</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">&#123;</span><br><span class="line">createMap(); <span class="comment">// 创建地图</span></span><br><span class="line">initSnake(); <span class="comment">// 初始化贪吃蛇</span></span><br><span class="line">createFood();  <span class="comment">// 生成食物</span></span><br><span class="line">keyboardControl(); <span class="comment">// 键盘控制</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;mode con cols=100 lines=30&quot;</span>);</span><br><span class="line">hideCursor();</span><br><span class="line">welcometoGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://img-blog.csdnimg.cn/0eaacc6672a848368a09209dfe1d4e96.png" alt="在这里插入图片描述"></p><pre><code>                                                                                 欢迎界面</code></pre><p><img src="https://img-blog.csdnimg.cn/5c1d5243dff149ac902bb2dc5c38be45.png" alt="在这里插入图片描述"></p><pre><code>                                                                                     游戏界面</code></pre><h1 id="键盘键值对应表"><a href="#键盘键值对应表" class="headerlink" title="键盘键值对应表"></a><strong>键盘键值对应表</strong></h1><p>在写与键盘交互的程序时候，总是想键盘上的键值是多少，又想不起来。刚好找到了键盘键值对应表，这里先记录下来。</p><p>键盘键值运用的地方有很多，这里列几个运用键盘键值的地方：</p><p>1.判断用户按下的键是哪个，比如制作打字练习程序</p><p>2.判断方向按键，比如游戏里控制方向</p><h2 id="A-至-Z-键与-A-–-Z-字母的-ASCII-码-相同："><a href="#A-至-Z-键与-A-–-Z-字母的-ASCII-码-相同：" class="headerlink" title="A 至 Z 键与 A – Z 字母的 ASCII 码*相同："></a><strong>A</strong> <strong>至 Z 键与 A – Z 字母的</strong> <a href="https://zouzhongliang.com/index.php/2019/03/11/ascii-%E7%A0%81%E8%A1%A8/"><strong>ASCII</strong> <strong>码</strong></a>*<em>相同：</em></h2><p>值        描述</p><p>　　65        A 键</p><p>　　66        B 键</p><p>　　67        C 键</p><p>　　68        D 键</p><p>　　69        E 键</p><p>　　70        F 键</p><p>　　71        G 键</p><p>　　72        H 键</p><p>　　73        I 键</p><p>　　74        J 键</p><p>　　75        K 键</p><p>　　76        L 键</p><p>　　77        M 键</p><p>　　78        N 键</p><p>　　79        O 键</p><p>　　80        P 键</p><p>　　81        Q 键</p><p>　　82        R 键</p><p>　　83        S 键</p><p>　　84        T 键</p><p>　　85        U 键</p><p>　　86        V 键</p><p>　　87        W 键</p><p>　　88        X 键</p><p>　　89        Y 键</p><p>　　90        Z 键</p><p>　　</p><h2 id="0-至-9-键与数字-0-–-9-的-ASCII-码-相同："><a href="#0-至-9-键与数字-0-–-9-的-ASCII-码-相同：" class="headerlink" title="0 至 9 键与数字 0 – 9 的 ASCII 码*相同："></a><strong>0</strong> <strong>至 9 键与数字 0 – 9 的</strong> <a href="https://zouzhongliang.com/index.php/2019/03/11/ascii-%E7%A0%81%E8%A1%A8/"><strong>ASCII</strong> <strong>码</strong></a>*<em>相同：</em></h2><p>　值        描述</p><p>　　48        0 键</p><p>　　49        1 键</p><p>　　50        2 键</p><p>　　51        3 键</p><p>　　52        4 键</p><p>　　53        5 键</p><p>　　54        6 键</p><p>　　55        7 键</p><p>　　56        8 键</p><p>　　57        9 键</p><p>　　</p><h2 id="下列常数代表功能键："><a href="#下列常数代表功能键：" class="headerlink" title="下列常数代表功能键："></a><strong>下列常数代表功能键：</strong></h2><p>  值        描述</p><p>　　0x70        F1 键</p><p>　　0x71        F2 键</p><p>　　0x72        F3 键</p><p>　　0x73        F4 键</p><p>　　0x74        F5 键</p><p>　　0x75        F6 键</p><p>　　0x76        F7 键</p><p>　　0x77        F8 键</p><p>　　0x78        F9 键</p><p>　　0x79        F10 键</p><p>　　0x7A        F11 键</p><p>　　0x7B        F12 键</p><p>　　0x7C        F13 键</p><p>　　0x7D        F14 键</p><p>　　0x7E        F15 键</p><p>　　0x7F        F16 键</p><p>　　</p><h2 id="键盘常用ASCII码-对应宏定义"><a href="#键盘常用ASCII码-对应宏定义" class="headerlink" title="键盘常用ASCII码 对应宏定义"></a><strong>键盘常用ASCII码 对应宏定义</strong></h2><p>宏定义部份在windows.h头文件中可以找到，这样定义编程代码会更有阅读性。</p><p>比如 if ( c &#x3D;&#x3D; VK_ESCAPE )。判断输入的c是不是esc键</p><p>ESC键      VK_ESCAPE (27)</p><p>回车键     VK_RETURN (13)</p><p>TAB键：     VK_TAB (9)</p><p>Caps Lock键：  VK_CAPITAL (20)</p><p>Shift键：    VK_SHIFT ($10)</p><p>Ctrl键：    VK_CONTROL (17)</p><p>Alt键：     VK_MENU (18)</p><p>空格键：    VK_SPACE ($20&#x2F;32)</p><p>退格键：    VK_BACK (8)</p><p>左徽标键：   VK_LWIN (91)</p><p>右徽标键：   VK_RWIN (92)</p><p>鼠标右键快捷键：VK_APPS (93) </p><p>Insert键：    VK_INSERT (45)</p><p>Home键：     VK_HOME (36)</p><p>Page Up：    VK_PRIOR (33)</p><p>PageDown：    VK_NEXT (34)</p><p>End键：     VK_END (35)</p><p>Delete键：    VK_DELETE (46)</p><p>方向键(←)： VK_LEFT (37)</p><p>方向键(↑)： VK_UP (38)</p><p>方向键(→)： VK_RIGHT (39)</p><p>方向键(↓)： VK_DOWN (40)</p><p>F1键： VK_F1 (112)</p><p>F2键： VK_F2 (113)</p><p>F3键： VK_F3 (114)</p><p>F4键： VK_F4 (115)</p><p>F5键： VK_F5 (116)</p><p>F6键： VK_F6 (117)</p><p>F7键： VK_F7 (118)</p><p>F8键： VK_F8 (119)</p><p>F9键： VK_F9 (120)</p><p>F10键： VK_F10 (121)</p><p>F11键： VK_F11 (122)</p><p>F12键： VK_F12 (123)</p><p>Num Lock键： VK_NUMLOCK (144)</p><p>小键盘0： VK_NUMPAD0 (96)</p><p>小键盘1： VK_NUMPAD1 (97)</p><p>小键盘2： VK_NUMPAD2 (98)</p><p>小键盘3： VK_NUMPAD3 (99)</p><p>小键盘4： VK_NUMPAD4 (100)</p><p>小键盘5： VK_NUMPAD5 (101)</p><p>小键盘6： VK_NUMPAD6 (102)</p><p>小键盘7： VK_NUMPAD7 (103)</p><p>小键盘8： VK_NUMPAD8 (104)</p><p>小键盘9： VK_NUMPAD9 (105)</p><p>小键盘.： VK_DECIMAL (110)</p><p>小键盘*： VK_MULTIPLY (106)</p><p>小键盘+： VK_ADD (107)</p><p>小键盘-： VK_SUBTRACT (109)</p><p>小键盘&#x2F;： VK_DIVIDE (111)</p><p>Pause Break键： VK_PAUSE (19)</p><p>Scroll Lock键： VK_SCROLL (145)</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户和组管理</title>
      <link href="/2022/12/22/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/"/>
      <url>/2022/12/22/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="删除账户-userdel"><a href="#删除账户-userdel" class="headerlink" title="删除账户 userdel"></a>删除账户 userdel</h2><p>删除普通账户shahengdh</p><p>用<code>userdel -rf 用户</code>可避免新建此账户时出现该用户目录已存在的问题。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5f44a79946fff275e87050218172288a.png" alt="img"></p><p>&#x2F;etc&#x2F;passwd 保存了登录linux系统的用户信息，查看此文件，可以看到没有其他用户</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1b0b120bd08ea1f0f3199309b083bf67.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/878803ed83c82a2968cf4ee0dff72b59.png" alt="img"></p><h2 id="挂载磁盘-mount"><a href="#挂载磁盘-mount" class="headerlink" title="挂载磁盘 mount"></a>挂载磁盘 mount</h2><p>挂载到 &#x2F;mnt</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fZDBMmBV-1671705025077)(null)]</p><h2 id="添加用户-useradd"><a href="#添加用户-useradd" class="headerlink" title="添加用户 useradd"></a>添加用户 useradd</h2><p>添加两个用户</p><p><img src="https://img-blog.csdnimg.cn/img_convert/660552f1dbd29c97d7f97c86b342f972.png" alt="img"></p><p>查看进程</p><p><img src="https://img-blog.csdnimg.cn/img_convert/57f88dd6cf38853c5b43ff3c89f83a28.png" alt="image-20221222174525502"></p><p>查看所有登录情况 who</p><p><code>who -a</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fbe70e6b342fe6e22bb8cd859942df08.png" alt="img"></p><p>&#x2F;var&#x2F;run&#x2F;utmp：记录当前正在登录系统的用户信息，把它输入进文件。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/abf07fcbf47b49d69d3255488b894721.png" alt="img"></p><h2 id="注销-logout"><a href="#注销-logout" class="headerlink" title="注销 logout"></a><strong>注销</strong> logout</h2><p>用户1注销</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e3851a409a422bcfafebda9c2b5f378.png" alt="img"></p><p>用户2注销</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2205573cf4d4a4dde986184676d012b8.png" alt="img"></p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><ul><li><p>write</p><p>  语法: write 用户名</p><p>  功能描述：向另外一个用户发送信息，以<code>CTRL+D</code>作为结束</p><p>  例如,root发送问候信息：左边是Shdh1用户，右边是root</p></li></ul><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cRO3Bfqa-1671705019741)(<a href="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/clip_image021.png)]">https://cdn.jsdelivr.net/gh/daokunn/picGo/img/clip_image021.png)]</a></p><ul><li><p>wall</p><p>  语法:wall [message] [文件名]</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/4d1db7eb374f689a90bdb660392dec51.png" alt="image-20221222173445291"></p><h2 id="查看进程-top"><a href="#查看进程-top" class="headerlink" title="查看进程 top"></a>查看进程 top</h2><h3 id="查看指定用户进程"><a href="#查看指定用户进程" class="headerlink" title="查看指定用户进程"></a>查看指定用户进程</h3><p><code>top -u 用户名</code> </p><p>Root查询用户2进程</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2lbkNP2b-1671705025046)(null)]</p><h2 id="添加组-groupadd"><a href="#添加组-groupadd" class="headerlink" title="添加组 groupadd"></a>添加组 groupadd</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/7edb8b08d3a3c6fa060342a1620535a4.png" alt="img"></p><h2 id="添加用户到相关组-usermod"><a href="#添加用户到相关组-usermod" class="headerlink" title="添加用户到相关组 usermod"></a>添加用户到相关组 usermod</h2><p><code>usermod -G 组名 用户名</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c8ac3d965841e0a0dd1151978ce0c91e.png" alt="img"></p><p>添加用户ycc到xxxy20组</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2VHvE0QR-1671705025056)(null)]</p><p>查看组</p><p><code>cat /etc/group</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9383cf3daf3f2d6b1e3edc6f34c34f75.png" alt="img"></p><h2 id="设置指定用户为组管理员"><a href="#设置指定用户为组管理员" class="headerlink" title="设置指定用户为组管理员"></a>设置指定用户为组管理员</h2><p><code>gpasswd 组名 -A 用户</code></p><p><img src="https://img-blog.csdnimg.cn/68f94bc8eb6841279f1d27071a3f310d.png" alt="在这里插入图片描述"></p><h2 id="修改组密码"><a href="#修改组密码" class="headerlink" title="修改组密码"></a>修改组密码</h2><p><code>gpasswd 组名</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫学习笔记</title>
      <link href="/2022/12/15/HTTP-HTTPS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/12/15/HTTP-HTTPS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>r</p><p>http 和 https 都是用来传输文本数据的, https 比 http 有加密的功能，所以更加的安全。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>常用请求头信息</strong></p><ol><li>User-Agent: 请求载体的身份标识</li><li>Connection: 请求完毕后，是断开连接还是保持连接</li></ol><p>查看:浏览器—-&gt; 开发者工具—-&gt; network</p><p><strong>常用响应头信息</strong></p><ol><li>Content-Type: 服务器响应客户端的数据类型</li></ol><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>安全的超文本传输协议</p><p><strong>加密方式</strong></p><ul><li>对称密钥加密</li><li>非对称密钥加密</li><li>证书密钥加密</li></ul><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p>介绍:Python原生模块，功能强大，简单便捷，效率极高，替代 urllib 模块。</p><p>作用: 模拟浏览器发请求</p><p>环境安装 : <code>pip install requests</code></p><p>使用:</p><pre><code>- 指定 URL- 发起请求- 获取响应数据- 持久化存储</code></pre><p>实战编码1：获取百度首页的页面数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/15 15:39</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：爬取百度首页.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">功能: 爬取百度首页页面数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://baidu.com&#x27;</span></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line">    <span class="comment"># 获取响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./baidu.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取数据结束!&quot;</span>)</span><br></pre></td></tr></table></figure><p>实战编码2: 爬取百度指定词条对应的搜索页面(简易网页采集器)</p><p>实战编码3:破解百度翻译</p><p>加入UA伪装，看起来是一个正常的请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/15 16:14</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：简易网页采集器.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># UA伪装，封装到一个字典中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;http</span></span><br><span class="line"><span class="string">    ://www.baidu.com/s?&#x27;</span></span><br><span class="line">    <span class="comment"># 处理url携带的参数，封装到字典里</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;输入关键字:&#x27;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;wd&#x27;</span>:kw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 利用requests库传入参数</span></span><br><span class="line">    response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    fileName = kw + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(fileName,<span class="string">&quot;保存成功!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实战编码3:破解百度翻译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/15 19:58</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：百度翻译破解.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度翻译是post请求</span></span><br><span class="line"><span class="comment"># 响应数据是json数据</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1.指定url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment"># 2.进行UA伪装</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.post请求参数处理</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;输入单词:&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>:word</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 4.请求发送</span></span><br><span class="line">    response = requests.post(url=post_url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.获取响应数据(确认返回类型是json才可以用json方法)</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.持久化存储</span></span><br><span class="line">    fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(dic_obj,fp=fp,ensure_ascii=<span class="literal">False</span>)  <span class="comment"># 中文不能用ascii编码</span></span><br><span class="line">    <span class="built_in">print</span>(dic_obj)</span><br></pre></td></tr></table></figure><h1 id="单个网页处理"><a href="#单个网页处理" class="headerlink" title="单个网页处理"></a>单个网页处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/16 21:57</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：壁纸爬取.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建保存文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./wallhaven&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;./wallhaven&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://wallhaven.cc/toplist?page=1&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    page_text = requests.get(url=url,headers=headers).text</span><br><span class="line">    <span class="comment"># print(page_text) # 测试用的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察图片</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ex = <span class="string">&#x27;&quot;https://wallhaven.cc/w/.*?&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    img_src_list = re.findall(ex,page_text,re.S)</span><br><span class="line">    <span class="built_in">print</span>(img_src_list)</span><br><span class="line">    <span class="comment"># https://w.wallhaven.cc/full/vq/wallhaven-vqg28m.png</span></span><br><span class="line">    <span class="comment"># https://wallhaven.cc/w/vqg28m</span></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">        src = <span class="string">&#x27;https://w.wallhaven.cc/full/&#x27;</span> +src[<span class="number">24</span>:<span class="number">26</span>]+<span class="string">&#x27;/wallhaven-&#x27;</span>+ src[<span class="number">24</span>:-<span class="number">1</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            test = requests.get(url=src,headers=headers)</span><br><span class="line">            test.raise_for_status()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            src = src[:-<span class="number">3</span>] + <span class="string">&#x27;png&#x27;</span></span><br><span class="line">        <span class="comment"># 请求图片的二进制数据</span></span><br><span class="line">        img_data =requests.get(url=src,headers=headers).content</span><br><span class="line">        <span class="comment"># 生成图片名称</span></span><br><span class="line">        img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 图片路径</span></span><br><span class="line">        img_path = <span class="string">&#x27;./wallhaven/&#x27;</span>+ img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            <span class="built_in">print</span>(img_name,<span class="string">&quot;下载成功&quot;</span>)</span><br><span class="line">        <span class="comment"># print(src) # 测试用的</span></span><br></pre></td></tr></table></figure><p>分页爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/17 19:34</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：分页爬取.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./wallhaven&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;./wallhaven&#x27;</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置通用url模板</span></span><br><span class="line">    url = <span class="string">&#x27;https://wallhaven.cc/toplist?page=%d&#x27;</span></span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;你要爬取到第几页:&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">        <span class="comment"># 对应页码的url</span></span><br><span class="line">        new_url = <span class="built_in">format</span>(url%page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        page_text = requests.get(url=new_url,headers=headers).text</span><br><span class="line"></span><br><span class="line">        ex = <span class="string">&#x27;&quot;https://wallhaven.cc/w/.*?&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">        img_src_list = re.findall(ex,page_text,re.S)</span><br><span class="line">        <span class="built_in">print</span>(img_src_list)</span><br><span class="line">        <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">            src = <span class="string">&#x27;https://w.wallhaven.cc/full/&#x27;</span> +src[<span class="number">24</span>:<span class="number">26</span>]+<span class="string">&#x27;/wallhaven-&#x27;</span>+ src[<span class="number">24</span>:-<span class="number">1</span>] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                test = requests.get(url=src,headers=headers)</span><br><span class="line">                test.raise_for_status()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                src = src[:-<span class="number">3</span>] + <span class="string">&#x27;png&#x27;</span></span><br><span class="line">            <span class="comment"># 请求图片的二进制数据</span></span><br><span class="line">            img_data =requests.get(url=src,headers=headers).content</span><br><span class="line">            <span class="comment"># 生成图片名称</span></span><br><span class="line">            img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 图片路径</span></span><br><span class="line">            img_path = <span class="string">&#x27;./wallhaven/&#x27;</span>+ img_name</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(img_data)</span><br><span class="line">                <span class="built_in">print</span>(img_name,<span class="string">&quot;下载成功&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九江天气爬取</title>
      <link href="/2022/12/12/%E4%B9%9D%E6%B1%9F%E5%A4%A9%E6%B0%94%E7%88%AC%E5%8F%96/"/>
      <url>/2022/12/12/%E4%B9%9D%E6%B1%9F%E5%A4%A9%E6%B0%94%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2022/12/12 18:52</span></span><br><span class="line"><span class="string">@Author ： daokunn</span></span><br><span class="line"><span class="string">@File ：九江天气.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Motto: Don’t cry over spilt milk.</span></span><br><span class="line"><span class="string">功能: 查询九江当天的天气</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jj_weather</span>():</span><br><span class="line">    <span class="comment"># print(&#x27;九江&#x27;)</span></span><br><span class="line">    res = requests.get(<span class="string">&#x27;http://www.weather.com.cn/weather/101010100.shtml&#x27;</span>)</span><br><span class="line">    res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    html = res.text</span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>)<span class="comment">#解析文档</span></span><br><span class="line">    weathers = soup.find(<span class="built_in">id</span>=<span class="string">&quot;7d&quot;</span>,class_=<span class="string">&quot;c7d&quot;</span>).find(<span class="string">&#x27;ul&#x27;</span>,class_=<span class="string">&quot;t clearfix&quot;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> weather <span class="keyword">in</span> weathers:</span><br><span class="line">        weather_date = weather.find(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">        weather_wea = (weather.find(<span class="string">&#x27;p&#x27;</span>,class_=<span class="string">&#x27;wea&#x27;</span>))</span><br><span class="line">        weather_tem = (weather.find(<span class="string">&#x27;p&#x27;</span>,class_= <span class="string">&#x27;tem&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        result[<span class="string">&#x27;日期&#x27;</span>] = weather_date.text</span><br><span class="line">        result[<span class="string">&#x27;天气&#x27;</span>] = weather_wea.text</span><br><span class="line">        result[<span class="string">&#x27;温度&#x27;</span>] = weather_tem.text[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># print(&#x27;日期:&#x27;,result[&#x27;日期&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(jj_weather())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客的备份</title>
      <link href="/2022/11/28/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD/"/>
      <url>/2022/11/28/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微机原理笔记</title>
      <link href="/2022/11/28/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/28/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124102010217.png" alt="image-20221124102010217"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124102222591.png" alt="image-20221124102222591"></p><p>输入&#x2F;输出接口</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124102731499.png" alt="image-20221124102731499"></p><p>总线</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124102945622.png" alt="image-20221124102945622"></p><p>概念结构</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124103158370.png" alt="image-20221124103158370"></p><p>打字</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124103220938.png" alt="image-20221124103220938"></p><h2 id="看"><a href="#看" class="headerlink" title="看"></a>看</h2><p>顺序执行</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124103848793.png" alt="image-20221124103848793"></p><p>并行执行</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124103956901.png" alt="image-20221124103956901"></p><p>冯诺依曼体系</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124104602706.png" alt="image-20221124104602706"></p><p>改进：哈弗结构</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124104821279.png" alt="image-20221124104821279"></p><h2 id="bcd"><a href="#bcd" class="headerlink" title="bcd"></a>bcd</h2><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124105216262.png" alt="image-20221124105216262"></p><p>转换</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124105243484.png" alt="image-20221124105243484"></p><h2 id="8088、8086处理器"><a href="#8088、8086处理器" class="headerlink" title="8088、8086处理器"></a>8088、8086处理器</h2><p>最小模式</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124110447533.png" alt="image-20221124110447533"></p><p>最大模式</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124110514961.png" alt="image-20221124110514961"></p><p>工作模式</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124110611151.png" alt="image-20221124110611151"></p><h3 id="主要引脚信号"><a href="#主要引脚信号" class="headerlink" title="主要引脚信号"></a>主要引脚信号</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111141915.png" alt="image-20221124111141915"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111323931.png" alt="image-20221124111323931"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111505371.png" alt="image-20221124111505371"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111536328.png" alt="image-20221124111536328"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111739743.png" alt="image-20221124111739743"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124111938556.png" alt="image-20221124111938556"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124112038716.png" alt="image-20221124112038716"></p><p>8088内部结构</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124112316674.png" alt="image-20221124112316674"></p><p>8088寄存器</p><p>状态位置举例</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221124115155197.png" alt="image-20221124115155197"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下安装Python3</title>
      <link href="/2022/11/28/Centos7%E4%B8%8B%E5%AE%89%E8%A3%85Python3/"/>
      <url>/2022/11/28/Centos7%E4%B8%8B%E5%AE%89%E8%A3%85Python3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="首先要知道python的安装位置"><a href="#首先要知道python的安装位置" class="headerlink" title="首先要知道python的安装位置"></a>首先要知道python的安装位置</h2><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128143344466.png" alt="image-20221128143344466"></p><p>可以看见 Python 是安装在 &#x2F;usr&#x2F;bin 里面的。</p><h2 id="我们进入安装目录-x2F-usr-x2F-bin"><a href="#我们进入安装目录-x2F-usr-x2F-bin" class="headerlink" title="我们进入安装目录 &#x2F;usr&#x2F;bin"></a>我们进入安装目录 &#x2F;usr&#x2F;bin</h2><p>输入 <code>ll python*</code>查看 python 的链接</p><p>​<img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128143652125.png" alt="image-20221128143652125"></p><p>从上图我们可以看到，Python 是指向 python 2 ,而 Python 2 是指向 Python 2.7。</p><p>现在我们要安装 Python 3,应当让python 指向 python 3 ，而 Python 2 继续指向 Python 2.7，这样可以让两个版本共存。</p><h2 id="下载-Python-3"><a href="#下载-Python-3" class="headerlink" title="下载 Python 3"></a>下载 Python 3</h2><p>官方的下载地址是: <a href>https://www.python.org/ftp/python/</a>,在这里可以找到所有版本，选择所需要的tar.x 文件</p><p>使用 wget 下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://npm.taobao.org/mirrors/python/3.7.5/Python-3.7.5.tar.xz</span><br><span class="line"><span class="comment"># 如果这个不行就换成官方的下载地址</span></span><br><span class="line">wget  https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tar.xz</span><br></pre></td></tr></table></figure><blockquote><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。<br>默认文件下载在当前工作路径。可以设置-P参数指定文件的下载地址</p></blockquote><p>这里在tmp 文件下用的淘宝镜像,选择的版本是 3.7.5 ，提高下载速度。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128144152511.png" alt="image-20221128144152511"></p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><p>压缩文件：<code> tar -czvf</code></p><p>解压文件：<code> tar -xzvf</code></p><p>这里我们使用<code> tar -xzvf Python-3.7.5.tar.xz</code>，笔者在这里出现了问题。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128150354725.png" alt="image-20221128150354725"></p><p>如果出现问题，可按以下方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xz -d Python-3.7.5.tar.xz</span><br><span class="line"></span><br><span class="line">tar -xf Python-3.7.5.tar</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128150527557.png" alt="image-20221128150527557"></p><p>成功了之后，可以看见一个 Python-3.7.5 文件</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128150745592.png" alt="image-20221128150745592"></p><h2 id="编译和安装-Python"><a href="#编译和安装-Python" class="headerlink" title="编译和安装 Python"></a>编译和安装 Python</h2><h3 id="安装编译工具-root下，一次性完成"><a href="#安装编译工具-root下，一次性完成" class="headerlink" title="安装编译工具(root下，一次性完成)"></a>安装编译工具(root下，一次性完成)</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br></pre></td></tr></table></figure><h3 id="创建编译目录"><a href="#创建编译目录" class="headerlink" title="创建编译目录"></a>创建编译目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/python3</span><br></pre></td></tr></table></figure><h3 id="安装-Python-3"><a href="#安装-Python-3" class="headerlink" title="安装 Python 3"></a>安装 Python 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  Python-3.7.5 </span><br><span class="line">./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没报错，那么恭喜你，安装成功了</p><h2 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h2><p>先将原来的链接备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/local/bin/python3</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure><p>要将<code>python</code>命令设置为<code>python3</code>，可以创建一个软链接（symbolic link），这样输入<code>python</code>时，系统会调用<code>python3</code>。同样的方法也适用于<code>pip</code>。以下是具体步骤：</p><ol><li><p>创建python的软链接指向python3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure></li><li><p>如果您已经安装了pip3,同样创建一个软链接使pip指向pip3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure></li><li><p>确认更改：</p><ul><li><p>检查python版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li><li><p>检查pip版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试找到 Python 3 的路径</span></span><br><span class="line">PYTHON3=$(<span class="built_in">which</span> python3 2&gt;/dev/null)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 which 命令没有找到 Python 3</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PYTHON3</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 使用 find 命令查找包含 &#x27;/bin/python3&#x27; 的路径</span></span><br><span class="line">    PYTHON3=$(find / -name <span class="string">&quot;python3&quot;</span> -path <span class="string">&quot;*/bin/python3&quot;</span> 2&gt;/dev/null | <span class="built_in">head</span> -n 1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果 find 命令找到了 Python 3 的路径</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$PYTHON3</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 将找到的 Python 3 路径添加到 PATH 环境变量中</span></span><br><span class="line">        <span class="built_in">export</span> PATH=$(<span class="built_in">dirname</span> <span class="string">&quot;<span class="variable">$PYTHON3</span>&quot;</span>):<span class="variable">$PATH</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已将 Python 3 添加到 PATH 环境变量中。&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;在系统中没有找到 Python 3。请确保 Python 3 已安装。&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 Python 3 的路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;使用 Python 3 的路径为: <span class="variable">$PYTHON3</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>输入<code>python -V</code></p><p>输入<code>pip -V</code></p><p>常看本机的Python 版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><h1 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h1><h2 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Python版本和下载地址的变量</span></span><br><span class="line">PYTHON_VERSION=<span class="string">&quot;3.7.5&quot;</span></span><br><span class="line">DOWNLOAD_URL=<span class="string">&quot;https://www.python.org/ftp/python/<span class="variable">$PYTHON_VERSION</span>/Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz&quot;</span></span><br><span class="line">INSTALL_DIR=<span class="string">&quot;/usr/local/python<span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;此脚本必须以root权限运行&quot;</span> </span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Python安装位置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查Python安装位置...&quot;</span></span><br><span class="line"><span class="built_in">which</span> python &amp;&gt;/dev/null &amp;&amp; &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python已安装在<span class="subst">$(which python)</span>&quot;</span></span><br><span class="line">&#125; || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python未安装在标准路径&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Python</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;下载Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">wget -O Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz <span class="variable">$DOWNLOAD_URL</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;下载成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;下载失败，请检查网络连接或下载地址&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;解压Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">tar -xvf Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;解压成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;解压失败，请检查文件是否完整&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> Python-<span class="variable">$PYTHON_VERSION</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装编译工具和依赖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装编译工具和依赖...&quot;</span></span><br><span class="line">yum -y groupinstall <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建编译目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;创建编译目录...&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$INSTALL_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译和安装Python</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;编译和安装Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">./configure --prefix=<span class="variable">$INSTALL_DIR</span> --enable-optimizations --with-ssl &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;配置成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;配置失败，请检查依赖是否正确安装&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line">make &amp;&amp; make install &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;安装成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;编译或安装失败，请检查编译工具是否正确安装&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建链接</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;创建链接...&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"><span class="built_in">ln</span> -s <span class="variable">$INSTALL_DIR</span>/bin/python3 /usr/bin/python &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Python链接创建成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python链接创建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ln</span> -s <span class="variable">$INSTALL_DIR</span>/bin/pip3 /usr/bin/pip &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Pip链接创建成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Pip链接创建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;验证安装...&quot;</span></span><br><span class="line">python --version &amp;&amp; pip --version &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Python和Pip版本验证成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;验证失败，请检查链接是否创建正确&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Python <span class="variable">$PYTHON_VERSION</span> 安装完成！&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;此脚本必须以root权限运行&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装EPEL仓库，以便可以安装更多的更新包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装EPEL仓库...&quot;</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新yum缓存</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;更新yum缓存...&quot;</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装Python 3...&quot;</span></span><br><span class="line">yum install -y python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;验证Python安装...&quot;</span></span><br><span class="line">python3 --version &amp;&amp; pip3 --version &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Python3和Pip3安装成功。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出完成信息</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Python 3 安装完成！&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Python版本和下载地址的变量</span></span><br><span class="line">PYTHON_VERSION=<span class="string">&quot;3.7.5&quot;</span></span><br><span class="line">DOWNLOAD_URL=<span class="string">&quot;https://www.python.org/ftp/python/<span class="variable">$PYTHON_VERSION</span>/Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz&quot;</span></span><br><span class="line">INSTALL_DIR=<span class="string">&quot;/usr/local/python<span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line">PYTHON_ARCHIVE=<span class="string">&quot;Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz&quot;</span></span><br><span class="line">PYTHON_SOURCE_DIR=<span class="string">&quot;Python-<span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;此脚本必须以root权限运行&quot;</span> </span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Python安装位置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查Python安装位置...&quot;</span></span><br><span class="line"><span class="built_in">which</span> python &amp;&gt;/dev/null &amp;&amp; &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python已安装在<span class="subst">$(which python)</span>&quot;</span></span><br><span class="line">&#125; || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python未安装在标准路径&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Python</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$PYTHON_ARCHIVE</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;下载Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">    wget -O <span class="variable">$PYTHON_ARCHIVE</span> <span class="variable">$DOWNLOAD_URL</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;下载成功&quot;</span> || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;下载失败，请检查网络连接或下载地址&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python安装包已存在，跳过下载步骤。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$PYTHON_SOURCE_DIR</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;解压Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">    tar -xvf <span class="variable">$PYTHON_ARCHIVE</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;解压成功&quot;</span> || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;解压失败，请检查文件是否完整&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python源代码目录已存在，跳过解压步骤。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PYTHON_SOURCE_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装编译工具和依赖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装编译工具和依赖...&quot;</span></span><br><span class="line">yum -y groupinstall <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建编译目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;创建编译目录...&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$INSTALL_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译和安装Python</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;编译和安装Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line">./configure --prefix=<span class="variable">$INSTALL_DIR</span> --enable-optimizations --with-ssl &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;配置成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;配置失败，请检查依赖是否正确安装&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line">make &amp;&amp; make install &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;安装成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;编译或安装失败，请检查编译工具是否正确安装&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建链接</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;创建链接...&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/bin/python ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">ln</span> -sf <span class="variable">$INSTALL_DIR</span>/bin/python3 /usr/bin/python &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Python链接创建成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Python链接创建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ln</span> -sf <span class="variable">$INSTALL_DIR</span>/bin/pip3 /usr/bin/pip &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Pip链接创建成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Pip链接创建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;验证安装...&quot;</span></span><br><span class="line">python --version &amp;&amp; pip --version &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Python和Pip版本验证成功&quot;</span> || &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;验证失败，请检查链接是否创建正确&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Python <span class="variable">$PYTHON_VERSION</span> 安装完成！&quot;</span></span><br><span class="line"><span class="comment"># 输出安装包的位置，Python安装的位置和pip安装的位置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装包位置：<span class="subst">$(pwd)</span>/Python-<span class="variable">$PYTHON_VERSION</span>.tar.xz&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Python安装位置：<span class="variable">$INSTALL_DIR</span>/bin/python3&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Pip安装位置：<span class="variable">$INSTALL_DIR</span>/bin/pip3&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源码包卸载"><a href="#源码包卸载" class="headerlink" title="源码包卸载"></a>源码包卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入要卸载的Python版本</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入要卸载的Python版本（例如3.7.5）: &quot;</span> PYTHON_VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义安装目录变量</span></span><br><span class="line">INSTALL_DIR=<span class="string">&quot;/usr/local/python<span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;此脚本必须以root权限运行&quot;</span> </span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载Python</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在卸载Python <span class="variable">$PYTHON_VERSION</span>...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否通过yum安装</span></span><br><span class="line"><span class="keyword">if</span> yum list installed | grep -q python<span class="variable">$PYTHON_VERSION</span>; <span class="keyword">then</span></span><br><span class="line">    yum remove -y python<span class="variable">$PYTHON_VERSION</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已通过yum卸载Python <span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否通过rpm安装</span></span><br><span class="line"><span class="keyword">if</span> rpm -q python<span class="variable">$PYTHON_VERSION</span>; <span class="keyword">then</span></span><br><span class="line">    rpm -e python<span class="variable">$PYTHON_VERSION</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已通过rpm卸载Python <span class="variable">$PYTHON_VERSION</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否存在编译安装的Python目录</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$INSTALL_DIR</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="variable">$INSTALL_DIR</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已删除编译安装的Python目录 <span class="variable">$INSTALL_DIR</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除软链接</span></span><br><span class="line"><span class="keyword">if</span> [ -L <span class="string">&quot;/usr/bin/python&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -f /usr/bin/python</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已删除软链接 /usr/bin/python&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -L <span class="string">&quot;/usr/bin/pip&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -f /usr/bin/pip</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已删除软链接 /usr/bin/pip&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复原来的Python链接（如果有备份）</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;/usr/bin/python.bak&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mv</span> /usr/bin/python.bak /usr/bin/python</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已恢复原来的Python链接&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Python <span class="variable">$PYTHON_VERSION</span> 卸载完成！&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="YUM的处理"><a href="#YUM的处理" class="headerlink" title="YUM的处理"></a>YUM的处理</h1><p>而 <code>yum</code> 在 CentOS 7 中默认使用 Python 2.7。Python2.7 的链接不要删除。</p><h2 id="yum使用python2-7"><a href="#yum使用python2-7" class="headerlink" title="yum使用python2.7"></a>yum使用python2.7</h2><ol><li><p><strong>备份原始的 yum 和其他相关文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/bin/yum /usr/bin/yum.bak</span><br><span class="line"><span class="built_in">cp</span> /usr/libexec/urlgrabber-ext-down /usr/libexec/urlgrabber-ext-down.bak</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 <code>/usr/bin/yum</code> 文件</strong>： 将第一行的 <code>#!/usr/bin/python</code> 更改为 <code>#!/usr/bin/python2.7</code>，这样 yum 就会使用 Python 2.7。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s|#!/usr/bin/python|#!/usr/bin/python2.7|&#x27;</span> /usr/bin/yum</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 <code>/usr/libexec/urlgrabber-ext-down</code> 文件</strong>： 同样，将第一行的 <code>#!/usr/bin/python</code> 更改为 <code>#!/usr/bin/python2.7</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s|#!/usr/bin/python|#!/usr/bin/python2.7|&#x27;</span> /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure></li><li><p><strong>验证 <code>yum</code> 是否能正常工作</strong>： 运行 <code>yum</code> 命令来检查是否正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --version</span><br></pre></td></tr></table></figure></li></ol><h2 id="脚本法"><a href="#脚本法" class="headerlink" title="脚本法"></a>脚本法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到Python 2.7的路径</span></span><br><span class="line">PYTHON2_PATH=$(find / -name <span class="string">&quot;python2&quot;</span> -path <span class="string">&quot;*/bin/python2&quot;</span> 2&gt;/dev/null | <span class="built_in">head</span> -n 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改yum和urlgrabber-ext-down的头部指向python2</span></span><br><span class="line">sed -i <span class="string">&#x27;s|#!/usr/bin/python|#!/usr/bin/python2|&#x27;</span> /usr/bin/yum</span><br><span class="line">sed -i <span class="string">&#x27;s|#!/usr/bin/python|#!/usr/bin/python2|&#x27;</span> /usr/libexec/urlgrabber-ext-down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试yum是否可用</span></span><br><span class="line"><span class="keyword">if</span> yum --version; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Yum现在可用&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Yum仍然不可用&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有问题将将文件的第一行<code>#!/usr/bin/python</code>更改为<code>#!/usr/bin/python2</code>，确保它指向Python 2的正确路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim  /usr/bin/yum</span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup4 的使用</title>
      <link href="/2022/11/28/BeautifulSoup4%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/28/BeautifulSoup4%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="BeautifulSoup4-的使用"><a href="#BeautifulSoup4-的使用" class="headerlink" title="BeautifulSoup4 的使用"></a>BeautifulSoup4 的使用</h2><p>待测试的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dot = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;dotcpp&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;b&gt;c语言网&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;编程网站</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;blog&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;oj&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(dot,<span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 采用Python中自带的html.parser</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())   <span class="comment"># 换行,美观</span></span><br><span class="line"><span class="built_in">print</span>(soup.title)  <span class="comment"># 获取title标签的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.name) <span class="comment"># 获取title标签的名字</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.string) <span class="comment"># 获取title标签的文本内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.head) <span class="comment"># 获取head标签的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.div)<span class="comment"># 获取第一个div标签中的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)  <span class="comment"># 获取第一个a标签中的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&quot;a&quot;</span>)) <span class="comment"># 获取所有的a标签，并遍历打印a标签中的href的值</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="built_in">id</span> = <span class="string">&quot;dot&quot;</span>)) <span class="comment"># 获取id=&quot;dot&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span></span><br><span class="line">   dotcpp</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="code">    c语言网</span></span><br><span class="line"><span class="code">   &lt;/b&gt;</span></span><br><span class="line"><span class="code">  &lt;/p&gt;</span></span><br><span class="line"><span class="code">  &lt;p&gt;</span></span><br><span class="line"><span class="code">   编程网站</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;</span></span><br><span class="line"><span class="code">    home</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">   ,</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;</span></span><br><span class="line"><span class="code">    blog</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">   &lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;</span></span><br><span class="line"><span class="code">    oj</span></span><br><span class="line"><span class="code">   &lt;/a&gt;</span></span><br><span class="line"><span class="code">  &lt;/p&gt;</span></span><br><span class="line"><span class="code"> &lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code">&lt;title&gt;dotcpp&lt;/title&gt;</span></span><br><span class="line"><span class="code">title</span></span><br><span class="line"><span class="code">dotcpp</span></span><br><span class="line"><span class="code">&lt;head&gt;&lt;title&gt;dotcpp&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="code">None</span></span><br><span class="line"><span class="code">&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;</span></span><br><span class="line"><span class="code">[&lt;a href=&quot;https://www.dotcpp.com/&quot; id=&quot;link1&quot;&gt;home&lt;/a&gt;, &lt;a href=&quot;https://blog.dotcpp.com/&quot; id=&quot;link2&quot;&gt;blog&lt;/a&gt;, &lt;a href=&quot;https://www.dotcpp.com/oj/problemset.html&quot; id=&quot;link3&quot;&gt;oj&lt;/a&gt;]</span></span><br><span class="line"><span class="code">None</span></span><br></pre></td></tr></table></figure><p>注意解析html网页的解析方式，我们采用了Python中自带的html.parser，其实还可以选择 lxml HTML、lxml XML 和 html5lib 等解析器，他们分别有着优劣点。我们在使用BeautifulSoup的时候一定要注意的就是网页解析，正确的解析方式十分重要。</p><h2 id="BeautifulSoup4-的四个对象"><a href="#BeautifulSoup4-的四个对象" class="headerlink" title="BeautifulSoup4 的四个对象"></a>BeautifulSoup4 的四个对象</h2><ol><li><strong>Tag</strong></li></ol><p>​对应HTML中的标签。如上:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.title) <span class="comment"># 获取title标签的名称</span></span><br><span class="line"><span class="built_in">print</span>(soup.a) <span class="comment"># 获取所有的a标签中的所有内容</span></span><br></pre></td></tr></table></figure><p>​Tag 有两个属性，分别是 name 和 attrs，name 也就是标签的名字，attrs 对应 class、id 等信息。</p><ol start="2"><li><h3 id="NavigableSting"><a href="#NavigableSting" class="headerlink" title="NavigableSting"></a><strong>NavigableSting</strong></h3></li></ol><p>​对应的是标签内部的文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(suop.title.string) <span class="comment"># 获取标签的所有内容</span></span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a><strong>BeautifulSoup</strong></h3></li></ol><p>​对应的是文档中的内容，它类似于一个特殊的标签，我们可以获取到它的类型、名称和属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a><strong>Comment</strong></h3></li></ol><p>​是一个特殊的NavigableSting对象，它输出的内容没有注释符号，如果不加以处理会影响我们对文档的解析，因为这种方式会忽略掉文档的注释，</p><p>​    因此注释中的内容会以代码格式被解析出来，进而影响我们的后续操作，所有我们 一般会采用.string来输出内容。</p><h2 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h2><p>在解析文档文件的过程中，如果需要遍历文档，我们需要使用到一些特殊的方法。</p><ol><li><h3 id="contents"><a href="#contents" class="headerlink" title=".contents"></a><strong>.contents</strong></h3><p>​获取Tag的所有子节点，以列表的形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con =  soup.head.contents</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> con:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li><li><h3 id="children"><a href="#children" class="headerlink" title=".children"></a><strong>.children</strong></h3></li></ol><p>​获取Tag的所有子节点，存储在一个生成器中，可以直接通过遍历的方式来访问，和上面例子一致。</p><ol start="3"><li><h3 id="descendants"><a href="#descendants" class="headerlink" title=".descendants"></a><strong>.descendants</strong></h3></li></ol><p>​ 获取Tag的所有子孙节点。</p><ol start="4"><li><h3 id="strings"><a href="#strings" class="headerlink" title=".strings"></a><strong>.strings</strong></h3></li></ol><p>​获取子孙节点中的所有内容，可以通过遍历的方式来访问。</p><ol start="5"><li><strong>.parent</strong></li></ol><p>​    获取到Tag标签的父节点。</p><ol start="6"><li><strong>.parents</strong></li></ol><p>​    递归得到所有父辈节点，存放在一个生成器中，可以通过遍历的方式来访问。</p><ol start="7"><li><strong>.previous_siblings</strong></li></ol><p>​    获取Tag上面的所有兄弟节点，返回生成器。</p><ol start="8"><li><strong>.next_siblings</strong></li></ol><p>​    获取Tag下面的所有兄弟节点，返回生成器。</p><p>​    9. <strong>.has_attr</strong></p><p>​    用于判断Tag是否包含属性。</p><h2 id="搜索文档数"><a href="#搜索文档数" class="headerlink" title="搜索文档数"></a>搜索文档数</h2><p>​我们在使用的过程中如果要匹配到搜索内容的全部信息，这时候就需要搜索整个文档树，我们需要采用到<strong>find_all方法</strong>，这个过滤器能贯穿整个搜索的AIP，它可以使用在tag的name中。</p><p>语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all( name , attrs , recursive , text , **kwargs )</span><br></pre></td></tr></table></figure><p> name参数即tag的名字，attrs为类或id，recursive为递归性，text为文本参数。</p>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7系统的yum源更换</title>
      <link href="/2022/11/28/Centos7%E7%B3%BB%E7%BB%9F%E7%9A%84yum%E6%BA%90%E6%9B%B4%E6%8D%A2/"/>
      <url>/2022/11/28/Centos7%E7%B3%BB%E7%BB%9F%E7%9A%84yum%E6%BA%90%E6%9B%B4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="手动更换"><a href="#手动更换" class="headerlink" title="手动更换"></a>手动更换</h1><p>查看当前已有的 yum 源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>  /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p>备份yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> CentOS-Base.repo CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221128153320081.png" alt="image-20221128153320081"></p><p>更换新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>清理原先的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>生成yum源缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>如果还是有问题，可以把 yum.repos.d 文件下，所有的文件全部删除，再执行上述操作。（实在不行的情况下）</p><h1 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h1><p>是否需要root权限，您可以自行选择。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查用户是否为root</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;此脚本必须以root权限运行&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份当前的yum源配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;备份当前的yum源配置文件...&quot;</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载阿里云源配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;下载阿里云源配置文件...&quot;</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;清除yum缓存...&quot;</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出完成信息</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Yum源已更换为阿里云源。&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时候这个好慢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/enabled=1/enabled=0/&#x27;</span> /etc/yum/pluginconf.d/fastestmirror.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯基本输入输出格式</title>
      <link href="/2022/11/13/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/11/13/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="A-B-1-0"><a href="#A-B-1-0" class="headerlink" title="A+B 1.0"></a>A+B 1.0</h3><p>A+B 求和，输出结果。</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195007572.png" alt="image-20230101195007572"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195102793.png" alt="image-20230101195102793"></p><p>运行结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195134311.png" alt="image-20230101195134311"></p><h3 id="A-B-2-0"><a href="#A-B-2-0" class="headerlink" title="A+B 2.0"></a>A+B 2.0</h3><p>相比第一道而言，本题会提前告诉你是几组数据，第一行的2就表示有两组数据，然后再逐行输入每组的两个数字</p><p>因此这道题，我们需要提前先接收一个数字n，然后再循环n次接收。</p><p>举例</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195222489.png" alt="image-20230101195222489"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195306126.png" alt="image-20230101195306126"></p><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195435506.png" alt="image-20230101195435506"></p><h3 id="A-B-3-0"><a href="#A-B-3-0" class="headerlink" title="A+B 3.0"></a>A+B 3.0</h3><p>多组输入，每组输入两个数，但以a和b分别为0表示结束输入。</p><p>举例</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101194836904.png" alt="image-20230101194836904"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101194937062.png" alt="image-20230101194937062"></p><h3 id="A-B-C-…-N-4-0"><a href="#A-B-C-…-N-4-0" class="headerlink" title="A+B+C+….+N   4.0"></a>A+B+C+….+N   4.0</h3><p>​这一题同样是求和，但是不是a+b两个数字了，而是求n个数的和，输入为先输入一个数组n，然后后面跟n个数字，求这n个数字的和。同样有多组数据，当n&#x3D;0时结束。</p><p>举例</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101195643303.png" alt="image-20230101195643303"></p><p>​本题就是累加求和，只不过个数n需要提前指定，为0表示结束，故而我们可以先接收n并且判断n非0再进入循环，循环n次累加求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    l = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(l)):</span><br><span class="line">        l[i] = <span class="built_in">int</span>(l[i])</span><br><span class="line">        <span class="built_in">sum</span> += l[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101200414978.png" alt="image-20230101200414978"></p><h3 id="A-B-5-0"><a href="#A-B-5-0" class="headerlink" title="A+B 5.0"></a>A+B 5.0</h3><p>题目一开始就告诉有多少组N，每一组又告诉有多少个数字M。</p><p>举例</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101200556719.png" alt="image-20230101200556719"></p><p>​这个题我们可以用前面格式的组合，即两层循环N,M分别控制次数，M个数字累加即可，依旧注意求和的变量要每次归零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    l = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(l)):</span><br><span class="line">        l[i] = <span class="built_in">int</span>(l[i])</span><br><span class="line">        <span class="built_in">sum</span> += l[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201037886.png" alt="image-20230101201037886"></p><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201101389.png" alt="image-20230101201101389"></p><h3 id="A-B-6-0"><a href="#A-B-6-0" class="headerlink" title="A+B 6.0"></a>A+B 6.0</h3><p>这一题也是多组输入,但是并没有说什么时候停止。</p><p>举例</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201254270.png" alt="image-20230101201254270"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">            <span class="built_in">sum</span> += a[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201538575.png" alt="image-20230101201538575"></p><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201719433.png" alt="image-20230101201719433"></p><h3 id="A-B-7-0"><a href="#A-B-7-0" class="headerlink" title="A+B 7.0"></a>A+B 7.0</h3><p>和第一节的题目非常像，又回到了两个数的和的问题，但唯独不同的是输出格式要多一个换行，如格式：</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101201857291.png" alt="image-20230101201857291"></p><p>​仔细观察发现，输出的两个答案中间是有一个空行的，这就是本题的要求，即多组输入数据，但每个输出最后都带一个换行，特别的是，OJ对于最后一组数据的换行、回车、空格是不做处理的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">        <span class="built_in">print</span>(a+b)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101202112892.png" alt="image-20230101202112892"></p><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101202223898.png" alt="image-20230101202223898"></p><h3 id="A-B-8-0"><a href="#A-B-8-0" class="headerlink" title="A+B 8.0"></a>A+B 8.0</h3><p>最后一个例题，和之前也看起来差不多，还是多个数字求和，不同的是在输出格式要求多一个空行，如输入：</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101202333357.png" alt="image-20230101202333357"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    l = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(l)):</span><br><span class="line">        l[i] = <span class="built_in">int</span>(l[i])</span><br><span class="line">        <span class="built_in">sum</span> += l[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101202623489.png" alt="image-20230101202623489"></p><p>结果</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230101202859112.png" alt="image-20230101202859112"></p><h3 id="输入多行字符串"><a href="#输入多行字符串" class="headerlink" title="输入多行字符串"></a>输入多行字符串</h3><p><code>n=int(input());a=[input() for _ in range(n)]</code></p><h3 id="输入多行字符组"><a href="#输入多行字符组" class="headerlink" title="输入多行字符组"></a>输入多行字符组</h3><p><code>n=int(input());a=[[i for i in input()] for _ in range(n)]</code></p><h3 id="输入多行，多个数字"><a href="#输入多行，多个数字" class="headerlink" title="输入多行，多个数字"></a>输入多行，多个数字</h3><p><code>n=int(input());a=[list(map(int,input().split())) for _ in range(n)]</code></p><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><ol><li><h3 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h3></li></ol><p>​<code>datetime.now()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line">today = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br></pre></td></tr></table></figure><ol start="2"><li><h3 id="构建一个日期和时间对象"><a href="#构建一个日期和时间对象" class="headerlink" title="构建一个日期和时间对象"></a>构建一个日期和时间对象</h3></li></ol><p><code>datetime (year, month, day, hour=0, minute=0，second=0, microsecond=0)</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230324154525950.png" alt="image-20230324154525950"></p><h3 id="显示星期"><a href="#显示星期" class="headerlink" title="显示星期"></a>显示星期</h3><p><code>.isoweekday()</code></p><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p><code>strftime</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(now.strftime(<span class="string">&quot;%Y- %m- %d&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(now.strftime(<span class="string">&quot;%A，%d. %B %Y %H: %M%p&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天是 &#123;0:%Y&#125; 年 &#123;0:%m&#125; 月 &#123;0:%d&#125; 日&quot;</span>.<span class="built_in">format</span>(now))</span><br></pre></td></tr></table></figure><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230324155233728.png" alt="image-20230324155233728"></p><p><code>timedelta(days=1)</code>时间间隔</p><p>例题</p><p>链接<a href="https://www.lanqiao.cn/problems/498/learning/">https://www.lanqiao.cn/problems/498/learning/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟日期-回文日期</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *         </span><br><span class="line">n=<span class="built_in">input</span>()                                           <span class="comment">#&quot;20200202&quot;</span></span><br><span class="line">a=date(<span class="built_in">int</span>(n[<span class="number">0</span>:<span class="number">4</span>]),<span class="built_in">int</span>(n[<span class="number">4</span>:<span class="number">6</span>]),<span class="built_in">int</span>(n[<span class="number">6</span>:]))          <span class="comment">#2020-02-02 00:00:00</span></span><br><span class="line">b=date(<span class="number">9999</span>,<span class="number">12</span>,<span class="number">31</span>)                                  <span class="comment">#9999-12-31 00:00:00</span></span><br><span class="line">flag=<span class="number">0</span>                                              <span class="comment">#标记是否输出了一次回文数</span></span><br><span class="line"><span class="keyword">while</span> a&lt;=b:                                         <span class="comment">#遍历日期范围</span></span><br><span class="line">    a+=timedelta(<span class="number">1</span>)                                 <span class="comment">#从当前数+1开始遍历</span></span><br><span class="line">    date=<span class="built_in">str</span>(a).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)[:<span class="number">8</span>]                 <span class="comment">#日期格式-&gt;为字符串&quot;20200202&quot;</span></span><br><span class="line">    <span class="keyword">if</span> date==date[::-<span class="number">1</span>]:                            <span class="comment">#[::-1]:字符串逆序</span></span><br><span class="line">        <span class="keyword">if</span> flag==<span class="number">0</span>:                                 <span class="comment">#没输出过回文数</span></span><br><span class="line">            <span class="built_in">print</span>(date)                             <span class="comment">#输出第一种回文日期：20211202</span></span><br><span class="line">            flag=<span class="number">1</span>                                  <span class="comment">#做标记下次遇到回文数不打印</span></span><br><span class="line">        <span class="keyword">if</span> date[<span class="number">0</span>]==date[-<span class="number">1</span>]==date[<span class="number">2</span>]==date[-<span class="number">3</span>] <span class="keyword">and</span> date[<span class="number">1</span>]==date[-<span class="number">2</span>]==date[<span class="number">3</span>]==date[-<span class="number">4</span>]:</span><br><span class="line">            <span class="built_in">print</span>(date)                             <span class="comment">#输出第二种回文日期：21211212</span></span><br><span class="line">            <span class="keyword">break</span>                                   <span class="comment">#跳出循环   </span></span><br></pre></td></tr></table></figure><h2 id="小数位数"><a href="#小数位数" class="headerlink" title="小数位数"></a>小数位数</h2><h3 id="保留n位小数"><a href="#保留n位小数" class="headerlink" title="保留n位小数:"></a>保留n位小数:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2.3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:b&#125;</span>&quot;</span>)  <span class="comment"># 二</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:d&#125;</span>&quot;</span>)<span class="comment">#10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:o&#125;</span>&quot;</span>)<span class="comment">#8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:x&#125;</span>&quot;</span>)<span class="comment">#16进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:%&#125;</span>&quot;</span>)   <span class="comment"># 百分比格式</span></span><br></pre></td></tr></table></figure><h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><p>import math</p><p><code>math.ceil()</code></p><h3 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h3><p><code>int()</code></p><h3 id="分别获得小数和整数"><a href="#分别获得小数和整数" class="headerlink" title="分别获得小数和整数"></a>分别获得小数和整数</h3><p><code>math.modf()</code></p><h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><p><code>format()</code></p><p><code>round</code></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>ans=sorted(sorted(s),key=lambda x:s.count(x),reverse=True)[0]</code>按照在字典序</p><p>排列字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;WHERETHEREISAWILLTHEREISAWAY&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(s)))</span><br></pre></td></tr></table></figure><p>输出正整数的阶乘<br><code>print(math.factorial(9))</code></p><p>相关题目链接:<a href="https://blog.csdn.net/m0_55148406/article/details/123385812?spm=1001.2014.3001.5502">(28条消息) 【蓝桥系列】12道「暴力枚举」真题，夯实你的刷题基本功（暴力枚举模板）_小蓝刷题的博客-CSDN博客</a></p><p>参考资料:<a href="https://www.dotcpp.com/course/">基本输入输出格式八 - ACM与蓝桥杯竞赛指南 - C语言网 (dotcpp.com)</a> 和 [(29条消息) <a href="https://blog.csdn.net/weixin_62511863/article/details/124546626">Python] datetime 库的使用_datetime库_程序喵正在路上的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取笔趣阁小说</title>
      <link href="/2022/11/11/Python%E7%88%AC%E5%8F%96%E7%AC%94%E8%B6%A3%E9%98%81%E5%B0%8F%E8%AF%B4/"/>
      <url>/2022/11/11/Python%E7%88%AC%E5%8F%96%E7%AC%94%E8%B6%A3%E9%98%81%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>[TOC]</p><h1 id="了解爬虫"><a href="#了解爬虫" class="headerlink" title="了解爬虫"></a>了解爬虫</h1><h2 id="网络爬虫的分类"><a href="#网络爬虫的分类" class="headerlink" title="网络爬虫的分类"></a>网络爬虫的分类</h2><ul><li>通用网络爬虫:抓取系统重要组成部分，抓取的是一整张页面。搜索引擎使用,遵守robopts协议。（robots协议是君子协议，只防君子，不防小人。）</li><li>聚焦网络爬虫:又称主题网络爬虫，根据预定义的主题来进行相关页面的爬取（抓取局部），与通用网络爬虫想比，它的爬取范围更为精准(自己写的爬虫程序)</li><li>增量式网络爬虫: 对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫。</li><li>深层网络爬虫: Web 页面按存在方式可以分为表层网页和深层网页，深层网页是指大多内容不能通过静态获取，需要用户提交关键词才能获取到隐藏在搜索表单后面的内容。</li></ul><h2 id="爬取数据的步骤"><a href="#爬取数据的步骤" class="headerlink" title="爬取数据的步骤:"></a>爬取数据的步骤:</h2><ol><li><code>发送请求</code>:确定需要爬取的URL地址</li><li><code>获取响应内容</code>:由请求模块向URL地址发出请求,并得到网站的响应</li><li><code>解析内容</code>:利用解析模块从响应内容中提取所需数据</li><li><code>保存数据</code></li></ol><h1 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[<span class="string">:port</span>] / path / [<span class="string">;parameters</span>][<span class="symbol">?query</span>]#fragment</span><br></pre></td></tr></table></figure><p>​<strong>URL</strong>由三部分组成，第一部分是<strong>协议</strong>，有http、https、ftp等，第二部分存放资源的服务器的<strong>域名或IP地址</strong>，第三部分为资源的<strong>具体地址</strong>。</p><p>​我们在进行网络请求的时候通常采用三种方式：urllib、urllib3 和 requests，下面我们就来介绍一下 urllib 和 requests。</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><ol><li>请求模块是<code>urllib.request</code>，是Python标准库模块。</li></ol><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><p>程序的导入方式:</p><ul><li><code>import urllib.request</code></li><li><code>from urllib import request</code></li></ul><h3 id="模块内的方法"><a href="#模块内的方法" class="headerlink" title="模块内的方法"></a>模块内的方法</h3><ul><li><code>urllib.request.urlopen(URL,timeout)</code></li></ul><p>​作用：向网站发起请求并且获取响应对象。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>URL</td><td>需要爬取的URL地址</td></tr><tr><td>timeout</td><td>设置等待超时时间，指定时间未响应抛出异常</td></tr></tbody></table><ul><li><p>响应对象(res)的方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>res.read()</td><td>获取响应内容(字节串)</td></tr><tr><td>res.read().decode()</td><td>获取响应内容(字符串)</td></tr><tr><td>res.geturl()</td><td>返回实际数据的URL地址</td></tr><tr><td>res.getcode()</td><td>获取HTTP响应代码</td></tr></tbody></table></li></ul><p>字节串</p><blockquote><p>什么是字节串<br>        python 中的bytes 类型用来表示一个字节串。他是python3.x新加的类型（对比python2.x）。</p><p>​bytes 只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。bytes 类型的数据非常适合在互联网上传输，可以用于网络通信编程；bytes 也可以用来存储图片、音频、视频等二进制格式的文件。</p><p>字节串（bytes）和字符串（string）的对比：</p><p>​字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。<br>​字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。<br>​字节串和字符串都是不可变序列，不能随意增加和删除数据。</p></blockquote><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取对象</span></span><br><span class="line">res = request.urlopen(url=<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取网页源代码(默认是字节串，需要转换成字符串)</span></span><br><span class="line">html = res.read().decode()</span><br><span class="line"><span class="comment"># html = response.read().decode(&#x27;utf-8&#x27;)#以utf-8格式读取网页的内容</span></span><br><span class="line"><span class="comment"># 获取实际地址</span></span><br><span class="line">url = res.geturl()</span><br><span class="line"><span class="comment"># 返回HTTP响应代码</span></span><br><span class="line">code = res.getcode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出信息</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#print(html)</span></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="/C:/Users/道坤/AppData/Roaming/Typora/typora-user-images/image-20221111152246842.png" alt="image-20221111152246842"></p><ol start="2"><li><p>requests 模块</p><pre><code>     requests是一种**第三方模块**，主要用于发送请求，它在使用的时候比urllib模块要简洁方便很多，我们可以在命令操作符里通过pip install requests来安装，也可以在Pycharm中直接进行安装。</code></pre><p>requests 模块也可以使用 get, post, put, delete, hand 等来发送请求。</p><p>我们以 get 方法为例;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.douban.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code) <span class="comment"># 输出状态码</span></span><br><span class="line"><span class="built_in">print</span>(r.encoding) <span class="comment"># 输出编码格式</span></span><br><span class="line"><span class="built_in">print</span>(r.headers) <span class="comment"># 输出头部文件</span></span><br><span class="line"><span class="built_in">print</span>(r.cookies) <span class="comment"># 输出cookie信息</span></span><br><span class="line"><span class="built_in">print</span>(r.content) <span class="comment"># 输出字节流形式网页源码</span></span><br></pre></td></tr></table></figure><p>注意: 在开启代理（或者说科学上网后），会报错。请把 https 改成 http ;或者关闭掉代理。</p></li></ol><h2 id="伪装成用户"><a href="#伪装成用户" class="headerlink" title="伪装成用户"></a>伪装成用户</h2><p>网站是如何判断是正常人类访问还是爬虫访问？</p><p>通过<code>请求头(headers)中的User-Agent</code>来判断。</p><p>所以我们应该修改<code>User-Agent</code>,具体如下:</p><p>使用url.request.Request()方法：</p><ol><li><p>创建请求对象</p></li><li><p>包装请求，重构User-Agent</p><p>常用参数:   URL：请求的URL地址</p></li></ol><p>​headers:添加请求头，类型为字典headers &#x3D; {‘User-Agent’: ‘ ‘}</p><p>字典的值该填什么呢？</p><p>打开浏览器 —&gt; F12 (Ctrl+Shift+I) —&gt; network (网络) —&gt; 刷新 —&gt; 点击一个 —&gt; 下划找到 User-Agent 。把值填入字典即可。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221112220239175.png" alt="image-20221112220239175"></p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造请求对象</span></span><br><span class="line">req = request.Request(url = url,headers=headers)</span><br><span class="line"><span class="comment"># 获取响应对象</span></span><br><span class="line">res = request.urlopen(req)</span><br><span class="line"><span class="comment"># 获取响应内容</span></span><br><span class="line">html = res.read().decode()</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># 1.定义url和headers</span></span><br><span class="line">url=<span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 2.包装请求</span></span><br><span class="line">req=request.Request(url=url,headers=headers)</span><br><span class="line"><span class="comment"># 3.发请求</span></span><br><span class="line">res=request.urlopen(req)</span><br><span class="line"><span class="comment"># 4.获取响应内容</span></span><br><span class="line">html=res.read().decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h3 id="网络超时处理"><a href="#网络超时处理" class="headerlink" title="网络超时处理"></a>网络超时处理</h3><p>​我们在发送网络请求的时候避免不了超时现象的发生，如果我们不设置一个超时时间，那么系统会因为它长时间未响应而无法打开网页。</p><p>​    超时又分为<strong>连接超时</strong>和<strong>读取超时</strong>。</p><p>​    连接超时就是在程序默认的等待时间内没有得到服务器的响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.google.com.hk&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url, timeout = <span class="number">5</span>).text <span class="comment"># 连接限定时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;获得响应&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接超时&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2022-11-12 22:08:55.395394</span><br><span class="line">连接超时</span><br><span class="line">HTTPConnectionPool(host=&#x27;www.google.com.hk&#x27;, port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(<span class="language-xml"><span class="tag">&lt;<span class="name">urllib3.connection.HTTPConnection</span> <span class="attr">object</span> <span class="attr">at</span> <span class="attr">0x0000016A5EEA3520</span>&gt;</span></span>, &#x27;Connection to www.google.com.hk timed out. (connect timeout=5)&#x27;))</span><br><span class="line">2022-11-12 22:09:00.539448</span><br></pre></td></tr></table></figure><p>读取限定时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url, timeout=(<span class="number">5</span>,<span class="number">10</span>)).text</span><br></pre></td></tr></table></figure><p>在这里15即为读取限制时间，如果超过即为读取超时。</p><h3 id="URL的一些处理"><a href="#URL的一些处理" class="headerlink" title="URL的一些处理"></a>URL的一些处理</h3><ol><li>给URL地址中查询参数进行编码</li></ol><p>​导入方式: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure><p>url不能识别中文，需要编码进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;<span class="string">&#x27;word&#x27;</span>:<span class="string">&#x27;小璇&#x27;</span>,<span class="string">&#x27;pn&#x27;</span>:<span class="string">&#x27;50&#x27;</span>&#125;</span><br><span class="line">params = urllib.parse.urlencode(params)</span><br><span class="line"><span class="built_in">print</span>(params)</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221111201007783.png" alt="image-20221111201007783"></p><ol start="2"><li><p>拼接URL地址的三种方式</p><ul><li><p>字符串相加:<code>url = &#39;http://www.baidu.com/s?&#39; + 编码后的查询参数</code></p></li><li><p>字符串格式化(占位符<code>%s</code>):<code>url = &#39;http://www.baidu.com/s?%s&#39; %编码后的查询参数</code></p></li><li><p>字符串的<code>format()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(编码后的参数查询)</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>练习: 百度搜索”小璇”，并且保存到本地</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment"># 1.拼接url地址</span></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;请输入百度搜索关键字：&#x27;</span>)</span><br><span class="line">params=parse.urlencode(&#123;<span class="string">&#x27;wd&#x27;</span>:word&#125;)</span><br><span class="line">url=<span class="string">&#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(params) <span class="comment"># 这个url我们需要提前观察它的结构</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 2.发请求获取响应内容</span></span><br><span class="line">req=request.Request(url=url,headers=headers)</span><br><span class="line">res=request.urlopen(req)</span><br><span class="line">html=res.read().decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="comment"># 3.保存到本地文件</span></span><br><span class="line">filename=word+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line"><span class="keyword">with</span> ope(filename,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure><h1 id="百度贴吧爬虫案例"><a href="#百度贴吧爬虫案例" class="headerlink" title="百度贴吧爬虫案例"></a>百度贴吧爬虫案例</h1><p>步骤</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221111210856009.png" alt="image-20221111210856009"></p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduTiebaSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ur1 = <span class="string">&#x27;http://tieba.baidu.com/f?kw=&#123;&#125;&amp;pn=&#123;&#125;&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">self, url</span>):</span><br><span class="line">        req = request.Request(url=url, headers=self.headers)</span><br><span class="line">        res = request.urlopen(req)</span><br><span class="line">        html = res.read().decode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析提取数据的函数&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_html</span>(<span class="params">self, filename, html</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入贴吧名：&#x27;</span>)</span><br><span class="line">        start = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页：&#x27;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入终止页：&#x27;</span>))</span><br><span class="line">        params = parse.quote(name)</span><br><span class="line">        <span class="comment"># 1.拼接url地址</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            pn = (page - <span class="number">1</span>) * <span class="number">50</span>  <span class="comment"># 根据所选贴吧url规律计算得出</span></span><br><span class="line">            url = self.ur1.<span class="built_in">format</span>(params, pn)</span><br><span class="line">            html = self.get_html(url)</span><br><span class="line">            filename = <span class="string">&#x27;&#123;&#125;_第&#123;&#125;页.html&#x27;</span>.<span class="built_in">format</span>(name, page)</span><br><span class="line">            self.save_html(filename, html)</span><br><span class="line">            <span class="comment"># 终端打印提示</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第%d页抓取成功&#x27;</span> % page)</span><br><span class="line">            <span class="comment"># 控制数据抓取的频率</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">test = BaiduTiebaSpider()</span><br><span class="line">test.run()</span><br></pre></td></tr></table></figure><h1 id="爬取笔趣阁小说案例"><a href="#爬取笔趣阁小说案例" class="headerlink" title="爬取笔趣阁小说案例"></a>爬取笔趣阁小说案例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> lxml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载链接的前缀，‘944’是《剑来》的地址，想下载其他书可以查看原网页换地址</span></span><br><span class="line">first_url = <span class="string">&#x27;https://www.bqg99.com/book/944/&#x27;</span></span><br><span class="line"></span><br><span class="line">basic_url = &#123;</span><br><span class="line">    <span class="string">&#x27;whole&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">custom_header = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.35&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载好的小说</span></span><br><span class="line">output = <span class="string">&#x27;D:/studyProject/myNote/novel.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新网页链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_link</span>(<span class="params">url_dict</span>):</span><br><span class="line">    url_dict[<span class="string">&#x27;whole&#x27;</span>] = first_url + <span class="built_in">str</span>(url_dict[<span class="string">&#x27;index&#x27;</span>]) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    url_dict[<span class="string">&#x27;index&#x27;</span>] = url_dict[<span class="string">&#x27;index&#x27;</span>] + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(url_dict[<span class="string">&#x27;whole&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> url_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过GET方法获取网页文本内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_text</span>(<span class="params">url_dict, request_header</span>):</span><br><span class="line">    data = requests.get(url=url_dict[<span class="string">&#x27;whole&#x27;</span>], headers=request_header, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;status = %d&#x27;</span> % data.status_code)</span><br><span class="line">    <span class="keyword">if</span> data.status_code == <span class="number">302</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = BeautifulSoup(data.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        article = data.find(name=<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        chapter_topic = article.h1.text</span><br><span class="line">        content_soup = article.find(name=<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;chaptercontent&#x27;</span>, class_=<span class="string">&#x27;Readarea ReadAjax_content&#x27;</span>)</span><br><span class="line">        content_soup.p.decompose()  <span class="comment"># 去掉多余的“上一章”、“下一章”的导航链接</span></span><br><span class="line">        charter_words = content_soup.stripped_strings</span><br><span class="line">        chapter = &#123;</span><br><span class="line">            <span class="string">&#x27;topic&#x27;</span>: chapter_topic,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: charter_words</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    novel = <span class="built_in">open</span>(file=output, mode=<span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    link = update_link(basic_url)</span><br><span class="line">    text = fetch_text(url_dict=link, request_header=custom_header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        novel.write(text[<span class="string">&#x27;topic&#x27;</span>])</span><br><span class="line">        novel.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text[<span class="string">&#x27;content&#x27;</span>]:</span><br><span class="line">            line = line</span><br><span class="line">            novel.write(line)</span><br><span class="line">            novel.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        novel.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 暂停1秒，防止服务器拒绝，不过这个网站好像没有反爬机制</span></span><br><span class="line"></span><br><span class="line">        link = update_link(link)</span><br><span class="line">        text = fetch_text(url_dict=link, request_header=custom_header)</span><br><span class="line"></span><br><span class="line">    novel.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>参考文章:</p><p>[1]: <a href="https://blog.csdn.net/m0_46213598/article/details/119704825">https://blog.csdn.net/m0_46213598/article/details/119704825</a>“python爬虫快速入门”<br>[2]: <a href="https://www.dotcpp.com/course/318">https://www.dotcpp.com/course/318</a>“Python爬虫技术基础”<br>[3]: <a href="https://www.52pojie.cn/thread-1710198-1-1.html">https://www.52pojie.cn/thread-1710198-1-1.html</a>“笔趣阁小说爬虫下载”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列实现停车场</title>
      <link href="/2022/11/07/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%81%9C%E8%BD%A6%E5%9C%BA/"/>
      <url>/2022/11/07/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%81%9C%E8%BD%A6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>设停车场是一个可停放n辆汽车的狭长死胡同，南边封口，汽车只能从北边进出（这样的停车场世间少有）。汽车在停车场内按车辆到达时间的先后顺序，最先到达的第一辆车停放在车场的最南端，依次向北排开。若车场内已停满n辆汽车，则后来的汽车只能在门外的候车场上等候，一旦有车开走，则排在候车场上的第一辆车即可开入。当停车场内某辆车要离开时，在它之后进入的车辆必须先退出车场为它让路（假定停车场内设有供车辆进出的便道，所有的司机也必须在车内随时待命），待该辆车开出大门外，其他车辆再按原次序进入车场。每辆停放在车场的车在它离开停车场时，要按停留的时间长短交纳费用。试为停车场编制按上述要求进行管理的模拟程序。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221107175154319-16678147186851.png" alt="image-20221107175154319"></p><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><p><code>time</code>函数</p><p>   time_t now;</p><p>   time(&amp;now);&#x2F;&#x2F; 等同于now &#x3D; time(NULL)</p><p>   printf(“now time is %d\n”, now);</p><table><thead><tr><th align="center">返回值</th><th>返回1970-1-1, 00:00:00以来经过的秒数。(失败：-1)</th></tr></thead><tbody><tr><td align="center">原型</td><td>time_t time(time_t *calptr)</td></tr><tr><td align="center">头文件</td><td>&lt;time.h&gt;</td></tr></tbody></table><p>举例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> now;</span><br><span class="line">    time(&amp;now);<span class="comment">// 等同于now = time(NULL)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;now time is %d\n&quot;</span>, now);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109095159376.png" alt="image-20221109095159376"></p><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p>使用<code>localtime</code>函数，将时间数值变换成本地时间，考虑到本地时区和夏令时标志。</p><table><thead><tr><th>原型</th><th>struct tm *localtime(const time_t * calptr);</th></tr></thead><tbody><tr><td>返回值</td><td>struct tm *结构体 （失败返回NULL）</td></tr><tr><td>头文件</td><td>&lt;time.h&gt;</td></tr></tbody></table><p>struct tm *结构体 ，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line"><span class="type">int</span> tm_sec;       <span class="comment">/* 秒 – 取值区间为[0,59] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_min;       <span class="comment">/* 分 - 取值区间为[0,59] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_hour;      <span class="comment">/* 时 - 取值区间为[0,23] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_mday;     <span class="comment">/* 一个月中的日期 - 取值区间为[1,31] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_mon;     <span class="comment">/* 月份（从一月开始，0代表一月） - 取值区间为[0,11] */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_year;     <span class="comment">/* 年份，其值等于实际年份减去1900 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_wday;    <span class="comment">/* 星期 – 取值区间为[0,6]，其中0代表星期天，1代表星期一 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_yday;    <span class="comment">/* 从每年1月1日开始的天数– 取值区间[0,365]，其中0代表1月1日 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tm_isdst;    <span class="comment">/* 夏令时标识符，夏令时tm_isdst为正；不实行夏令时tm_isdst为0 */</span>    </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//此结构体空间由内核自动分配, 而且不要去释放它.</span></span><br><span class="line">   <span class="comment">//失败: NULL</span></span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> now;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm_now</span> ;</span></span><br><span class="line">    time(&amp;now) ;</span><br><span class="line">    tm_now = localtime(&amp;now) ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在的时间: %d-%d-%d %d:%d:%d\n&quot;</span>,</span><br><span class="line">tm_now-&gt;tm_year+<span class="number">1900</span>, tm_now-&gt;tm_mon+<span class="number">1</span>, tm_now-&gt;tm_mday, tm_now-&gt;tm_hour, tm_now-&gt;tm_min, tm_now-&gt;tm_sec) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109100018423.png" alt="image-20221109100018423"></p><h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><p>程序如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STOP  5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PAVE  4  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_History 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义车的结构体，包含了进入，离开停车场的时间属性 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> TimeIn;</span><br><span class="line"><span class="type">int</span> TimeOut;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> leave_time;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ct[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> Lincense[<span class="number">10</span>];</span><br><span class="line">&#125;Car; </span><br><span class="line"></span><br><span class="line"><span class="comment">//停车 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Stop[MAX_STOP];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;Stopping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Stop[MAX_History];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">&#125;History;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//等待队列的创建 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Pave[MAX_PAVE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line">&#125;Pavement; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Let[MAX_STOP];</span><br><span class="line"><span class="type">int</span> top; </span><br><span class="line">&#125;Buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Car Wait[MAX_PAVE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line">&#125;Waiting; </span><br><span class="line"></span><br><span class="line">Stopping s;</span><br><span class="line">Pavement p;</span><br><span class="line">Buffer   b;</span><br><span class="line">Car      c;</span><br><span class="line">Waiting  w;</span><br><span class="line">History  h;</span><br><span class="line"><span class="type">char</span>     C[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Come</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Pave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Buff</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Leave_Pavement</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlay</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlayPave</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Welcome</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SmallWelcome</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave_menu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lucky_draw</span><span class="params">(<span class="type">int</span> a)</span>;  <span class="comment">/*进入抽奖环节 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">draw_result</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mod_price</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">history</span><span class="params">()</span>;  <span class="comment">//停车历史记录 </span></span><br><span class="line"></span><br><span class="line">History* <span class="title function_">history_push</span><span class="params">(Stopping s,<span class="type">time_t</span> t1)</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> Price = <span class="number">6</span>;</span><br><span class="line"><span class="comment">/*停车场默认是6元/分钟，程序相减单位为60，以秒计费，所以需要改动    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Come</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将停车的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i = s.top;</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，此汽车已存在！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k = MAX_PAVE;</span><br><span class="line"><span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[k].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误，此汽车已存在！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.top &gt;= MAX_STOP - <span class="number">1</span>)&#123;</span><br><span class="line">Stop_To_Pave();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">t2 = ctime(&amp;t1); </span><br><span class="line">s.Stop[++s.top].TimeIn = t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[s.top].ct, t2);</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[s.top].Lincense, C);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停入停车位的%d车位，当前时间：%s\n&quot;</span>, C, s.top+<span class="number">1</span>, t2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要搜索的车牌号：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i, j, k, flag = <span class="number">0</span>;        </span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="keyword">if</span>(s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i = s.top; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此汽车在停车场内，信息如下：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停车位序\t当前所需支付金额\t进入时间\t\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个\t\t%0.f元\t\t\t%s&quot;</span>, s.Stop[i].Lincense, i+<span class="number">1</span>, (Price/<span class="number">60</span>) * (t - s.Stop[i].TimeIn), s.Stop[i].ct);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span> &amp;&amp; p.count &gt; <span class="number">0</span>)&#123; </span><br><span class="line">i = p.front, k = <span class="number">1</span>, j = p.rear;</span><br><span class="line"><span class="keyword">while</span>(i != j )&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[i].Lincense, C))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此汽车在停便道上\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停车位序\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个&quot;</span>,p.Pave[i].Lincense, k);</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场内外不存在该汽车信息！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将离开的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="type">int</span> i, j, flag = <span class="number">1</span>, flag2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i = s.top; i &gt;=<span class="number">0</span>; i-- )&#123;</span><br><span class="line">flag = flag * <span class="built_in">strcmp</span>(s.Stop[i].Lincense, C);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == flag)&#123;</span><br><span class="line">Stop_To_Buff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag !=<span class="number">0</span> <span class="comment">/*&amp;&amp; flag2 != 0*/</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场内没有该汽车的信息！\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Leave_Pavement</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i, j, flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入即将离开的车牌号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;C);</span><br><span class="line"><span class="keyword">if</span>(p.count  &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道上不存在汽车!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p.count &gt; <span class="number">0</span>)&#123; </span><br><span class="line">i = p.front; </span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(p.Pave[i].Lincense, C))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时从便道进入临时便道\n&quot;</span>, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(w.Wait[w.rear].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.rear = (w.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count++;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n牌照为%s的汽车从便道上开走，不收取任何费用！\n\n&quot;</span>, p.Pave[i].Lincense); </span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count--;</span><br><span class="line"><span class="keyword">while</span>(p.count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时从便道进入临时便道\n&quot;</span>, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(w.Wait[w.rear].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.rear = (w.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count++;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(w.count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n牌照为%s的汽车返回便道\n&quot;</span>,w.Wait[w.front].Lincense);</span><br><span class="line"><span class="built_in">strcpy</span>(p.Pave[p.rear].Lincense, w.Wait[w.front].Lincense);</span><br><span class="line">w.front = (w.front + <span class="number">1</span>) % MAX_PAVE; </span><br><span class="line">p.rear = (p.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">w.count--;</span><br><span class="line">p.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//离开计费 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Buff</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (s.top &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strcmp</span>(s.Stop[s.top].Lincense, C))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(b.Let[b.top++].Lincense, s.Stop[s.top].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车暂时退出停车场\n&quot;</span>, s.Stop[s.top--].Lincense);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车从停车场开走\n&quot;</span>, s.Stop[s.top].Lincense); </span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line">s.Stop[s.top].TimeOut = t;</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">t2 = ctime(&amp;t1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;离开时间%s\n需付费%.0f元\n&quot;</span>, t2,(Price/<span class="number">60</span>) * (t - s.Stop[s.top].TimeIn));</span><br><span class="line">history_push(s,t1) ; <span class="comment">//加入进历史记录 </span></span><br><span class="line"></span><br><span class="line">s.top--;</span><br><span class="line"><span class="keyword">while</span>(b.top &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[++s.top].Lincense, b.Let[--b.top].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停回停车位%d车位\n&quot;</span>, b.Let[b.top].Lincense, s.top+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(s.top &lt; MAX_STOP<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == p.count)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(s.Stop[++s.top].Lincense, p.Pave[p.front].Lincense);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车从便道中进入停车位的%d车位\n&quot;</span>, p.Pave[p.front].Lincense, s.top+<span class="number">1</span>);</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="type">char</span>* t2;</span><br><span class="line">s.Stop[s.top].TimeIn = t;</span><br><span class="line">p.front = (p.front + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离开的车辆压入栈，作为历史记录 </span></span><br><span class="line">History* <span class="title function_">history_push</span><span class="params">(Stopping s,<span class="type">time_t</span> t1)</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h.Stop[++h.top].TimeIn = s.Stop[s.top].TimeIn;</span><br><span class="line">h.Stop[h.top].leave_time = time(&amp;t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(h.Stop[h.top].ct, s.Stop[s.top].ct);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(h.Stop[h.top].Lincense,  s.Stop[s.top].Lincense);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">history</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = h.top;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;暂时没有停车记录哦！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放时间\t已支付金额\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t\t%d分%d秒\t\t%.0f元\t\t\t第%d个\n&quot;</span>, h.Stop[i].Lincense, </span><br><span class="line">(h.Stop[i].leave_time-h.Stop[i].TimeIn)/<span class="number">60</span>,(h.Stop[i].leave_time-h.Stop[i].TimeIn) % <span class="number">60</span>, (Price/<span class="number">60</span>) * (h.Stop[i].leave_time - h.Stop[i].TimeIn), i+<span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Stop_To_Pave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p.count &gt; <span class="number">0</span> &amp;&amp; (p.front == (p.rear + <span class="number">1</span>) % MAX_PAVE))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道已满，请下次再来！\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(p.Pave[p.rear].Lincense, C);</span><br><span class="line">p.rear = (p.rear + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">p.count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;牌照为%s的汽车停入便道上\n&quot;</span>, C);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlay</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i = s.top;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;停车场目前为空\n&quot;</span>);</span><br><span class="line"><span class="type">time_t</span> t1;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> t = time(&amp;t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放时间\t当前所需支付金额\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t\t%d分%d秒\t\t%.0f元\t\t\t第%d个\n&quot;</span>, s.Stop[i].Lincense, </span><br><span class="line">(t - s.Stop[i].TimeIn)/<span class="number">60</span>,(t - s.Stop[i].TimeIn) % <span class="number">60</span>, (Price/<span class="number">60</span>) * (t - s.Stop[i].TimeIn), i+<span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisPlayPave</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i = p.front;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == p.count)  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;便道目前为空\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t车牌号\t\t停放位序\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != p.rear &amp;&amp; k &lt;= p.count)&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%s\t第%d个\n&quot;</span>, p.Pave[i].Lincense, k++);</span><br><span class="line">i = (i + <span class="number">1</span>) % MAX_PAVE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Car_Leave_menu</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">SmallWelcome();</span><br><span class="line"><span class="type">int</span> i, cho;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == i)  Car_Leave();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> == i)  Leave_Pavement();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span> == i) draw_result(); </span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> == i)  <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n返回请输入0\n&quot;</span>);</span><br><span class="line">top:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cho);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == cho)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的输入有误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> top;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SmallWelcome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*******************目前停车场状况***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t停车场共有%d个车位,当前停车场共有%d辆车,等候区共有%d/%d辆车\n&quot;</span>,  </span><br><span class="line">    MAX_STOP, s.top+<span class="number">1</span>, (p.rear + MAX_PAVE - p.front) % MAX_PAVE, MAX_PAVE<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t********************************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t---------Welcome to Ep&#x27;s Car Parking next time----------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   1.从停车场内驶出汽车               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   2.从便道上驶出汽车                 *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   3.进入抽奖                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   4.退出子管理系统                   *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*请注意：从停车场内驶离的汽车按照%.0f元/分钟计费        *\n&quot;</span>,Price);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*望周知：从便道上驶离的汽车不收取费用                  *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*------------------------------------------------------*\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t--------Press key(1/2/3) to continue the program--------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HideCursor</span><span class="params">()</span>&#123;</span><br><span class="line"> CONSOLE_CURSOR_INFO cursor_info = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"> SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp;cursor_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lucky_draw</span><span class="params">(<span class="type">int</span> a)</span>  <span class="comment">/*进入抽奖环节  抽奖函数*/</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> e;</span><br><span class="line">  <span class="keyword">if</span>( a!=<span class="number">1</span> )</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;你选择了不抽奖&quot;</span>); </span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));<span class="comment">//利用时间作为种子 </span></span><br><span class="line">    e=<span class="number">100</span>+rand()%<span class="number">1000</span>;<span class="comment">//随机抽奖 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中奖号码为666或888，你的号码为%d\n&quot;</span>,e);</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">666</span>||a==<span class="number">888</span>)</span><br><span class="line">        &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;恭喜你获得了免费停车一年特权&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>; </span><br><span class="line">   &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;很遗憾您没有中奖&quot;</span>); </span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">draw_result</span><span class="params">()</span>  <span class="comment">//抽奖结果 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> select;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认是否进行抽奖，如果抽奖请按1，如果不请随意\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;select);</span><br><span class="line">lucky_draw(select); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mod_price</span><span class="params">()</span>&#123;   <span class="comment">//修改停车价格 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改停车场计费(默认6元一分钟):\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;在此输入:&quot;</span>); </span><br><span class="line"><span class="type">int</span> temp ;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">Price = temp;</span><br><span class="line"><span class="keyword">return</span> Price;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Welcome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> * <span class="title">timeinfo</span>;</span></span><br><span class="line">    time ( &amp;rawtime );</span><br><span class="line">    timeinfo = localtime ( &amp;rawtime );</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t\t\t%s&quot;</span>, asctime(timeinfo) );</span><br><span class="line">    HideCursor();</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*******************目前停车场状况***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t停车场共有%d个车位,当前停车场共有%d辆车,等候区共有%d/%d辆车\n&quot;</span>,  </span><br><span class="line">    MAX_STOP, s.top+<span class="number">1</span>, (p.rear + MAX_PAVE - p.front) % MAX_PAVE, MAX_PAVE<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t********************************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t--------------Welcome to Ep&#x27;s Car Parking---------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   1.停车场停车信息显示               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   2.便道上停车信息显示               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   3.汽车到达停车场操作               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   4.汽车离去停车场操作               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   5.查找汽车功能                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   6.停车历史记录                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   7.系统设置                         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*                   8.退出管理系统                     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*     收费标准：本停车场按照%.0f元/分钟计费，望周知       *\n&quot;</span>,Price);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\t*                                                      *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t*------------------------------------------------------*\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\t---------Press key(1/2/3/4/5/6/7) to run program----------\n\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">s.top = <span class="number">-1</span>;</span><br><span class="line">h.top = <span class="number">-1</span>;</span><br><span class="line">b.top = <span class="number">0</span>;</span><br><span class="line">p.rear = <span class="number">0</span>;</span><br><span class="line">p.count = <span class="number">0</span>;</span><br><span class="line">p.front = <span class="number">0</span>;</span><br><span class="line">w.count = <span class="number">0</span>;</span><br><span class="line">w.front = <span class="number">0</span>;</span><br><span class="line">w.rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;color 0B&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">Welcome();</span><br><span class="line"><span class="type">int</span> i, cho;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == i)  DisPlay();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> == i)  DisPlayPave();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span> == i)  Car_Come();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> == i)  Car_Leave_menu();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">5</span> == i)  Search();</span><br><span class="line"><span class="keyword">if</span>(<span class="number">6</span> == i)  history(); </span><br><span class="line"><span class="keyword">if</span>(<span class="number">7</span> == i)mod_price();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">8</span> == i)  &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n欢迎您再次使用本系统呦 ε=ε=ε=(~￣▽￣)~\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n返回请输入0\n&quot;</span>);</span><br><span class="line">begin:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cho);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == cho)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您的输入有误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> begin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序截屏如下：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20221109100736119.png" alt="image-20221109100736119"></p>]]></content>
      
      
      <categories>
          
          <category> C语言项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙管理工具:iptables</title>
      <link href="/2022/10/09/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-iptables/"/>
      <url>/2022/10/09/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-iptables/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><code>iptables</code> 是早起Linux系统中默认的防火墙管理服务。尽管新型的<code>firewalld</code> 投入使用很多年，大量的企业生产环境还是出于各种原因继续使用<code>iptables</code> 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:树</title>
      <link href="/2022/10/09/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
      <url>/2022/10/09/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h2><h2 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h2><p>树的实现主要有两种方式:<code>列表之列表</code>和<code>节点之引用</code></p><p>文章使用<code>节点之引用</code>实现。</p><ul><li><input disabled type="checkbox"> <code>BinaryTree()</code> 创建一个二叉树</li><li><input disabled type="checkbox"> <code>getLeft()</code>返回当前节点的左子节点所对应的树</li><li><input disabled type="checkbox"> <code>getRight()</code> 返回当前节点的右子节点所对应的树</li><li><input disabled type="checkbox"> <code>setVal(val) </code> 在当前节点中存储val</li><li><input disabled type="checkbox"> <code>insertLeft(val)</code>新建一颗二叉树，并将其作为当前节点的左子节点</li><li><input disabled type="checkbox"> <code>insertRight(val)</code> 新建一颗二叉树，并将其作为当前节点的右子节点</li></ul><ol><li><p>首先定义一个简单的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li><li><p><code>节点之引用</code> 的要点是，属性<code>left</code>和<code>right</code> 会指向BinaryTree类的其他实例。也就是说，向树中插入新的左子树，我们会创建另一个<code>BinaryTree</code>实例，并将根节点的<code>self.left</code> 指向新树。</p><p>下面是插入左子节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入左子节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertLeft</span>(<span class="params">self,newNode</span>):</span><br><span class="line">    <span class="keyword">if</span> self.left == <span class="literal">None</span>:</span><br><span class="line">        self.left = BinaryTree(newNode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = BinaryTree(newNode)</span><br><span class="line">        t.left = self.left</span><br><span class="line">        self.left = t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​在插入左子树时，必须考虑两种情况，一种是原本没有左子节点。此时，只需在树种添加一个节点即可。第二种情况是已经存在左子节点。此时，插入一个节点，并将已有的左子节点降一层。</p><p>插入右子节点同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入右子节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertRight</span>(<span class="params">self,newNode</span>):</span><br><span class="line">    <span class="keyword">if</span> self.right == <span class="literal">None</span>:</span><br><span class="line">        self.right = BinaryTree(newNode)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = BinaryTree(newNode)</span><br><span class="line">        t.right = self.right</span><br><span class="line">        self.right = t</span><br></pre></td></tr></table></figure></li><li><p>节点访问函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问当前节点的左子树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLeft</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.left</span><br><span class="line"><span class="comment"># 访问当前节点的右子树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRight</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.right</span><br><span class="line"><span class="comment"># 设置当前的节点的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setVal</span>(<span class="params">self,val</span>):</span><br><span class="line">    self.val = val</span><br><span class="line"><span class="comment"># 获取当前节点的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getVal</span>(<span class="params">self,val</span>):</span><br><span class="line">    <span class="keyword">return</span> self.val</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br><span class="line">    pre_order(root.left)</span><br><span class="line">    pre_order(root.right)</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mid_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_order(root.left)</span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br><span class="line">    mid_order(root.right)</span><br></pre></td></tr></table></figure><h4 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_order(root.left)</span><br><span class="line">    mid_order(root.right)</span><br><span class="line">     <span class="built_in">print</span>(root.val)</span><br></pre></td></tr></table></figure><h3 id="将有序的整数数组转换成二叉树"><a href="#将有序的整数数组转换成二叉树" class="headerlink" title="将有序的整数数组转换成二叉树"></a>将有序的整数数组转换成二叉树</h3><p><strong>二叉排序树</strong></p><p>任意节点node:  如果有左孩子节点left,则left小于node</p><p>​如果有右孩子节点right，则right的值大于node</p><p>按中序遍历，节点就是有序输出</p><p>例如:数组[1,2,3,4,5,6,7,8,9,10]</p><p>分析</p><blockquote><p>6是中位数,分成1，2，3，4，5和7，8，9，10；1，2，3，4其中3是中位数，分为1，2和4，5；7，8，9，10分为7，8和10，继续递归….</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230220201701035.png" alt="image-20230220201701035"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertLeft</span>(<span class="params">self,newNode</span>):</span><br><span class="line">        <span class="keyword">if</span>  self.left == <span class="literal">None</span>:</span><br><span class="line">            self.left = BinaryTree(newNode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(newNode)</span><br><span class="line">            t.left = self.left</span><br><span class="line">            self.left = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertRight</span>(<span class="params">self,newNode</span>):</span><br><span class="line">        <span class="keyword">if</span>  self.right == <span class="literal">None</span>:</span><br><span class="line">            self.right = BinaryTree(newNode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(newNode)</span><br><span class="line">            t.right = self.right</span><br><span class="line">            self.right = t</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getLeft</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.left</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.right</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getVal</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setVal</span>(<span class="params">self,val</span>):</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组转换成树</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">array_to_tree</span>(<span class="params">arr,start,end</span>):</span><br><span class="line">    root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> end &gt;= start:</span><br><span class="line">        root = BinaryTree()</span><br><span class="line">        mid = (start+end+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">        root.val = arr[mid]</span><br><span class="line">        root.left = array_to_tree(arr,start,mid-<span class="number">1</span>)</span><br><span class="line">        root.right = array_to_tree(arr, mid+<span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mid_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_order(root.left)</span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br><span class="line">    mid_order(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;原始数据:&#x27;</span>,arr)</span><br><span class="line">    root=array_to_tree(arr,<span class="number">0</span>,<span class="built_in">len</span>(arr)-<span class="number">1</span>)</span><br><span class="line">    mid_order(root)</span><br></pre></td></tr></table></figure><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python标准库的常用模块</title>
      <link href="/2022/10/08/Python%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/10/08/Python%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="操作系统接口模块"><a href="#操作系统接口模块" class="headerlink" title="操作系统接口模块"></a>操作系统接口模块</h2><h3 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h3><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>​<strong>UTC</strong>(Coordinated Universal Time，协调世界时)，又称格林尼治天文时间、世界标准时间。与 UTC 对应的是各个时区的 local time(本地时间)，东 N 区的时间比 UTC 早 N 个小时，因此，UTC + N 为东 N 区的本地时间，而西 N 区时间比 UTC 晚 N 个小时，因此，UTC  N 为西 N 区的本地时间。中 国在东 8 区，因此比 UTC 早 8 小时，可以用 UTC+8 表示。</p><p>​<strong>epoch time</strong>(纪元时间)，表示一个特定的开始时间，不同平台上该时间点的值不太相同，在 Unix 系统中，epoch time 为 1970-01-01 00:00:00 UTC(1970 年 1 月 1 日 0 时 0 分 0 秒)。 </p><p>​<strong>timestamp</strong>(时间戳)，也称 Unix 时间或 POSIX 时间，它表示从 epoch time(如 1970-01-01 00:00:00  UTC)开始到现在所经过的毫秒数，其值为 float 类型。但是，有些编程语言的相关方法返回的是秒 数(Python 就是这样)。时间戳是个差值，其值与时区无关。</p><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a><strong>time</strong>模块</h3><p><code>import time</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = time.time() <span class="comment"># 返回时间戳的值</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(time.ctime(t)) <span class="comment"># 把时间戳转换成字符串</span></span><br></pre></td></tr></table></figure><h3 id="日期模块"><a href="#日期模块" class="headerlink" title="日期模块"></a>日期模块</h3><p>​<code>datetime 模块</code>提供可用于处理日期和时间信息的函数和类，如对日期和时间解析、格式化和算 术运算。 </p><ul><li><p><code>datetime.date</code>：用于与时间无关的日期。</p></li><li><p><code>datetime.time</code>：用于独立于日期的时间。 </p></li><li><p><code>datetime.datetime</code>：用于具有日期和时间的对象。</p></li><li><p><code>datetime.timedelta</code>：表示日期或日期时间之间的差异，如果用一个日期时间减另一个日期时间， 结果将是 timedelta。</p></li><li><p><code>datetime.timezone</code>：表示时区调整为 UTC 的偏移量。该类是 datetime.tzinfo 的子类，不应直接使用。 可以查询这些对象的特定成分(如年、月、日，时、分、秒)，并对它们执行算术运算，如果需 要显示它们，则可从中提取可以打印的字符串版本。</p></li></ul><p><strong>datetime.time类</strong></p><p>datetime.time表示具有小时，分钟，秒，微秒和时区信息等属性的时间类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">t = datetime.time(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(t.hour,t.minute,t.second,t.microsecond,t.tzinfo)</span><br></pre></td></tr></table></figure><p>​datetime.date表示具有年月日属性的类。使用today()类方法可以返回当前日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"><span class="built_in">print</span>(today.year,today.month,today.day)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:链表</title>
      <link href="/2022/10/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/10/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="链表是什么"><a href="#链表是什么" class="headerlink" title="链表是什么"></a>链表是什么</h2><h2 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h2><p>必须明确指定链表的第一项的位置。当我们知道第一个位置，就可以知道第二个位置….外部的引用通常被称为链表的头。最后一个位置 要知道没有下一个项。</p><h3 id="链表的节点-Node"><a href="#链表的节点-Node" class="headerlink" title="链表的节点(Node)"></a>链表的节点(<code>Node</code>)</h3><p>链表实现的基本的构造块是节点。每一个节点至少保存两个信息。首先，节点必须要有列表项本身，也就是数据字段；此外，每个节点必须保存下一个节点的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,initdata</span>):</span><br><span class="line">        self.data = initdata</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getNext</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setData</span>(<span class="params">self,newdata</span>):</span><br><span class="line">        self.data = newdata</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setNext</span>(<span class="params">self,newnext</span>):</span><br><span class="line">        self.<span class="built_in">next</span> = newnext</span><br></pre></td></tr></table></figure><h3 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a>链表的构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head == <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么添加项到我们的链表呢？因为链表是无序的，所以新项相对于已经在链表中其他项不重要。新项可以在任意位置。考虑到这点，将新项放在最简单的位置是有意义的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">    <span class="comment"># 先构建节点</span></span><br><span class="line">    temp = Node(item)</span><br><span class="line">    temp.setNext(self.head)</span><br><span class="line">    self.head = temp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础数据结构:队列</title>
      <link href="/2022/09/29/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2022/09/29/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><p>​队列是有序集合，添加操作在”尾部”，移除操作在”头部”。新元素在尾部进入，然后一直向前移动到头部，直到称为下一个被移除的元素。</p><p>​这种操作叫做<code>FIFO(first-in first out)</code>。</p><p>​操作系统使用一些队列来控制计算机进程。调度机制往往基于一个队列算法，其目标是能尽可能的执行程序，同时服务尽可能多的用户。如打字的时候，有时候字符出现速度比敲键盘速度更慢，这是因为计算机正在做其他工作，敲键盘的操作被放在一个类似于队列的缓冲区，这样的话，便于对应的字符按正确的顺序显示。</p><h2 id="队列抽象数据类型（操作）"><a href="#队列抽象数据类型（操作）" class="headerlink" title="队列抽象数据类型（操作）"></a>队列抽象数据类型（操作）</h2><ul><li><input disabled type="checkbox"> <code>Queue()</code>: 创建一个空队列。它不需要参数，且返回一个空队列。</li><li><input disabled type="checkbox"> <code>enqueue(item):</code>   在队尾添加一个元素，需要参数，无返回值。</li><li><input disabled type="checkbox"> <code>dequeue():</code> 在对头移除元素，不需要参数，有返回值（被删除的元素），并修改队列内容。</li><li><input disabled type="checkbox"> <code>isEmpty():</code> 检查队列是否为空。无参数，返回布尔值。</li><li><input disabled type="checkbox"> <code>size():</code> 返回队列中元素的数目，无参数，有返回值。</li></ul><h2 id="用Python实现队列"><a href="#用Python实现队列" class="headerlink" title="用Python实现队列"></a>用Python实现队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.insert(<span class="number">0</span>,item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printQueue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (self.items)</span><br><span class="line">q = Queue()</span><br><span class="line"><span class="built_in">print</span>(q.isEmpty())</span><br><span class="line">q.enqueue(<span class="number">3</span>)</span><br><span class="line">q.enqueue(<span class="string">&#x27;23&#x27;</span>)</span><br><span class="line">q.enqueue(<span class="string">&quot;世界这么大&quot;</span>)</span><br><span class="line">q.enqueue(<span class="string">&quot;我想去去看看！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(q.size())</span><br><span class="line">q.printQueue()</span><br></pre></td></tr></table></figure><h2 id="模拟，传土豆"><a href="#模拟，传土豆" class="headerlink" title="模拟，传土豆"></a>模拟，传土豆</h2><p>​传土豆: 孩子们围成一圈，并且依次传递土豆。在某一个时刻，大家停止传递，此时手里面有土豆的孩子就得退出游戏。重复上诉过程，直至剩下一个孩子。（等价于约瑟夫问题）</p><p>​我们用队列来模拟一个环。假设捏着土豆的孩子在队头。在模拟传土豆的过程中，程序把这个队头孩子的名字移除，然后立刻插入队尾。随后，这个孩子会一直等待，直至再次到达队头。在出列和入列n次后，此时队头的孩子出局。新一轮游戏开始，如此反复，直至剩下最后一人（队列大小为1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pythonds.basic <span class="keyword">import</span>  Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Potato</span>(<span class="params">nameList,num</span>):</span><br><span class="line">    simqueue = Queue()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">        simqueue.enqueue(name)</span><br><span class="line">    <span class="keyword">while</span> simqueue.size() &gt; <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line"></span><br><span class="line">            simqueue.enqueue(simqueue.dequeue())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;踢掉：&quot;</span>,simqueue.dequeue())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simqueue.dequeue()</span><br><span class="line">a = (Potato([<span class="string">&quot;1&quot;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据结构:栈</title>
      <link href="/2022/08/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2022/08/06/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><p>根据《Python数据结构和算法分析》和其他网络资料整理而成。</p><hr><h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>栈是有序集合，添加操作和移除操作发生在同一端。</p><p>栈里面的元素离底端越近，代表在栈中的时间越长，因此栈的底端具有非常重要的意义。新添加的元素将被最先删除。这种排序原则是<strong>LIFO(last-in first out),后进先出</strong></p><p>例如书本的堆叠</p><h2 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h2><p>栈的抽象数据类型由下面的结构和操作定义。</p><ul><li><input disabled type="checkbox"> <code>Stack()</code>  创建一个空栈。不需要参数，返回一个空栈。</li><li><input disabled type="checkbox"> <code>push(item)</code> 将一个元素添加到栈的顶端。需要一个参数item,且无返回值</li><li><input disabled type="checkbox"> <code>pop()</code> 将顶端的元素删除。不需要参数，但是有返回值。</li><li><input disabled type="checkbox"> <code>peek()</code> 返回栈顶端的元素。不要参数，也不修改栈的内容。</li><li><input disabled type="checkbox"> <code>isEmpty()</code>检查栈是否为空。不需要参数，返回一个布尔值。</li><li><input disabled type="checkbox"> <code>size()</code>返回栈中元素的数目。不需要参数，返回一个整数。</li></ul><h2 id="用python实现栈"><a href="#用python实现栈" class="headerlink" title="用python实现栈"></a>用python实现栈</h2><p>明确定义栈的抽象数据类型后，我们用Python来实现。抽象数据类型的实现被称为数据结构。</p><p>因为栈是元素的集合，所以可以使用Python提供的列表实现。</p><p>实现方式一</p><p>用列表的头部作为栈的底端，利用pop()和append()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><p>实现方式二</p><p>利用列表的尾部作为栈的底端，所以pop()和append()这组不再使用。应当使用pop(0)和insert(0,item)访问下标为0，也就是第一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.insert(<span class="number">0</span>,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        self.items.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><p>上述两种实现都可行，但是二者在性能方面肯定是有差异。append和pop()方法的时间复杂度都是O(1),这意味着不论栈中有多少元素，第一种实现中的push和pop都会在恒定的时间内完成。第二种实现的性能受限于栈中的个数，因为insert(0)和pop(0)的时间复杂度是O(n),元素越多时间越慢。</p><h2 id="匹配符号"><a href="#匹配符号" class="headerlink" title="匹配符号"></a>匹配符号</h2><h3 id="匹配括号"><a href="#匹配括号" class="headerlink" title="匹配括号"></a>匹配括号</h3><p>匹配括号是每一个左括号都有与之对应的一个右括号，并且括号对有正确的嵌套关系。下面是正确匹配的括号串。</p><p>(()()())</p><p>(((())))</p><p>下面是不匹配的括号串</p><p>((()</p><p>((())</p><p>我们编写一个算法，它从左到右读取一个括号串，然后判断其中的括号是否匹配。为了解决这个问题，需要注意到一个很重要的现象。。当从左到右处理括号时，最右边的无匹配左括号 必须与接下来遇到的第一个右括号相匹配。并且，在第一个位置的左括号可能要 等到处理至最后一个位置的右括号时才能完成匹配。相匹配的右括号与左括号出现的顺序相反。 这一规律暗示着能够运用栈来解决括号匹配问题</p><p>一旦认识到用栈来保存括号是合理的，算法编写起来就会十分容易。由一个空栈开始，从左 往右依次处理括号。如果遇到左括号，便通过 push 操作将其加入栈中，以此表示稍后需要有一 个与之匹配的右括号。反之，如果遇到右括号，就调用 pop 操作。只要栈中的所有左括号都能 遇到与之匹配的右括号，那么整个括号串就是匹配的；如果栈中有任何一个左括号找不到与之匹 配的右括号，则括号串就是不匹配的。在处理完匹配的括号串之后，栈应该是空的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 括号匹配</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parChecker</span>(<span class="params">symbolString</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    balanced = <span class="literal">True</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(symbolString) <span class="keyword">and</span> balanced:</span><br><span class="line">        symbol = symbolString[index]</span><br><span class="line">        <span class="keyword">if</span> symbol == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">            s.push(symbol)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.isEmpty():</span><br><span class="line">                balanced = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s.pop()</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="匹配符号-1"><a href="#匹配符号-1" class="headerlink" title="匹配符号"></a>匹配符号</h3><p>对于<code>匹配括号</code>的升级，例如:</p><p>[[(‘’)]]</p><p>[{)’]</p><p>各类左右符号的组合，在以上的代码增加<code>[],&#123;&#125;</code>的处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 符号匹配</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parChecker</span>(<span class="params">symbolString</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    s = Stack()</span><br><span class="line">    balanced = <span class="literal">True</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(symbolString) <span class="keyword">and</span> balanced:</span><br><span class="line">        symbol = symbolString[index]</span><br><span class="line">        <span class="keyword">if</span> symbol <span class="keyword">in</span> <span class="string">&quot;&#123;[(&quot;</span>:</span><br><span class="line">            s.push(symbol)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> s.isEmpty():</span><br><span class="line">                balanced = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                top = s.pop()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> matches(top,symbol):</span><br><span class="line">                    balanced = <span class="literal">False</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matches</span>(<span class="params">left,right</span>):</span><br><span class="line"></span><br><span class="line">    lefts = <span class="string">&quot;([&#123;&quot;</span></span><br><span class="line">    rights = <span class="string">&quot;)]&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> lefts.index(left) == rights.index(right)</span><br></pre></td></tr></table></figure><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制—-gt-二进制"><a href="#十进制—-gt-二进制" class="headerlink" title="十进制—&gt;二进制"></a>十进制—&gt;二进制</h3><p>十进制转换的二进制的方法是不断除以二，直至商为0。然后把各余数倒序连起来，例如：</p><p>100&#x2F;2 &#x3D; 50…0</p><p>50&#x2F;2 &#x3D;25…0</p><p>25&#x2F;2 &#x3D; 12…1</p><p>12&#x2F;2 &#x3D; 6…0</p><p>6&#x2F;2 &#x3D; 3…0</p><p>3&#x2F;2 &#x3D; 1…1</p><p>1&#x2F;2 &#x3D; 0…1</p><p>所以最终结果为1100100</p><p>最终程序如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items)-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_to_2</span>(<span class="params">num</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    binStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        s.push(num % <span class="number">2</span>)</span><br><span class="line">        num = num // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        binStr = binStr + <span class="built_in">str</span>(s.pop())</span><br><span class="line">    <span class="keyword">return</span> binStr</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字:&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(divide_to_2(num))</span><br></pre></td></tr></table></figure><h3 id="十进制—-gt-任意进制"><a href="#十进制—-gt-任意进制" class="headerlink" title="十进制— &gt; 任意进制"></a>十进制— &gt; 任意进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">divide_to_base</span>(<span class="params">num,base</span>):</span><br><span class="line">    s = Stack()</span><br><span class="line">    baseStr = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        s.push(num % base)</span><br><span class="line">        num = num // base</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> s.isEmpty():</span><br><span class="line">        baseStr = baseStr + <span class="built_in">str</span>(s.pop())</span><br><span class="line">    <span class="keyword">return</span> baseStr</span><br><span class="line"></span><br><span class="line">num,base = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&#x27;输入数字和目的进制:&#x27;</span>).split())</span><br><span class="line"><span class="built_in">print</span>(divide_to_base(num,base))</span><br></pre></td></tr></table></figure><h3 id="Python的进制转换"><a href="#Python的进制转换" class="headerlink" title="Python的进制转换"></a>Python的进制转换</h3><p>考虑到语法特性，<code>Python</code> 对于进制转换的函数，已经做好的封装。</p><h4 id="十进制—-gt-其他进制"><a href="#十进制—-gt-其他进制" class="headerlink" title="十进制—&gt;其他进制"></a>十进制—&gt;其他进制</h4><ol><li><p>十进制—&gt;二进制：<code>bin(999)</code></p></li><li><p>十进制—&gt;八进制：<code>oct(999)</code></p></li><li><p>十进制—&gt;二进制：<code>hex(999)</code></p></li></ol><h4 id="其他进制—-gt-十进制"><a href="#其他进制—-gt-十进制" class="headerlink" title="其他进制—&gt;十进制"></a>其他进制—&gt;十进制</h4><ol><li>二进制—&gt;十进制：<code>int(&quot;10&quot;,2)</code></li><li>八进制转十进制:     <code>int(&quot;0o13&quot;,8)</code>     (前缀可以不写)</li><li>十六进制—&gt;十进制: <code>int(&quot;0xaa&quot;,16)</code>   (前缀可不写)</li></ol><h2 id="前序、中序和后序表达式"><a href="#前序、中序和后序表达式" class="headerlink" title="前序、中序和后序表达式"></a>前序、中序和后序表达式</h2><table><thead><tr><th align="center">中序表达式</th><th align="center">前序表达式</th><th align="center">后序表达式</th></tr></thead><tbody><tr><td align="center">A + B</td><td align="center">+  A  B</td><td align="center">A B +</td></tr></tbody></table><p>下面是中缀表达式转换成其他表达式的方法:</p><p><img src="https://img-blog.csdnimg.cn/9355af190b1d417baed4d58711aa1c88.jpeg"></p><h2 id="判断回文字符串"><a href="#判断回文字符串" class="headerlink" title="判断回文字符串"></a>判断回文字符串</h2><p>回文字符串是什么?</p><p>例如<code>xyx</code>,<code>hgfkfgh</code>这类从左往右读等于从右往左读的字符串。</p><p>对于回文字符串的判断，我们有以下步骤：</p><ol><li>获取字符串的长度</li><li>字符串如果是回文串，那中间是对称的，求中间节点<code>mid</code></li><li>把<code>mid</code>节点之前的字符全部压入栈</li><li><code>mid</code>之前的字符依次出栈，与<code>mid</code>之后的字符一一匹配</li></ol><h2 id="例题-后缀表达式的值"><a href="#例题-后缀表达式的值" class="headerlink" title="例题:后缀表达式的值"></a>例题:<strong>后缀表达式的值</strong></h2><p>链接:<a href="https://www.dotcpp.com/oj/problem3070.html">信息学奥赛一本通T1331-后缀表达式的值 - C语言网 (dotcpp.com)</a></p><p>解题思路：<br>1.从左到右扫描后缀表达式的每一个字符。<br>2.如果读入的字符是数字，将其转化为整数，并将其压入栈中。<br>3.如果读入的字符是运算符，则从栈中取出两个运算数，进行计算，并将结果压入栈中。<br>4.重复上述过程，直到读完整个后缀表达式为止。<br>5.最后，栈中只剩下一个数字，即为后缀表达式的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">inStr = (<span class="built_in">input</span>())</span><br><span class="line">Str = inStr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">Str1 = Str[:-<span class="number">1</span>]</span><br><span class="line">len1 = <span class="built_in">len</span>(Str1)</span><br><span class="line">Str2 = <span class="built_in">list</span>(Str[-<span class="number">1</span>])</span><br><span class="line">Str = Str1 + Str2</span><br><span class="line">S = <span class="string">&#x27; &#x27;</span>.join(Str)</span><br><span class="line"><span class="comment"># print(S)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__items == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.__items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.__items[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> self.__items.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_postfix_expression</span>(<span class="params">postfix_expression</span>):</span><br><span class="line">    op_stack = Stack()</span><br><span class="line">    expression_list = postfix_expression.split()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> expression_list:</span><br><span class="line">        <span class="keyword">if</span> token.isdigit():</span><br><span class="line">            op_stack.push(<span class="built_in">int</span>(token))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> token == <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            op = token</span><br><span class="line">            op2 = op_stack.pop()</span><br><span class="line">            op1 = op_stack.pop()</span><br><span class="line">            result = do_math(op, op1, op2)</span><br><span class="line">            op_stack.push(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> op_stack.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_math</span>(<span class="params">op, op1, op2</span>):</span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> op1 + op2</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> op1 - op2</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> op1 * op2</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> op2 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> op1 / op2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(calc_postfix_expression(S))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC+GDB+makefile工具的使用</title>
      <link href="/2022/07/10/GCC-GDB-makefile%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/10/GCC-GDB-makefile%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>在Linux环境下，我们的C语言程序一般由<code>GCC</code>工具编译，<code>GDB</code>调试，<code>makefile</code>用来解决gcc 一堆繁琐的步奏。</p><hr><h1 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h1><p>以c文件<code>main.c</code>,<code>sub.c</code>和<code>add.c</code>和头文件<code>my_fun.h</code>为例，代码为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//main.c</span></span><br><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;add.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;sub.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> 5 &#123;</span><br><span class="line"> <span class="number">6</span>   <span class="type">int</span> num1,num2;   <span class="comment">//定义两个数字</span></span><br><span class="line"> <span class="number">7</span>   <span class="type">int</span> sum,diff;   <span class="comment">//和   差</span></span><br><span class="line"> <span class="number">8</span>   <span class="built_in">printf</span>(<span class="string">&quot;你好，请输入两个数:\n&quot;</span>);</span><br><span class="line"> <span class="number">9</span>   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2);</span><br><span class="line"><span class="number">10</span>   sum = add(num1,num2);</span><br><span class="line"><span class="number">11</span>   diff = sub(num1,num2);</span><br><span class="line"><span class="number">12</span>   <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>,num1,num2,sum);    </span><br><span class="line"><span class="number">13</span>   <span class="built_in">printf</span>(<span class="string">&quot;%d-%d=%d\n&quot;</span>,num1,num2,diff);</span><br><span class="line"><span class="number">14</span>   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">15</span> &#125;                                                                               </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.c</span></span><br><span class="line"><span class="comment">//add函数的定义</span></span><br><span class="line"><span class="number">1</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(num1,num2)</span></span><br><span class="line">2 &#123;</span><br><span class="line"><span class="number">3</span>   <span class="keyword">return</span> num1+num2;</span><br><span class="line"><span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sub.c</span></span><br><span class="line"><span class="comment">//sub函数的定义</span></span><br><span class="line">  <span class="number">1</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(num1,num2)</span></span><br><span class="line">  2 &#123;</span><br><span class="line">  <span class="number">3</span>   <span class="keyword">return</span> num1-num2;                                                                                     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my_fun.h</span></span><br><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>;</span><br></pre></td></tr></table></figure><p>四大步奏：</p><ol><li><p>预处理</p><ul><li><p>预处理指令执行  <code>gcc -E *.c</code></p><p>头文件的引入  #include</p></li><li><p>宏展开</p></li></ul></li></ol><p>  举例： <code>gcc -E *.c</code> 或者<code>gcc -E main.c</code><br>     图片截取部分<br>     <img src="https://img-blog.csdnimg.cn/503c7350423041e6a48682c470be45a7.png" alt="在这里插入图片描述"></p><ol start="2"><li><p>预编译</p></li><li><p>编译</p><p>生成目标文件:  <code>gcc -c *.c [ -o 指定名称  ]</code><br>举例：<code>gcc -c *c</code><br><img src="https://img-blog.csdnimg.cn/b7cd35a049fe4982b4585529bb37d380.png" alt="在这里插入图片描述"></p></li><li><p>链接</p><p><code>gcc main.o add.o sub.o  [ -o 指定名称]</code></p><p><code>gcc *.o  [-o 指定名称]</code></p></li></ol><p> 举例：<code>gcc main.o sub.o add.o</code></p><p>   <img src="https://img-blog.csdnimg.cn/d3c58492788047a4bcb16ba90cbfd7ee.png" alt="在这里插入图片描述"></p><p>执行<code>./a.out</code></p><p>上述步骤也可以一步到位:<br><code>gcc *.c</code><br><img src="https://img-blog.csdnimg.cn/d4f35ce02c9245838f7b1968d0bb01b4.png" alt="在这里插入图片描述"></p><hr><h1 id="GDB调试工具"><a href="#GDB调试工具" class="headerlink" title="GDB调试工具"></a>GDB调试工具</h1><p>GDB是一个由GNU开源组织发布的、UNIX&#x2F;LINUX操作系统系统下、基于命令行的、功能强大的程序调试工具。<br>GDB的命令有很多，本文只列举一小部分命令，大致完成基本的程序调试工作。</p><p><code>gcc *.c -g</code></p><ol><li><p>进入GDB模式</p><ol><li><code>gdb 文件名</code><br>例如：gbd a.out<br><img src="https://img-blog.csdnimg.cn/e2564257423c4910bf74b32fd36e6d13.png" alt="在这里插入图片描述"></li><li>先输入<code>gdb</code><br>再输入<code>file 文件名</code><br>举例：<br><img src="https://img-blog.csdnimg.cn/bc42c375fb4a42c091251d1fe597f332.png" alt="在这里插入图片描述"></li></ol></li><li><p>运行程序<code>run</code><br>支持缩写<code>r</code><img src="https://img-blog.csdnimg.cn/79b49f014d2c49168a42258f03a471a7.png" alt="在这里插入图片描述"></p></li><li><p>设置断点<code>break</code> 或<code>b</code><br>举例:break main  &#x2F;&#x2F;main函数设置断点<br>    <code>b 文件名:行号n</code>  &#x2F;&#x2F;在第n行设置断点<br>继续执行： <code>continue</code> 或<code>c</code><br><img src="https://img-blog.csdnimg.cn/90b5894a937b4ba490f20431d0724deb.png" alt="在这里插入图片描述"></p></li><li><p>单步调试<code>next</code></p></li><li><p>退出gdb:<code>quit</code>或<code>q</code></p></li></ol><hr><h1 id="makefile的使用"><a href="#makefile的使用" class="headerlink" title="makefile的使用"></a>makefile的使用</h1><p>在上面的过程中，使用gcc 一堆繁琐的步奏是不是很让人抓狂？正是如此，我们需要找更为简便的方式。而使用makefile就是为了解决这一问题。</p><p>makefile的格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标:生成目标的依赖</span><br><span class="line">生成目标的命令 <span class="comment">//注意缩进</span></span><br></pre></td></tr></table></figure><p>demo如下:</p><ol><li>创建makefile文件(vim makefile)</li><li>写入</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afu:main.o sub.o add.o   <span class="comment">//生成afu文件</span></span><br><span class="line">        gcc main.o sub.o add.o -o afu  <span class="comment">//注意用tab缩进</span></span><br><span class="line">main.o:main.c</span><br><span class="line">        gcc -c main.c</span><br><span class="line">sub.o:sub.c</span><br><span class="line">        gcc -c sub.c</span><br><span class="line">add.o:sub.c</span><br><span class="line">        gcc -c add.c</span><br><span class="line">clean:</span><br><span class="line">        rm -rf main.o sub.o add.o  <span class="comment">//清除这些.o文件</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3cb4f825d14348d787be94b075ef43f3.png" alt="在这里插入图片描述"></p><ol start="3"><li>运行<br><code>make</code></li></ol><p><img src="https://img-blog.csdnimg.cn/9c6c92ae401f424082bcc3706b1beed5.png" alt="在这里插入图片描述"></p><p>上述就是makefile的基本使用了，但是感觉这样好像比gcc还要复杂，能不能在优化一下？</p><p>$@  表示目标文件<br>$^  表示所有的依赖文件<br>$&lt;  表示第一个依赖文件<br>$?  表示比目标还要新的依赖文件列表<br>%:依次对应</p><p>所以，根据以上的内容，我们优化:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> afu:main.o sub.o add.o</span><br><span class="line"><span class="number">2</span>   gcc *.o -o $@</span><br><span class="line"><span class="number">3</span> %.o:%.c</span><br><span class="line"><span class="number">4</span>   gcc -c $&lt; -o $@</span><br><span class="line"><span class="number">5</span> clean:</span><br><span class="line"><span class="number">6</span>   rm -rf *.o</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f3cb74420bff415d8b8417d95b1ddfd3.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4ddb30cbcf7f416094facef4da704abe.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的熟练掌握vim编辑器吗？</title>
      <link href="/2022/07/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%90%97%EF%BC%9F/"/>
      <url>/2022/07/07/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><p>vim编辑器是一个功能强大的多模式编辑器，是Linux&#x2F;UNIX 上最常用的文本编辑器， 它的作用是建立、编辑、显示文本文件。Vim 没有菜单，只有命令。</p><p>本文根据<a href="https://blog.csdn.net/m0_61933976/article/details/124653524">@每天都要敲代码</a>和[Linux就该这样学》](<a href="https://www.linuxprobe.com/">《Linux就该这么学》 - 必读的Linux系统与红帽RHCE认证免费自学书籍 (linuxprobe.com)</a>)整理。</p><h1 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h1><ul><li>命令模式</li><li>输入模式</li><li>末行模式</li></ul><p>互相的切换</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220707082254961.png" alt="image-20220707082254961"></p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><ul><li><p>插入命令</p><ul><li><code>a</code> :在光标所在字符后插入(add)</li><li><code>A</code> :在光标所在行尾插入</li><li><code>i</code>   :在光标所在字符前插入</li><li><code>I </code>  :在光标所在行行首插入</li><li><code>o</code>  :在光标下插入新行</li><li><code>O</code>  :在光标上插入新行</li></ul></li><li><p>删除命令</p><ul><li><code>x</code> :删除光标所在字符，每次删一个字符</li><li><code>5x </code>:删除光标后5个字符</li><li><code>dd</code> : 删除当前行</li><li><code>5dd</code>:   删除剪切从光标开始的5行 </li><li><code>dG</code> :删除光标所在行到文件的末尾</li><li><code>:1,5d</code> :删除第1到第5行</li><li><code>u</code> :撤销</li></ul></li><li><p>复制命令</p><ul><li><code>5yy</code> :复制从光标开始的5行</li><li><code>p</code> :粘贴</li></ul></li></ul><h1 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h1><ul><li><p>保存和退出命令</p><ul><li><code>:w </code>:保存</li><li><code>:q</code> :退出</li><li><code>:q!</code> :强制退出</li><li><code>:wq!</code> :强制并退出</li></ul></li><li><p>定位命令</p><ul><li><code>:set nu </code>:显示行号</li><li><code>:set nonu</code> :取消行号</li><li><code>gg </code>:最后一行</li><li><code>GG( ]] 也行)</code>:最后一行</li><li><code>5G </code>:到第5行</li><li><code>:5</code>   :到第5行</li><li><code>$</code>   :移到行尾</li><li><code>0 </code> :移到行首（这个是数字0）</li></ul></li><li><p>搜索和替换命令</p><ul><li><code>:s/1/2</code>  :当前光标所在行的第一个1换成2</li><li><code>:s/1/2/g</code> :当前光标行的所有1换成2</li><li><code>:%s/1/2/g </code>:全文的1换成2</li><li><code>?字符串</code> ：从下往上搜索</li><li><code>/字符串</code>  : 从上往下搜索</li><li><code>r : </code>取代光标所在处的一个字符；后面在输入相当于在光标处后面直接插入；</li><li><code>R  </code>从光标所在处开始替换字符，直到整个行被替换完，后面在输入相当于在光标处后面直接插入，按 ESC 结束；</li><li><code>n</code>:显示搜索命令定位到下一个字符串(next)</li><li><code>N</code>：显示搜索命令到上一个字符串</li></ul><hr></li></ul><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol><li><p>导入命令执行结果到文件里<code>:r!命令</code></p></li><li><p>连续行注释</p><ol><li><code>:1,5s/^/#/g</code></li></ol><p> 把 n1 起始行和 n2 终止行里面的内容进行注释 (#)；^(尖角号) 代表移到首行字符并进入插入模式；# 是把注释符 #插入进去；g 代表不询问；</p><ol start="2"><li><p><code>:n1,n2s/^#//g</code></p><p>表示把首行的注释符 #取消掉；相当于把首行的 #替换成空；</p></li></ol></li><li><p>定义快捷键<code> :map 快捷键 触发命令</code></p></li><li><p>替换快捷键 <code>:ab</code></p><p>定义一个快捷键来代替我们的邮箱:</p><p><code>:ab mymail 1399447550@qq.com</code></p><p>以后输入mymail回车即可</p><p>注意：当前定义的快捷键是临时的，想要永久生效，需要写在 <code>用户.vimrc</code></p><p>root 用户： 写入 &#x2F; root&#x2F;.vimrc 当中</p><p>普通用户：写入&#x2F;home&#x2F;用户名&#x2F;.vimrc</p></li></ol><h1 id="vim的配置"><a href="#vim的配置" class="headerlink" title="vim的配置"></a>vim的配置</h1><p>   所有的基本配置，本质是将我们的配置项写入. vimrc 当中；对于普通用户，我们直接 vim .vimrc 把配置文件写进去就行。</p><p>   下载地址 ：<code>curl -sLf https://gitee.com/HGtz2222/VimForCpp/raw/master/install.sh -o ./install.sh &amp;&amp; bash ./install.sh</code> </p><p>   让配置生效： <code>source ~/.bashrc</code> </p><p>   卸载配置直接执行：<code>bash ~/.VimForCpp/uninstall.sh</code></p><h1 id="vim插件设置"><a href="#vim插件设置" class="headerlink" title="vim插件设置"></a>vim插件设置</h1><h2 id="安装插件管理器"><a href="#安装插件管理器" class="headerlink" title="安装插件管理器"></a>安装插件管理器</h2><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>如果无法成功，请参照:</p><p><a href="https://blog.csdn.net/qq_42823864/article/details/124587778">Failed to connect to raw.githubusercontent.com port 443 处理方法_smileGch的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">Plug &quot;要安装的插件&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#end() 结束插件的安装</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python核心编程：多线程</title>
      <link href="/2022/07/06/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/07/06/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><hr><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><p>进程的概念：进程(Process)是资源分配的最小单位，<code>它是操作系统进行资源分配和调度运行的基本单位</code>，是动态的。例如正在运行的QQ，浏览器等。</p><p>一个程序运行后至少有一个进程。</p><p>那么，多进程有什么用呢？先看到一下程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务A&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;任务B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fun_A()</span><br><span class="line">fun_B()</span><br></pre></td></tr></table></figure><p>运行这个程序，会按照代码的执行顺序，fun_A函数执行完毕以后才会执行fun_B函数。如果我们让fun_A和fun_B同时运行，那么这个效率显然会大大提升。而这也就是多进程。</p><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><ol><li><p>导入进程包</p><p> <strong>import multiprocessing</strong></p></li><li><p>通过进程类创建进程对象</p><p> <strong>进程对象 &#x3D; multiprocessing.Process(target &#x3D; 任务名)</strong></p><ul><li>taget : 这里一般是指函数名，方法名</li><li>name:进程名，一般不用设置</li><li>group:进程组，目前只能使用None</li></ul></li><li><p>启动进程执行任务</p><p> <strong>进程对象.start()</strong></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing  <span class="comment"># 第一步，导入进程包</span></span><br><span class="line"><span class="comment"># 唱歌函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 设置延迟</span></span><br><span class="line"><span class="comment"># 跳舞函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用进程类创建进程对象</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance)</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="带参数的进程创建"><a href="#带参数的进程创建" class="headerlink" title="带参数的进程创建"></a>带参数的进程创建</h2><p>传参有两种方式：</p><ul><li><p>args: 以元组的方式传入，顺序一一对应，只有一个参数注意逗号(参数1，)</p></li><li><p>kwargs: 以字典的方式传入，顺序随意，但是key要和函数的参数名字一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用进程类创建进程对象</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance)</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取进程的编号"><a href="#获取进程的编号" class="headerlink" title="获取进程的编号"></a>获取进程的编号</h2><p>但程序越来越多时，不好区分进程的之间的关系，为了方便管理，我们需要获取进程编号。</p><p>有两种方式：</p><ul><li><p>获取当前进程编号</p><p>  <code>os.getpid()</code></p></li><li><p>获取当前父进程的编号</p><p>   <code>os.getppid()</code></p></li></ul><p>通俗的说，谁启动就是父进程，这里”main”是主进程，启动了两个子进程，sing_process和dance_process。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing  <span class="comment"># 第一步，导入进程包</span></span><br><span class="line"><span class="comment"># 唱歌函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是唱歌进程：&#x27;</span>,os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;唱歌的父进程：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>) <span class="comment"># 设置延迟</span></span><br><span class="line"><span class="comment"># 跳舞函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是跳舞进程：&#x27;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;跳舞的父进程：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程：&#x27;</span>, os.getpid())</span><br><span class="line">    sing_process = multiprocessing.Process(target=sing,args=(<span class="number">2</span>,))</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance,kwargs=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br></pre></td></tr></table></figure><p>进程注意点：</p><ol><li>主进程会等待所有子进程执行结束再结束</li><li>设置守护子进程 <code>子进程对象.daemon = True </code>,主进程退出后子进程直接销毁。</li></ol><h2 id="案列：文件夹高并发copy器"><a href="#案列：文件夹高并发copy器" class="headerlink" title="案列：文件夹高并发copy器"></a>案列：文件夹高并发copy器</h2><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><p>线程：<strong>线程是程序执行的最小单位</strong>。同一进程下的线程可以共享进程所拥有的全部资源。（进程是包工头，负责领取资源；线程是工人，负责干活）</p><h2 id="线程创建对象"><a href="#线程创建对象" class="headerlink" title="线程创建对象"></a>线程创建对象</h2><ol><li><p>导入线程模块</p><p>  <strong>import threading</strong></p></li><li><p>通过线程类创建线程对象</p><p> <strong>threading.Thread(target&#x3D;任务名)</strong></p></li><li><p>启动线程执行任务</p><p> <strong>线程对象.start()</strong></p></li></ol><p>传参和进程是一样的，一并演示。</p><p>demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sing_thread = threading.Thread(target=sing,args=(<span class="number">5</span>,))</span><br><span class="line">    dance_thread = threading.Thread(target=dance,kwargs=&#123;<span class="string">&#x27;num&#x27;</span>:<span class="number">4</span>&#125;)</span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br></pre></td></tr></table></figure><h2 id="主线程和子线程的结束顺序"><a href="#主线程和子线程的结束顺序" class="headerlink" title="主线程和子线程的结束顺序"></a>主线程和子线程的结束顺序</h2><p>主线程会等待所有的子线程结束在结束</p><p>demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  <span class="comment"># 主线程其实没有结束，还在等待着子线程</span></span><br></pre></td></tr></table></figure><p>设置守护主线程</p><ul><li><p>创建时设置，如<code>sub_thread = threading.Thread(target=work),daemon=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work,daemon=<span class="literal">True</span>)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  <span class="comment"># 因为子线程守护主线程，所以主线程和子线程这时候都乖乖结束</span></span><br></pre></td></tr></table></figure></li><li><p>使用&#96;线程对象.setDeamon(True)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作....&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=work)</span><br><span class="line">    sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    sub_thread.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程结束了&quot;</span>)  </span><br></pre></td></tr></table></figure></li></ul><h2 id="线程的执行顺序"><a href="#线程的执行顺序" class="headerlink" title="线程的执行顺序"></a>线程的执行顺序</h2><p>线程之间的执行的顺序是无序的</p><p>获取当前的线程信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过current_thread方法获取线程对象</span></span><br><span class="line">current_thread = thread.current_thread()</span><br><span class="line"><span class="comment"># 通过current_thread对象可以知道线程的相关信息，例如创建顺序</span></span><br><span class="line"><span class="built_in">print</span>(current_thread)</span><br></pre></td></tr></table></figure><h1 id="进程和线程的对比"><a href="#进程和线程的对比" class="headerlink" title="进程和线程的对比"></a>进程和线程的对比</h1><ol><li><p>关系对比</p><ol><li>线程是依附在进程里面的，没有进程就没有线程</li><li>一个进程默认提供一条线程，进程可以创建多个线程</li></ol></li><li><p>区别</p><ol><li>创建进程的资源开销要比创建线程的资源开销大</li><li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li><li>线程不能独立运行</li></ol></li><li><p>优缺点对比</p><ol><li>进程优缺点<ul><li>优点：可以用多核</li><li>缺点：资源开销大</li></ul></li><li>线程优缺点<ul><li>优点：资源开销小</li><li>不能使用多核</li></ul></li></ol></li></ol><h1 id="案例：高并发cpoy器"><a href="#案例：高并发cpoy器" class="headerlink" title="案例：高并发cpoy器"></a>案例：高并发cpoy器</h1><h2 id="多进程高并发cpoy器"><a href="#多进程高并发cpoy器" class="headerlink" title="多进程高并发cpoy器"></a>多进程高并发cpoy器</h2><ol><li><p>定义源文件夹所在的路径，目标文件夹所在的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">dest_dir = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建目标文件夹</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(dest_dir)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;目录已存在！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过os.listdir获取源目录的文件列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_list = os.listdir(source_dir)</span><br><span class="line"><span class="comment"># print(file_list)</span></span><br></pre></td></tr></table></figure></li><li><p>遍历每个文件，定义一个函数，专门实现文件拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">     copy_work(file_name,source_dir,dest_dir)</span><br></pre></td></tr></table></figure></li><li><p>对4进行优化，采用进程多任务，完成高并发拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">    copy_work(file_name,source_dir,dest_dir)</span><br><span class="line">    sub_process = multiprocessing.Process(target=copy_wrok,args=(file_name,source_dir,dest_dir))</span><br><span class="line">    sub_process.start()</span><br></pre></td></tr></table></figure></li></ol><p>最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_work</span>(<span class="params">file_name,source_dir,dest_dir</span>):</span><br><span class="line">    <span class="comment"># 拼接文件路径</span></span><br><span class="line">    source_path = source_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    dest_path = dest_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开源文件和目标文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(source_path,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> source_file:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(dest_path,<span class="string">&quot;wb&quot;</span> ) <span class="keyword">as</span> dest_file:</span><br><span class="line">          <span class="comment"># 循环读取源文件到目标路径</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = source_file.read()</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    dest_file.write(data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 定义源文件夹和目标文件夹</span></span><br><span class="line">    source_dir = <span class="string">&quot;D:/test1&quot;</span></span><br><span class="line">    dest_dir = <span class="string">&quot;D:/test2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(dest_dir)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;目录已存在！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取源文件夹的文件列表</span></span><br><span class="line">    file_list = os.listdir(source_dir)</span><br><span class="line">    <span class="built_in">print</span>(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件列表实现拷贝</span></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">        copy_work(file_name, source_dir, dest_dir)</span><br><span class="line">        sub_process = multiprocessing.Process(target=copy_work, args=(file_name, source_dir, dest_dir))</span><br><span class="line">        sub_process.start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：文件和数据存储</title>
      <link href="/2022/07/04/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2022/07/04/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Python文件和流"><a href="#Python文件和流" class="headerlink" title="Python文件和流"></a>Python文件和流</h1><h2 id="读文件和写文件"><a href="#读文件和写文件" class="headerlink" title="读文件和写文件"></a>读文件和写文件</h2><h3 id="使用open-函数"><a href="#使用open-函数" class="headerlink" title="使用open()函数"></a>使用open()函数</h3><p>打开文件:  <code>r  w    r+   w+</code></p><ol><li>r : 读文件</li><li>w : 写文件</li><li>r+ : 文件可读写,但是如果文件不存在，会抛出异常；存在的话，则是追加。通过seek函数可以改变当前的位置。</li><li>w+ : 如果文件不存在，会创建一个新文件，文件存在的话，会覆盖原文件，也就是清空原来文件，写入新内容。</li><li>a+ : 如果文件不存在，创建；存在的话，追加内容。</li></ol><p>操作文件的函数：</p><ol><li>write(string):向文件写入内容，会返回写入文件的字节数。</li><li>read([n]) :读取文件的内容，n是一个整数，表示从文件指针指定的位置开始读取的n个字节。如果不指定n,则从当前位置往后读取所有的字节。</li><li>seek(n):重新设置文件指针，也就是改变文件当前位置。如果使用write函数需要使用seek(0)重置指针。</li><li>close() : 关闭文件。</li></ol><p>以<code>r</code>写模式打开test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;阿福&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;真帅&quot;</span>))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>以<code>w</code>读模式打开test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">2</span>))   <span class="comment">#注意文件位置到了&quot;福&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">1</span>))   <span class="comment">#这里是&quot;真&quot;</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>以<code>r+</code>打开一个不存在的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;afu.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>以<code>w+</code>打开一个不存在的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.write(<span class="string">&#x27;阿福之前的内容不见了！&#x27;</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="管道输出"><a href="#管道输出" class="headerlink" title="管道输出"></a>管道输出</h2><p>什么是管道？即前一个命令的输出会作为下一个命令的输入。用<code>|</code></p><p>Linux和mac有管道，windows没有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入读取全部数据</span></span><br><span class="line">text = sys.stdin.read()</span><br><span class="line"></span><br><span class="line">files = text.split(os.linesep)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    result = re.<span class="keyword">match</span>(<span class="string">&#x27;.*readme.*&#x27;</span>,file)  <span class="comment">#用到了正则表达式</span></span><br><span class="line">    <span class="keyword">if</span> result != <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br></pre></td></tr></table></figure><h2 id="读行和写行"><a href="#读行和写行" class="headerlink" title="读行和写行"></a>读行和写行</h2><h3 id="读行readline"><a href="#读行readline" class="headerlink" title="读行readline()"></a>读行readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = f.readline()</span><br><span class="line">    res = res.rstrip()  <span class="comment">#去除一些空格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="写行"><a href="#写行" class="headerlink" title="写行"></a>写行</h3><p>利用<code>f.write(&#39;内容&#39;+ os.linesep)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;小璇今天很开心&#x27;</span>+os.linesep)</span><br></pre></td></tr></table></figure><h2 id="使用FileInput对象读取文件"><a href="#使用FileInput对象读取文件" class="headerlink" title="使用FileInput对象读取文件"></a>使用FileInput对象读取文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line">file_obj = fileinput.<span class="built_in">input</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file_obj.readline().rstrip())  <span class="comment">#读一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_obj:  <span class="comment"># 读多行</span></span><br><span class="line">    line = line.rstrip()  </span><br><span class="line">    <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_obj.lineno(),<span class="string">&#x27;:&#x27;</span>,line)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(file_obj.filename())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="将字典转换为XML字符串"><a href="#将字典转换为XML字符串" class="headerlink" title="将字典转换为XML字符串"></a>将字典转换为XML字符串</h3><ol><li>导入模块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dicttoxml</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> parseString</span><br></pre></td></tr></table></figure><ol start="2"><li>定义一个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">20</span>,<span class="string">&#x27;names&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;阿福&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;旅游&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;小璇&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;电影&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;道坤&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">21</span>,<span class="string">&#x27;爱好&#x27;</span>:<span class="string">&#x27;摆烂&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>将字典转换成XML格式（bytes形式）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bxml = dicttoxml.dicttoxml(d,custom_root=<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="comment">#print(bxml)</span></span><br><span class="line">xml = bxml.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#有中文，所以把编码改成utf-8</span></span><br><span class="line"><span class="built_in">print</span>(xml)</span><br></pre></td></tr></table></figure><p>如果你出现了以下错误，那么不要害怕</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220701184005936.png" alt="image-20220701184005936"></p><p>估计你的python也是3.10，把python的版本换成3.9就可以解决。</p><p>折腾了我一下午，真是….</p><ol start="4"><li><p>解析xml字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom = parseString(xml) <span class="comment">#xml现在太乱了，所以解析xml字符串</span></span><br><span class="line"></span><br><span class="line">prettyxml = dom.toprettyxml(indent = <span class="string">&#x27;&#x27;</span>)  <span class="comment">#设置缩进，美观</span></span><br><span class="line"><span class="built_in">print</span>(prettyxml)</span><br></pre></td></tr></table></figure></li><li><p>写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">&quot;files&quot;</span>,exist_ok = <span class="literal">True</span>)  <span class="comment">#创建一个files文件夹，如果存在file文件夹就忽略</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;files/persons.xml&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(prettyxml)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取与检索XML文件"><a href="#读取与检索XML文件" class="headerlink" title="读取与检索XML文件"></a>读取与检索XML文件</h3><p>首先，导入相关的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElemenTree <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure><p>接着找到文件位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc  = parse(<span class="string">&#x27;files/afu.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">doc = parse(<span class="string">&#x27;files/afu.xml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> doc.iterfind(<span class="string">&#x27;files/afu.xml&#x27;</span>):</span><br><span class="line">    <span class="comment"># 读取所有id节点的值</span></span><br><span class="line">    id_val = item.findtext(<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取name节点的值</span></span><br><span class="line">    name = item.findtext(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取price节点的值</span></span><br><span class="line">    price = item.findtext(<span class="string">&#x27;price&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="XML字符串转换成字典"><a href="#XML字符串转换成字典" class="headerlink" title="XML字符串转换成字典"></a>XML字符串转换成字典</h3><p>先导入库<code>import xmltodict</code></p><p>打开文件并解析</p><p>美观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件并解析</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;files/persons.xml&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">xml = f.read()</span><br><span class="line">d = xmltodict.parse(xml)  <span class="comment"># 解析xml文件</span></span><br><span class="line"><span class="comment">#print(d)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 美观一下</span></span><br><span class="line"><span class="keyword">import</span>  pprint</span><br><span class="line">nice = pprint.PrettyPrinter(indent=<span class="number">4</span>) <span class="comment"># 设置一下缩进</span></span><br><span class="line">nice.pprint(d)</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON转换成字典"><a href="#JSON转换成字典" class="headerlink" title="JSON转换成字典"></a>JSON转换成字典</h3><ol><li>使用<code>eval</code>函数将json字符串转换成为字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line"><span class="comment">#json文件的缩进很严格，请注意操练时的缩进问题</span></span><br><span class="line">target = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;语文&quot;:111,</span></span><br><span class="line"><span class="string">    &quot;数学&quot;:110,</span></span><br><span class="line"><span class="string">    &quot;英语&quot;:109</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用eval函数将json字符串转换为字典</span></span><br><span class="line">data = <span class="built_in">eval</span>(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用<code>json.loads()</code></p><p>注意python文件不要命名成json.py !</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">target = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;语文&quot;:111,</span></span><br><span class="line"><span class="string">    &quot;数学&quot;:110,</span></span><br><span class="line"><span class="string">    &quot;英语&quot;:109</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.loads()将json字符串转换为字典</span></span><br><span class="line">data = json.loads(target)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li></ol><h3 id="字典转换成JSON"><a href="#字典转换成JSON" class="headerlink" title="字典转换成JSON"></a>字典转换成JSON</h3><p>使用<code>json.dumps()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&#x27;小璇&#x27;</span>:<span class="string">&#x27;江西抚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;道坤&#x27;</span>:<span class="string">&#x27;江西九江&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小熙&#x27;</span>:<span class="string">&#x27;江西抚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小岚&#x27;</span>:<span class="string">&#x27;江西赣州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;小彭&#x27;</span>:<span class="string">&#x27;江西上饶&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = json.dumps(person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))<span class="comment"># 查看data的类型</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="JSON转换成类实例（对象）"><a href="#JSON转换成类实例（对象）" class="headerlink" title="JSON转换成类实例（对象）"></a>JSON转换成类实例（对象）</h3><p>方法：利用<code>loads函数</code>的object_hook关键字参数指定一个类或者一个回调函数。</p><p>先创建一个json文件（我的文件名是person.json）</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220702010414108.png" alt="image-20220702010414108"></p><ol><li>指定一个类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">read_data = f.read()</span><br><span class="line">to_person1 = json.loads(read_data,object_hook=Person) <span class="comment"># 使用json.loads()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(to_person1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,to_person1.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,to_person1.age)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用回调函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_person</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="keyword">return</span> Person(d)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">read_data = f.read()</span><br><span class="line">to_person2 = json.loads(read_data,object_hook=json_person) <span class="comment"># object_hook参数改成回调函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(to_person2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,to_person2.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,to_person2.age)</span><br></pre></td></tr></table></figure><h3 id="将类实例转换成JSON字符串"><a href="#将类实例转换成JSON字符串" class="headerlink" title="将类实例转换成JSON字符串"></a>将类实例转换成JSON字符串</h3><p>解决方案：利用dumps(将字典转换成字符串)</p><p><code>default</code>关键字参数指定一个回调函数，这个回调函数会接收一个类实例</p><p>回调函数需要返回一个字典，最后，dumps函数会将字典转换成JSON字符串</p><p>过程为: object –&gt; dict –&gt; JSON</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数       </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Person_to_dict</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:obj.name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:obj.age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&#x27;阿福&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">json_P1 = json.dumps(P1,default=Person_to_dict,ensure_ascii=<span class="literal">False</span>) <span class="comment"># 不使用ascii码</span></span><br><span class="line"><span class="built_in">print</span>(json_P1)</span><br></pre></td></tr></table></figure><h3 id="类实例列表与JSON字符串的转换"><a href="#类实例列表与JSON字符串的转换" class="headerlink" title="类实例列表与JSON字符串的转换"></a>类实例列表与JSON字符串的转换</h3><p>创建一个json文件</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220704083340552.png" alt="image-20220704083340552"></p><ol><li>json文件转换成类实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding= <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">persons_to_list = json.loads(jsonStr,object_hook=Person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(persons_to_list))</span><br><span class="line"><span class="keyword">for</span> P <span class="keyword">in</span> persons_to_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name = &#x27;</span>,P.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age = &#x27;</span>,P.age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sex = &#x27;</span>, P.sex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;addr = &#x27;</span>, P.addr)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>类实例转换成json文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,d</span>):</span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding= <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">persons_to_list = json.loads(jsonStr,object_hook=Person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(persons_to_list))</span><br><span class="line"><span class="keyword">for</span> P <span class="keyword">in</span> persons_to_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name = &#x27;</span>,P.name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age = &#x27;</span>,P.age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sex = &#x27;</span>, P.sex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;addr = &#x27;</span>, P.addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_json</span>(<span class="params">P</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: P.name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:P.age,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>:P.sex,</span><br><span class="line">        <span class="string">&#x27;addr&#x27;</span>:P.addr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">jsonStr = json.dumps(persons_to_list,default=person_json,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(jsonStr)</span><br></pre></td></tr></table></figure></li></ol><h3 id="JSON转换成XML字符串"><a href="#JSON转换成XML字符串" class="headerlink" title="JSON转换成XML字符串"></a>JSON转换成XML字符串</h3><p>过程: <code>json --&gt; dict --&gt; xml</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> dicttoxml</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;../person.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">jsonStr = f.read()</span><br><span class="line"></span><br><span class="line">d = json.loads(jsonStr)  <span class="comment"># 先转换成字典</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">xmlStr = dicttoxml.dicttoxml(d).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(xmlStr)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>我的json文件</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220704115559353.png" alt="image-20220704115559353"></p><p><strong>注意：</strong>json文件不要和对应的.py文件同在一个文件夹，不然会出问题，同时也建议本篇的博客都使用python3.9操作。</p><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>未完待续</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>未完待续</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>未完待续</p><h2 id="非关系型数据库（NoSQL）-MongoDB"><a href="#非关系型数据库（NoSQL）-MongoDB" class="headerlink" title="非关系型数据库（NoSQL）(MongoDB)"></a>非关系型数据库（NoSQL）(MongoDB)</h2><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：面向高级对象编程</title>
      <link href="/2022/06/30/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/30/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>本文章由<code>阿里云大学</code>和<code>廖雪峰的python</code>整理。</p><h1 id="使用-slots-（浅学）"><a href="#使用-slots-（浅学）" class="headerlink" title="使用__slots__（浅学）"></a>使用<code>__slots__</code>（浅学）</h1><p>一般来说，我们创建<code>class dog</code>就可以绑定属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">example</span>:</span><br><span class="line">    __slots__ = (<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>)  <span class="comment">#那么该类只能使用“A”,“B”两种属性</span></span><br><span class="line"> </span><br><span class="line">test1 = example()</span><br><span class="line">test1.A = <span class="number">2</span> <span class="comment"># A属性可以使用</span></span><br><span class="line">test1.C = <span class="number">2</span> <span class="comment"># C属性不可以使用，此语句也会报错</span></span><br></pre></td></tr></table></figure><h1 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h1><p>装饰器是什么东西？</p><p>装饰器就是让程序员使用属性一样去使用方法</p><h2 id="property装饰get方法"><a href="#property装饰get方法" class="headerlink" title="@property装饰get方法"></a>@property装饰get方法</h2><p>property装饰器，用来将一个get方法，转换成对象的属性。</p><p>使用property装饰的方法，必须属性名是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般方法的平常使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用property</span></span><br><span class="line"><span class="comment">#可以像使用属性一样去使用方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#get方法（获取值）</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name)  <span class="comment">#区别在这，不使用P1.name()</span></span><br></pre></td></tr></table></figure><h2 id="属性名-setter装饰set方法"><a href="#属性名-setter装饰set方法" class="headerlink" title="@属性名.setter装饰set方法"></a><code>@属性名.setter</code>装饰set方法</h2><p>属性名要和property装饰的相对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 @属性名.setter</span></span><br><span class="line"><span class="comment">#注意属性名，这里我们要对应上面property装饰的name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是get方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># setter方法（设置值）</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">P1 = Person(<span class="string">&quot;阿福&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(P1.name)  </span><br><span class="line">P1.name = <span class="string">&quot;小璇&quot;</span>  <span class="comment"># 在这里可以像属性一样赋值</span></span><br><span class="line"><span class="built_in">print</span>(P1.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶编程：面向对象编程</title>
      <link href="/2022/06/29/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/29/Python%E8%BF%9B%E9%98%B6%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Python进阶编程：面向对象编程"><a href="#Python进阶编程：面向对象编程" class="headerlink" title="Python进阶编程：面向对象编程"></a>Python进阶编程：面向对象编程</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>根据<code>B站大学</code>和<code>廖雪峰的python</code>整理而来</p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p>面向过程：思考的重点在于步骤。</p><p>面向对象：把问题分解成各个对象，描述对象在整个事情的行为。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><ul><li><p>人狗大战</p><ul><li><p>先创建很多狗，每个狗有各自的名字，品种，攻击力等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向过程的思考</span></span><br><span class="line">dog1 = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小红&quot;</span>,  <span class="comment"># 创建dog1</span></span><br><span class="line">    <span class="string">&quot;d_type&quot;</span>: <span class="string">&quot;京巴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attack_val&quot;</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite1</span>(<span class="params">person</span>):  <span class="comment"># dog1咬人</span></span><br><span class="line">    person.life_val -= <span class="number">40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog2 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,  <span class="comment"># 创建dog2</span></span><br><span class="line">        <span class="string">&quot;d_type&quot;</span>: <span class="string">&quot;牧羊犬&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attack_val&quot;</span>: <span class="number">50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite2</span>(<span class="params">person</span>):  <span class="comment"># dog2咬人</span></span><br><span class="line">    person.life_val -= <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1)</span><br><span class="line"><span class="built_in">print</span>(dog2)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#以此类推创建dog3,doe4......</span></span><br><span class="line"><span class="comment">#可以看到每当创建一个dog3就要重复很多代码，很是麻烦，有没有更好的办法的呢？</span></span><br><span class="line"><span class="comment">#很负责任的跟大家说—— 没有</span></span><br><span class="line"><span class="comment">#是不可能的！！</span></span><br><span class="line"><span class="comment">#下面就是另一种编程思想</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向对象的思考</span></span><br><span class="line"><span class="comment">#写一个函数，包含了每个狗的共同点</span></span><br><span class="line">attack_vals = &#123;</span><br><span class="line">    <span class="string">&quot;京巴&quot;</span>:<span class="number">40</span>,</span><br><span class="line">    <span class="string">&quot;牧羊犬&quot;</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="string">&quot;藏獒&quot;</span>:<span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dog</span>(<span class="params">name, d_type</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;d_type&quot;</span>: d_type,</span><br><span class="line">        <span class="string">&quot;life_val&quot;</span>: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d_type <span class="keyword">in</span> attack_vals:  <span class="comment"># 根据品种添加攻击力</span></span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = attack_vals[d_type]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog1 = dog(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;京巴&quot;</span>)  <span class="comment"># 实体1</span></span><br><span class="line">dog2 = dog(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;牧羊犬&quot;</span>)  <span class="comment"># 实体2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1)</span><br><span class="line"><span class="built_in">print</span>(dog2)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>创建很多人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#人也按照共同点创造</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: age,</span><br><span class="line">        <span class="string">&quot;life_val&quot;</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = <span class="number">50</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data[<span class="string">&quot;attack_val&quot;</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P1 = person(<span class="string">&quot;阿福&quot;</span>, <span class="number">21</span>)</span><br><span class="line">P2 = person(<span class="string">&quot;小璇&quot;</span>, <span class="number">17</span>)</span><br><span class="line">P3 = person(<span class="string">&quot;小岚&quot;</span>, <span class="number">21</span>)</span><br><span class="line">P4 = person(<span class="string">&quot;小乐&quot;</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(P1)</span><br><span class="line"><span class="built_in">print</span>(P2)</span><br><span class="line"><span class="built_in">print</span>(P3)</span><br><span class="line"><span class="built_in">print</span>(P4)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>人可以打狗，狗可以打人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#狗咬人</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bite</span>(<span class="params">dog_obj,person_obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的攻击力：<span class="subst">&#123;dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的血量：<span class="subst">&#123;person_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span> &quot;</span>)</span><br><span class="line">    person_obj[<span class="string">&#x27;life_val&#x27;</span>] -= dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>咬了<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,人掉了<span class="subst">&#123;dog_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>血量，还剩下<span class="subst">&#123;person_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">bite(dog1,P1)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打狗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight_dog</span>(<span class="params">person_obj,dog_obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的攻击力：<span class="subst">&#123;person_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>的血量：<span class="subst">&#123;dog_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span> &quot;</span>)</span><br><span class="line">    dog_obj[<span class="string">&#x27;life_val&#x27;</span>] -= person_obj[<span class="string">&#x27;attack_val&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;person_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>打了<span class="subst">&#123;dog_obj[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,狗子没有了<span class="subst">&#123;person_obj[<span class="string">&#x27;attack_val&#x27;</span>]&#125;</span>血量，还剩下<span class="subst">&#123;dog_obj[<span class="string">&#x27;life_val&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">fight_dog(P1,dog1)</span><br></pre></td></tr></table></figure></li><li><p><strong>思考</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上文的打狗函数是bite(dog_obj,person_obj),我们在实际传参的时候写成bite(person_obj,dog_obj)可以吗？</span><br><span class="line">从现实的角度来说，肯定是不可以的。因为bite()函数的狗咬人，理应传入狗的伤害值和人的生命值。</span><br><span class="line">但是从程序的角度来说，这样运行也没什么问题，因为计算机不知道你是人是狗。</span><br><span class="line">那么怎么让计算机知道你是人是狗呢？这就是这篇文章探讨的主要内容了！</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类的语法"><a href="#类的语法" class="headerlink" title="类的语法"></a>类的语法</h3><p>语法格式： class 类的名称():</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">    d_type = <span class="string">&quot;藏獒&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">dog1 = dog() <span class="comment">#类的一个实例化</span></span><br><span class="line"><span class="built_in">print</span>(dog1.d_type) <span class="comment">#调用类的属性，属性一个静态的</span></span><br><span class="line">dog1.say_hi() <span class="comment">#该实列调用方法，方法是一个动作</span></span><br></pre></td></tr></table></figure><p>类的初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>):  <span class="comment">#初始化方法，构造方法，实例化时会自动执行，完成一些初始化操作</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.d_type = d_type</span><br><span class="line">        self.life_val = <span class="number">100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">dog1 = dog(<span class="string">&quot;小红&quot;</span>,<span class="string">&quot;藏獒&quot;</span>) <span class="comment">#类的一个实例化</span></span><br><span class="line"><span class="built_in">print</span>(dog1.d_type) <span class="comment">#调用类的属性，属性一个静态的</span></span><br><span class="line">dog1.say_hi() <span class="comment">#该实列调用方法，方法是一个动作</span></span><br></pre></td></tr></table></figure><h3 id="类属性的应用场景"><a href="#类属性的应用场景" class="headerlink" title="类属性的应用场景"></a>类属性的应用场景</h3><p>类属性：类变量，也就是公共属性，所有实列共享</p><p>实例属性：实例变量，成员变量，每个实例独享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类属性和实例调用类属性，若数值也是一样，内存空间是一样的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog1.life_val))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog2.life_val))</span><br></pre></td></tr></table></figure><p><strong>dog.life_val</strong>变量是一样，都是100，所以可以单独设置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">life_val = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>): </span><br><span class="line">        self.name = name</span><br><span class="line">        self.d_type = d_type</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;各位你们好，我的品种是<span class="subst">&#123;self.d_type&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>实列属性对自己不满意也可以改属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dog.life_val = 100</span></span><br><span class="line">dog2.life_val = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dog2.life_val))</span><br></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ol><li>依赖关系</li><li>关联关系</li><li>组合关系</li><li>聚合关系</li><li>继承关系，类的三大特性之一</li></ol><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><h3 id="访问保护"><a href="#访问保护" class="headerlink" title="访问保护"></a>访问保护</h3><p>在类的应用场景我们说到实例属性对自己不满意也可以改属性。</p><p>如果要让内部属性不被外部访问，可以在属性前面加上一些东西，如<code>__</code></p><p>需要注意：变量名<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>): </span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__d_type = d_type</span><br><span class="line">        self.life_val = <span class="number">100</span></span><br><span class="line">    <span class="comment">#这样的话dog2.val = 200就不能成功。因为无法访问</span></span><br></pre></td></tr></table></figure><p>如果说我们有时候真的需要修改life_val怎么办？可以给dog<code>增加一个set_life_val</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>():  <span class="comment">#创建一个狗类</span></span><br><span class="line">    <span class="comment"># life_val = 100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,d_type</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__d_type = d_type</span><br><span class="line">        self.__life_val = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_life_val</span>(<span class="params">self,life</span>):</span><br><span class="line">        self.__life_val = life</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>除了修改，我们还需要访问life_val。但是现在显然是不能访问的，解决方案如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_life_val</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__life_val</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当我们新定义一个class,可以从现有的class继承，新的这个class也就是子类。</p><p>比如我们定义一个二哈继承狗类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">erha</span>(<span class="title class_ inherited__">dog</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样的话,二哈拥有父类dog的全部功能。</p><h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><h3 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用type()</h3><p>使用type()可以判断类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">12345</span>)</span><br><span class="line"><span class="built_in">type</span>(dog1)</span><br></pre></td></tr></table></figure><h3 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance()"></a>使用isinstance()</h3><p>对于class的继承关系。使用<code>type()</code>不方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(erha1,erha)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>因为<code>erha</code>是从<code>dog</code>继承下来的，所以erha1也是属于<code>dog</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(erha1,dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用dir()</h3><p>获取一个对象的所有属性和方法,它返回一个包含字符串的list。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>(<span class="number">123</span>)</span><br><span class="line">[<span class="string">&#x27;__abs__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>,....... <span class="string">&#x27;from_bytes&#x27;</span>, <span class="string">&#x27;imag&#x27;</span>, <span class="string">&#x27;numerator&#x27;</span>, <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;to_bytes&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+picGo图床+github设置</title>
      <link href="/2022/06/28/Typora-picGo%E5%9B%BE%E5%BA%8A-github%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/06/28/Typora-picGo%E5%9B%BE%E5%BA%8A-github%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>利用picGo工具，可以把图片上传到github的仓库中。优点是稳定性很强，同时也是免费的。缺点是github的仓库需要公开，也就是隐私性不强。各位小伙伴若是在我仓库中看到什么不得了的图片，请联系我。</p><h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ol><li>Typora</li><li>github账号</li><li>picGo客户端<ul><li>github下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">picGo</a></li></ul></li></ol><h1 id="github仓库设置"><a href="#github仓库设置" class="headerlink" title="github仓库设置"></a>github仓库设置</h1><ol><li><p>新建一个仓库</p><ol><li><p>来到仓库界面</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628185621077.png" alt="image-20220628185621077"></p></li></ol></li><li><p>点击右边的<strong>new</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628185752594.png" alt="image-20220628185752594"></p></li><li><p>填入仓库名字</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190023543.png" alt="image-20220628190023543"></p></li><li><p>点击下方的<strong>create repository</strong></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190138509.png" alt="image-20220628190138509"></p></li><li><p>来到<strong>Setting</strong> –&gt; <strong>在左侧列表中选择最下面的<code>&lt;&gt;Developer settings</code></strong> –&gt;生成<strong>Token</strong></p><ol><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190525124-16564144777011.png"></li></ol></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628190901496.png" alt="image-20220628190901496"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191021020.png" alt="image-20220628191021020"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191216425.png" alt="image-20220628191216425"></p></li><li><p>出现的<strong>Token只出现一次</strong>，记得保存</p></li></ol><h1 id="picGo工具的设置"><a href="#picGo工具的设置" class="headerlink" title="picGo工具的设置"></a>picGo工具的设置</h1><ol><li>打开软件，选择<strong>图床设置</strong>–&gt; <strong>GitHub</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628191511807.png" alt="image-20220628191511807"></p><ol start="2"><li><p>填写信息</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628192030339.png" alt="image-20220628192030339"></p></li></ol><p>自定义域名可以使用CDN加速：</p><p><code>https://cdn.jsdelivr.net/gh/github的用户名/创建的仓库名</code></p><h1 id="Typora的设置"><a href="#Typora的设置" class="headerlink" title="Typora的设置"></a>Typora的设置</h1><ol><li><p>打开Typora,点击文件 –&gt; 偏好设置，设置如图</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/image-20220628192440917.png" alt="image-20220628192440917"></p></li></ol><p>注意： PicGo路径是安装路径。</p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + github搭建个人博客</title>
      <link href="/2022/06/27/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/06/27/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a><strong>工具准备</strong></h1><h2 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a><strong>下载nodejs</strong></h2><p>下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144314795.png" alt="image-20220627144314795"></p><h2 id="检验Node-js是否成功安装"><a href="#检验Node-js是否成功安装" class="headerlink" title="检验Node.js是否成功安装"></a><strong>检验Node.js是否成功安装</strong></h2><p>打开cmd,输入Node -v，出现版本即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144349612.png" alt="image-20220627144349612"></p><p>可能出现的问题：</p><ul><li><p>如果npm -v会出现<strong>npm WARN config global –global, –local are deprecated. Use –location&#x3D;global instead</strong>.</p><ul><li><p>解决办法是：在管理员cmd中，输入<strong>npm-windows-upgrade –npm-version latest</strong></p><p>出现以下内容即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144410113.png" alt="image-20220627144410113"></p></li><li><p>若出现npm fund 这不是报错！</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627144440538.png" alt="image-20220627144440538"></p></li></ul></li></ul><h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a><strong>下载git</strong></h2><p>下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><h2 id="检验git是否安装成功"><a href="#检验git是否安装成功" class="headerlink" title="检验git是否安装成功"></a><strong>检验git是否安装成功</strong></h2><p>在cmd输入<strong>git –version</strong>，出现下图即为成功（版本号可以不一致）</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627132957164-16563122957961-16563123012263.png" alt="image-20220627132957164"></p><h1 id="Hexo下载"><a href="#Hexo下载" class="headerlink" title="Hexo下载"></a>Hexo下载</h1><h2 id="创建一个文件夹名为“myHexo“，右键“git-bash-here“"><a href="#创建一个文件夹名为“myHexo“，右键“git-bash-here“" class="headerlink" title="创建一个文件夹名为“myHexo“，右键“git bash here“"></a><strong>创建一个文件夹名为“myHexo“，右键“git bash here“</strong></h2><h2 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a><strong>下载hexo</strong></h2><p>npm可能下载过慢，可以使用国内淘宝下载源cnpm</p><ol><li><p>方法一 ：输入npm: <strong>npm install -g hexo-cli</strong></p></li><li><p>方法二：下载cnpm：<strong>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong> </p><p>​                 安装hexo:  <strong>cnpm install -g hexo-cli</strong></p></li></ol><h2 id="检验是否安装Hexo"><a href="#检验是否安装Hexo" class="headerlink" title="检验是否安装Hexo"></a>检验是否安装Hexo</h2><p>用hexo -v命令查看是否安装成功hexo，若成功则出现：</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135923731.png" alt="image-20220627133432543"></p><h1 id="网站的初始化"><a href="#网站的初始化" class="headerlink" title="网站的初始化"></a>网站的初始化</h1><h2 id="输入hexo-init"><a href="#输入hexo-init" class="headerlink" title="输入hexo init"></a><strong>输入hexo init</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133630230-16563123192579-165631232071811.png" alt="image-20220627133630230"></p><h2 id="npm的安装"><a href="#npm的安装" class="headerlink" title="npm的安装"></a>npm的安装</h2><p>输入<code>npm install </code></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133712319-165631232618713-165631232758415.png" alt="image-20220627133712319"></p><h2 id="网页的生成"><a href="#网页的生成" class="headerlink" title="网页的生成"></a><strong>网页的生成</strong></h2><p>输入 <code>hexo g</code></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133750031-165631233313717.png" alt="image-20220627133750031"></p><h2 id="本地访问"><a href="#本地访问" class="headerlink" title="本地访问"></a><strong>本地访问</strong></h2><p>输入<code>hexo s</code> 或者<code>hexo server</code>,,然后在浏览器输入<a href="http://localhost:4000查看是否在本地可以访问">http://localhost:4000查看是否在本地可以访问</a></p><p>ctrl + C 为停止</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133837345-165631233658619.png" alt="image-20220627133837345"></p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627133849439-165631234008921.png" alt="image-20220627133849439"></p><h1 id="本地和github关联"><a href="#本地和github关联" class="headerlink" title="本地和github关联"></a><strong>本地和github关联</strong></h1><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a><strong>生成SSH密钥</strong></h2><ol><li><p>来到git bash里（当前位置为之前创建的文件夹，我这里是myHexo）</p></li><li><p>生成ssh密钥 ： ssh-keygen -t rsa -C “你的github邮件地址”</p></li><li><p>按四次4次回车，结果如下：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627134704222-165631234512223.png" alt="image-20220627134704222"></li></ul></li><li><p>注意找到id_rsa.pub这个文件路径并复制里面的内容（如上图红色圈）</p><ul><li><p>可以改后缀，使用记事本打开</p></li><li><p>或者使用cd 命令，再用cat命令</p></li><li><p>复制这串内容（原模原样复制）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627134913469-165631234769325.png" alt="image-20220627134913469"></p></li></ul></li></ol><p>​</p><h2 id="Github的仓库关联"><a href="#Github的仓库关联" class="headerlink" title="Github的仓库关联"></a><strong>Github的仓库关联</strong></h2><h3 id="点击右上角的github头像"><a href="#点击右上角的github头像" class="headerlink" title="点击右上角的github头像"></a>点击右上角的github头像</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135026269-165631234997027.png" alt="image-20220627135026269"></p><h3 id="选中settings"><a href="#选中settings" class="headerlink" title="选中settings"></a>选中settings</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135057567-165631237153029.png" alt="image-20220627135057567"></p><h3 id="点击左侧的ssh-and-GPG-keys"><a href="#点击左侧的ssh-and-GPG-keys" class="headerlink" title="点击左侧的ssh and GPG keys"></a>点击左侧的ssh and GPG keys</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135155776-165631237506031.png" alt="image-20220627135155776"></p><h3 id="SSH-keys选择New-SSH-keys"><a href="#SSH-keys选择New-SSH-keys" class="headerlink" title="SSH keys选择New SSH keys"></a>SSH keys选择New SSH keys</h3><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135224600-165631237729033.png" alt="image-20220627135224600"></p><h3 id="填写内容"><a href="#填写内容" class="headerlink" title="填写内容"></a>填写内容</h3><ul><li>Title 随意填写</li><li>Key:粘贴刚才的密钥</li><li><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135312825-165631237969335.png" alt="image-20220627135312825"></li></ul><h3 id="点击Add-SSH-key保存"><a href="#点击Add-SSH-key保存" class="headerlink" title="点击Add SSH key保存"></a>点击Add SSH key保存</h3><h2 id="测试本地与github是否关联成功"><a href="#测试本地与github是否关联成功" class="headerlink" title="测试本地与github是否关联成功"></a><strong>测试本地与github是否关联成功</strong></h2><p>输入 ：<code>ssh -T git@github.com</code></p><p>出现 successfully就是成功，but这些不管它。</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627135837403-165631238220137.png" alt="image-20220627135837403"></p><h1 id="博客的远程推送"><a href="#博客的远程推送" class="headerlink" title="博客的远程推送"></a><strong>博客的远程推送</strong></h1><h2 id="config-yml-的配置"><a href="#config-yml-的配置" class="headerlink" title="_config.yml****的配置"></a><strong>_config.yml****的配置</strong></h2><p>来到myHexo文件夹，找到_config.yml</p><p>使用记事本或者在git bash中用vim打开找到最后一行,输入一下格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Deploy:</span><br><span class="line">Type:空格 git</span><br><span class="line"><span class="title function_">Respository</span><span class="params">(或者repo)</span>: 空格 （来到github的创建的仓库，点击code,复制地址）</span><br><span class="line">Branch: 空格 main</span><br></pre></td></tr></table></figure><p>如我的配置</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627140200921-165631238522639.png" alt="image-20220627140200921"></p><h2 id="安装自动部署发布工具"><a href="#安装自动部署发布工具" class="headerlink" title="安装自动部署发布工具"></a><strong>安装自动部署发布工具</strong></h2><ol><li>安装工具</li></ol><p>​输入<code>**npm install hexo-deployer-git --save**</code></p><p>​再输入hexo g</p><p>​再输入hexo d</p><ol start="2"><li><p>访问</p><p>浏览器输入 ： 自己github用户名@github.io</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img//image-20220627140528303-165631238737941.png" alt="image-20220627140528303"></p></li></ol><h1 id="hexo多部署"><a href="#hexo多部署" class="headerlink" title="hexo多部署"></a>hexo多部署</h1><h2 id="创建oss"><a href="#创建oss" class="headerlink" title="创建oss"></a>创建oss</h2><ol><li><p>先购买oss:<a href="https://www.aliyun.com/product/oss?spm=5176.28055625.J_3207526240.169.6032154a6dEo78&scm=20140722.M_5813091._.V_1">对象存储 OSS_云存储服务_企业数据管理_存储-阿里云 (aliyun.com)</a></p></li><li><p>进入oss控制台:<a href="https://oss.console.aliyun.com/overview">OSS管理控制台 (aliyun.com)</a></p></li><li><p>设置<strong>Bucket</strong></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412195958117.png" alt="image-20230412195958117"></p></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412200813314.png" alt="image-20230412200813314"></p><ol start="4"><li>设置用户</li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412201011304.png" alt="image-20230412201011304"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412201140903.png" alt="image-20230412201140903"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412201348994.png" alt="image-20230412201348994"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412201708172.png" alt="image-20230412201708172"></p><h2 id="设置页面"><a href="#设置页面" class="headerlink" title="设置页面"></a>设置页面</h2><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230412202449524.png" alt="image-20230412202449524"></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/-16144492022270.jpg" alt="img"></p><ul><li>默认首页：index.html</li><li>默认404页：404.html（按照你实际的404页面地址填写）</li><li>子目录首页：开通，这里由于Hexo的分类、标签等页面，都是子目录的形式（例如：&#x2F;tags&#x2F;），如果不开通这个功能，不会自动定位到对应目录的index.html</li><li>文件404规则：Index</li></ul><h2 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h2><h3 id="在hexo目录执行"><a href="#在hexo目录执行" class="headerlink" title="在hexo目录执行"></a>在hexo目录执行</h3><p>阿里云推送:<code>npm install hexo-deployer-ali-oss --save</code></p><p>(github的推送:<code>npm install hexo-deployer-git --save</code>)</p><p>在hexo的**_config.yml**文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    # 阿里云oos</span><br><span class="line">  - type: ali-oss</span><br><span class="line">    region: &lt;您的oss 区域代码（例如:oss-cn-hangzhou）&gt;      </span><br><span class="line">    accessKeyId: &lt;输入这个Id&gt;</span><br><span class="line">    accessKeySecret: &lt;输入这个密码&gt;</span><br><span class="line">    bucket: </span><br><span class="line"></span><br><span class="line">    # github</span><br><span class="line">  - type: git</span><br><span class="line">    repo: </span><br><span class="line">    # 自己的github地址</span><br><span class="line">        https://github.com/daokunn/daokunn.github.io.git</span><br><span class="line">        </span><br><span class="line">        #https://e.coding.net/daokunn/hexo/daokun.git</span><br><span class="line">    branch: main</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>默认是推送到根目录，若要指定目录 就加入remotePath:&lt;您要部署的目录&gt;</p><p><code>hexo cl</code></p><p><code>hexo g</code></p><p><code>hexo de [remotePath:&lt;您要部署的目录&gt;]</code></p><h1 id="Centos的配置"><a href="#Centos的配置" class="headerlink" title="Centos的配置"></a>Centos的配置</h1><h2 id="工具准备-1"><a href="#工具准备-1" class="headerlink" title="工具准备"></a>工具准备</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><ol><li><code>yum install git -y</code></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416230805088.png" alt="image-20230416230805088"></p><ol start="2"><li>验证 Git 的版本：</li></ol><p><code>git --version</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416231042536.png" alt="image-20230416231042536"></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ol><li>安装</li></ol><p><code>curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash - &amp;&amp; sudo yum clean all &amp;&amp; sudo yum makecache  &amp;&amp; sudo yum install -y gcc-c++ make &amp;&amp; sudo yum install -y nodejs</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416231339159.png" alt="image-20230416231339159"></p><ol start="2"><li><p>验证node版本信息</p><p><code>node -v</code></p></li><li><p>验证npm的版本信息</p></li></ol><p><code>  npm - v</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416231604001.png" alt="image-20230416231604001"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol><li><p>安装</p><p><code>npm install -g hexo-cli</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416231837248.png" alt="image-20230416231837248"></p></li><li><p>验证</p></li></ol><p><code>hexo -v</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416231855067.png" alt="image-20230416231855067"></p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h3><ol><li><code>cd ~ &amp;&amp; hexo init blog --no-clone</code></li></ol><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416232120574.png" alt="image-20230416232120574"></p><ol start="2"><li>安装 hexo-deployer-cos 插件</li></ol><p><code>cd ~/blog &amp;&amp; npm install hexo-deployer-ali-oss --save</code></p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416232457346.png" alt="image-20230416232457346"></p><ol start="3"><li>自动生成博客的静态文件</li></ol><p><code>hexo  g</code></p><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><ol><li>进入 blog 项目文件夹，启动博客项目:</li></ol><p><code>cd ~/blog/ &amp;&amp; hexo s</code></p><ol start="2"><li>验证是否启动成功</li></ol><p><code>IP地址加端口号4000</code></p><p>例如:192.168.1.1:4000</p><p><img src="https://daokun-hexo.oss-cn-hangzhou.aliyuncs.com/img_for_hexo/image-20230416232709710.png" alt="image-20230416232709710"></p><p>最后，非常感谢大佬[武师叔](<a href="https://wushishu.xyz/post/be8880ea.html">Hexo+github搭建个人博客 | 武师叔 (wushishu.xyz)</a>)！武师叔的博客很系统，很详细的记录了搭建的流程。在搭建的时候，我遇到了一些麻烦，在武师叔的博客里，找到了解决方案。在此衷心的感谢！</p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora下的Markdown语法入门</title>
      <link href="/2022/06/27/Typora%E4%B8%8B%E7%9A%84Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/27/Typora%E4%B8%8B%E7%9A%84Markdown%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Typora下Markdown语法入门"><a href="#Typora下Markdown语法入门" class="headerlink" title="Typora下Markdown语法入门"></a><center>Typora下Markdown语法入门</center></h1><p>Markdown语言：是一种轻量级标记语言，其中Typora是markdown免费文本编辑器。掌握好Markdown的语法后，我们只需要关注内容本身，至于内容的排版，格式不必花费大量精力。</p><hr><ul><li><h2 id="Typora结构类操作"><a href="#Typora结构类操作" class="headerlink" title="Typora结构类操作"></a>Typora结构类操作</h2><h3 id="多级标题（注意‘-’后有一个空格）"><a href="#多级标题（注意‘-’后有一个空格）" class="headerlink" title="多级标题（注意‘#’后有一个空格）"></a>多级标题（注意‘#’后有一个空格）</h3><p>​</p><p>一级标题： <code># 文本内容</code></p><ul><li><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li></ul><p>二级标题：<code> ## 文本内容</code></p><ul><li><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li></ul><p>三级标题：<code>### 文本内容</code></p><ul><li><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li></ul><p>四级标题：<code>#### 文本内容</code></p><ul><li><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4></li></ul><p>五级标题：<code>##### 文本内容</code></p><ul><li><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></li></ul><p>六级标题：<code>######文本 内容</code></p><ul><li><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ul><table><thead><tr><th>各类标题快捷键</th><th>ctrl + [1-6]</th></tr></thead><tbody><tr><td>清除</td><td>ctrl + 0</td></tr><tr><td>一级标题居中</td><td># <code>&lt;center&gt;</code> 文本内容</td></tr></tbody></table><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><ul><li><p>语法格式：数字. 空格 文本内容</p><p>​快捷键：<code>Ctrl + shfit + [</code></p></li><li><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br></pre></td></tr></table></figure><p>有序列表1</p><p>有序列表2</p></li><li><p>去除有序： 按住两次“Enter”或者按“↓”</p></li><li><p>降级快捷键：Tab</p></li><li><p>升级快捷键: shfit + Tab</p></li></ul><h3 id="3-无序列表"><a href="#3-无序列表" class="headerlink" title="3. 无序列表"></a>3. 无序列表</h3><ul><li><p>语法格式: <code>空格 文本内容</code>  或者 <code>*空格 文本内容</code></p></li><li><p>快捷键: <code>ctrl + shfit + ]</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表<span class="number">1</span></span><br><span class="line">- 无序列表<span class="number">2</span></span><br></pre></td></tr></table></figure><p>无序列表1</p><p>无序列表2</p></li></ul><h3 id="4-任务列表"><a href="#4-任务列表" class="headerlink" title="4. 任务列表"></a>4. 任务列表</h3><ul><li><p>语法格式：<code>-空格[空格]空格 文本内容</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 今天要背<span class="number">20</span>个单词</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 今天要背20个单词</li></ul></li></ul><h3 id="5-表格"><a href="#5-表格" class="headerlink" title="5. 表格"></a>5. 表格</h3><ul><li><p>语法格式：|内容|</p><p>​快捷键: <code>ctrl + T</code></p></li><li><p>表格添加行：在表格中<code>ctrl + 回车</code></p></li><li><p>举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|学号|姓名|性别|成绩|</span><br><span class="line">|:--|:-:|---:|      左对齐/居中/右对齐</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">性别</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="center">273</td><td align="center">小福</td><td align="center">男</td><td align="center">很多分</td></tr><tr><td align="center">702</td><td align="center">小璇</td><td align="center">女</td><td align="center">100</td></tr></tbody></table></li></ul></li></ul><hr><h2 id="Typora代码类操作"><a href="#Typora代码类操作" class="headerlink" title="Typora代码类操作"></a>Typora代码类操作</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法格式： `文本内容`</span><br><span class="line">快捷键：ctrl + shfit + K</span><br></pre></td></tr></table></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>语法格式：&#96;&#96;&#96;&#96; 空格 语言名称  <code> 或者 </code>~~~ 空格 语言名称 &#96;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举例</span><br><span class="line">    ``` C++</span><br><span class="line">    ``` java</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加粗 ：**我是胖子**</span><br><span class="line">删除：~~我是删除~~</span><br><span class="line">斜体：*我站不直*</span><br><span class="line">斜粗体: ***我比斜体更粗***</span><br></pre></td></tr></table></figure><ol><li>加粗 ：<strong>我是胖子</strong></li><li>删除：<del>我是删除</del></li><li>斜体：<em>我站不直</em></li><li>斜粗体: <em><strong>我比斜体更粗</strong></em></li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">    &gt;</span><br><span class="line">    &gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>语法：<code>---</code> 或者 <code>***</code></p><hr><h2 id="Typora元素类操作"><a href="#Typora元素类操作" class="headerlink" title="Typora元素类操作"></a>Typora元素类操作</h2><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>Typora相关设置：文件 —&gt; 偏好设置 —&gt; 复制图片到.&#x2F;$(filename).assets文件夹】</p><p>创建方式： <code>![]()</code></p><p>快捷键： ctrl + shift + i</p><p><img src="https://cdn.jsdelivr.net/gh/daokunn/picGo/img/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97.jpg"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法格式：<code>[ 名称 ]( 地址)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](www.baidu.com)</span><br></pre></td></tr></table></figure><p><a href="www.baidu.com">百度</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
